// You need to use -I/path/to/AFLplusplus/include -I.
#include "afl-fuzz.h"

#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <stddef.h>
#include <time.h>

typedef struct my_mutator {

  afl_state_t *afl;

} my_mutator_t;


void mutateUInt32Value(char *token) {
    unsigned int num;
    if (sscanf(token, "%u", &num) == 1) {
        printf("INT: %d \n", num);
        // Generate a random bit position to flip
        int bit_pos = rand() % (sizeof(unsigned int) * 8);
        printf("POS: %d \n", bit_pos);

        // Perform a bit-flip mutation on the numeric value
        num ^= (1u << bit_pos);
        printf("INT SHT: %d \n", num);

        sprintf(token, "%d", num);
        printf("END\n");
    }
}

void findAndMutateArgs(uint8_t *new_buf) {
    size_t buf_size = strlen((char *)new_buf);
    new_buf[buf_size] = '\0';

    // Find numeric parts and mutate them using mutateNumericValue function
    char *token = strtok((char *)new_buf, " ");
    token = strtok(NULL, " "); // Skip the first one
    while (token != NULL) {
        mutateUInt32Value(token);
        // TODO: add other data types
        token = strtok(NULL, " ");
    }
}

/**
 * Perform custom mutations on a given input
 *
 * (Optional for now. Required in the future)
 *
 * @param[in] data pointer returned in afl_custom_init for this fuzz case
 * @param[in] buf Pointer to input data to be mutated
 * @param[in] buf_size Size of input data
 * @param[out] out_buf the buffer we will work on. we can reuse *buf. NULL on
 * error.
 * @param[in] add_buf Buffer containing the additional test case
 * @param[in] add_buf_size Size of the additional test case
 * @param[in] max_size Maximum size of the mutated output. The mutation must not
 *     produce data larger than max_size.
 * @return Size of the mutated output.
 */
size_t afl_custom_fuzz(my_mutator_t *data, uint8_t *buf, size_t buf_size,
                       u8 **out_buf, uint8_t *add_buf,
                       size_t add_buf_size,  // add_buf can be NULL
                       size_t max_size) {

    size_t new_size = buf_size;
    uint8_t *new_buf = malloc(new_size);
    if (!new_buf)
        return 0;

    // Copy the original input data
    memcpy(new_buf, buf, buf_size);

    // bit flip on the arguments
    findAndMutateArgs(new_buf);

    *out_buf = new_buf;
    return new_size;
}


int main () {
    srand(time(NULL));

    char* input_digit = (char *)malloc(20 * sizeof(char));
    input_digit = "5";
    mutateUInt32Value(input_digit);
    // Print characters until the null-terminator is encountered
    for (int i = 0; input_digit[i] != '\0'; i++) {
        printf(">> %c", input_digit[i]);
    }
    printf("\n");
        char* input_digit = (char *)malloc(20 * sizeof(char));


    char input[] = "./a.out 5 5";
    //findAndMutateArgs(&input);

    // Print characters until the null-terminator is encountered
    for (int i = 0; input[i] != '\0'; i++) {
        printf("%c", input[i]);
    }
    printf("\n");

    free(input_digit);
}
