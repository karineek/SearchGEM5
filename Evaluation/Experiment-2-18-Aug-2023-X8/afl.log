ubuntu@fuzzer-03:~/experiment-5$ ./run-afl.sh 
[+] Enabled environment variable AFL_CUSTOM_MUTATOR_LIBRARY with value /home/ubuntu/Gem5Testing/src/custom_mutators/cm-gem5.so
[+] Enabled environment variable AFL_DUMB_FORKSRV with value 1
[+] Enabled environment variable AFL_CUSTOM_MUTATOR_ONLY with value 1
afl-fuzz++4.08c based on afl by Michal Zalewski and a large online community
[+] AFL++ is maintained by Marc "van Hauser" Heuse, Dominik Maier, Andrea Fioraldi and Heiko "hexcoder" Eißfeldt
[+] AFL++ is open source, get it at https://github.com/AFLplusplus/AFLplusplus
[+] NOTE: AFL++ >= v3 has changed defaults and behaviours - see README.md
[+] No -M/-S set, autoconfiguring for "-S default"
[*] Getting to work...
[+] Using exponential power schedule (FAST)
[+] Enabled testcache with 50 MB
[+] Generating fuzz data with a length of min=1 max=1048576
[*] Checking core_pattern...
[!] WARNING: Could not check CPU scaling governor
[+] You have 8 CPU cores and 1 runnable tasks (utilization: 12%).
[+] Try parallel jobs - see /usr/local/share/doc/afl/fuzzing_in_depth.md#c-using-multiple-cores
[*] Setting up output directories...
[*] Checking CPU core loadout...
[+] Found a free CPU core, try binding to #0.
[*] Loading custom mutator library from '/home/ubuntu/Gem5Testing/src/custom_mutators/cm-gem5.so'...
[+] Found 'afl_custom_mutator'.
[*] optional symbol 'afl_custom_fuzz_count' not found.
[*] optional symbol 'afl_custom_post_process' not found.
[*] optional symbol 'afl_custom_init_trim' not found.
[*] optional symbol 'afl_custom_trim' not found.
[*] optional symbol 'afl_custom_post_trim' not found.
[*] optional symbol 'afl_custom_havoc_mutation' not found.
[*] optional symbol 'afl_custom_havoc_mutation_probability' not found.
[*] optional symbol 'afl_custom_queue_get' not found.
[*] optional symbol 'afl_custom_splice_optout' not found.
[*] optional symbol 'afl_custom_fuzz_send' not found.
[*] optional symbol 'afl_custom_queue_new_entry' not found
[*] optional symbol 'afl_custom_describe' not found.
[+] Custom mutator '/home/ubuntu/Gem5Testing/src/custom_mutators/cm-gem5.so' installed successfully.
[*] Scanning 'input'...
[+] Loaded a total of 1086 seeds.
[*] Creating hard links for all input files...
[*] Validating target binary...
[*] Spinning up the fork server...
[+] All right - fork server is up.
[*] Target map size: 65536
[*] No auto-generated dictionary tokens to reuse.
[*] Attempting dry run with 'id:000000,time:0,execs:0,orig:00010.txt'...
    len = 47, map size = 47446, exec speed = 1986064 us, hash = 3f32c116bc684264
Results of dry-run 0[*] Attempting dry run with 'id:000001,time:0,execs:0,orig:00040.txt'...
    len = 47, map size = 47403, exec speed = 2080379 us, hash = 156428e7077ab230
Results of dry-run 0[*] Attempting dry run with 'id:000002,time:0,execs:0,orig:00043.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47266, exec speed = 1267439 us, hash = 2c71d5b3e2faf73f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000003,time:0,execs:0,orig:00044.txt'...
    len = 47, map size = 47260, exec speed = 1263697 us, hash = a12fa2a139e3a4c6
Results of dry-run 0[*] Attempting dry run with 'id:000004,time:0,execs:0,orig:00045.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47266, exec speed = 1266233 us, hash = 62690278627093cc
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000005,time:0,execs:0,orig:00046.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1480657 us, hash = a12fa2a139e3a4c6
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000006,time:0,execs:0,orig:00047.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47266, exec speed = 1265201 us, hash = a9e240b23b6a78bf
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000007,time:0,execs:0,orig:00048.txt'...
    len = 49, map size = 47266, exec speed = 1264997 us, hash = 137c9baf09905e66
Results of dry-run 0[*] Attempting dry run with 'id:000008,time:0,execs:0,orig:00049.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1366004 us, hash = 75420340f67d35f4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000009,time:0,execs:0,orig:00056.txt'...
    len = 53, map size = 47438, exec speed = 1967086 us, hash = 9860751413543a4b
Results of dry-run 0[*] Attempting dry run with 'id:000010,time:0,execs:0,orig:00057.txt'...
    len = 49, map size = 47266, exec speed = 1419991 us, hash = cf4e89d36e277c30
Results of dry-run 0[*] Attempting dry run with 'id:000011,time:0,execs:0,orig:00058.txt'...
    len = 57, map size = 47256, exec speed = 1260862 us, hash = 132db7d932b31de7
Results of dry-run 0[*] Attempting dry run with 'id:000012,time:0,execs:0,orig:00059.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47425, exec speed = 2035088 us, hash = 2b22aca09b4b346c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000013,time:0,execs:0,orig:00061.txt'...
    len = 47, map size = 47260, exec speed = 1265470 us, hash = 22144106ec842bcc
Results of dry-run 0[*] Attempting dry run with 'id:000014,time:0,execs:0,orig:00062.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47264, exec speed = 1267545 us, hash = 513af79f6f3e8fef
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000015,time:0,execs:0,orig:00064.txt'...
    len = 47, map size = 47260, exec speed = 1264263 us, hash = a104bc97679ee2c2
Results of dry-run 0[*] Attempting dry run with 'id:000016,time:0,execs:0,orig:00065.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47266, exec speed = 1272202 us, hash = 1ff2224dea447d89
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000017,time:0,execs:0,orig:00067.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1271076 us, hash = 82c3cfef1e86151c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000018,time:0,execs:0,orig:00068.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1459697 us, hash = 22144106ec842bcc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000019,time:0,execs:0,orig:00070.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1489169 us, hash = 2a8cceab4e176b43
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000020,time:0,execs:0,orig:00073.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1446006 us, hash = 31c1d34a00412f15
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000021,time:0,execs:0,orig:00074.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47429, exec speed = 2122827 us, hash = d1bcb3172dce2206
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000022,time:0,execs:0,orig:00075.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1709238 us, hash = 75420340f67d35f4
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000023,time:0,execs:0,orig:00076.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1310824 us, hash = 357dcaae0c99f45a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000024,time:0,execs:0,orig:00077.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1266749 us, hash = 0a79c61fb1bf5ee8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000025,time:0,execs:0,orig:00079.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1339577 us, hash = 5bf9b998aded2f86
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000026,time:0,execs:0,orig:00081.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1264620 us, hash = 71c0ecfe5f846bb1
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000027,time:0,execs:0,orig:00083.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1428051 us, hash = 1763e5cf80a50833
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000028,time:0,execs:0,orig:00084.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47261, exec speed = 1575577 us, hash = 205440a0fed8b6e2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000029,time:0,execs:0,orig:00085.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1942872 us, hash = 853e398f6ef8bf54
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000030,time:0,execs:0,orig:00087.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47425, exec speed = 2583023 us, hash = 5ed66f71e4c100b2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000031,time:0,execs:0,orig:00089.txt'...
    len = 47, map size = 47261, exec speed = 1266733 us, hash = 43800d33c2e55c0a
Results of dry-run 0[*] Attempting dry run with 'id:000032,time:0,execs:0,orig:00090.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47266, exec speed = 1264337 us, hash = 56d69001f573d33d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000033,time:0,execs:0,orig:00091.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47425, exec speed = 2549219 us, hash = 6553e4abaf9d2444
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000034,time:0,execs:0,orig:00093.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47425, exec speed = 2048333 us, hash = c516accae2190e0e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000035,time:0,execs:0,orig:00094.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1268601 us, hash = 22144106ec842bcc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000036,time:0,execs:0,orig:00095.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1266099 us, hash = 0222b455f057c047
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000037,time:0,execs:0,orig:00098.txt'...
    len = 47, map size = 47260, exec speed = 1263286 us, hash = 22144106ec842bcc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000038,time:0,execs:0,orig:00099.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1268916 us, hash = 82c3cfef1e86151c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000039,time:0,execs:0,orig:00100.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47425, exec speed = 2034602 us, hash = 0373df8200820b90
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000040,time:0,execs:0,orig:00101.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1553235 us, hash = 22144106ec842bcc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000041,time:0,execs:0,orig:00102.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1789971 us, hash = 4927fdea98115568
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000042,time:0,execs:0,orig:00103.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 2034893 us, hash = 82c3cfef1e86151c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000043,time:0,execs:0,orig:00104.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1668261 us, hash = 5bf9b998aded2f86
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000044,time:0,execs:0,orig:00105.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1332907 us, hash = 705fdec5de9271a2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000045,time:0,execs:0,orig:00106.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1265115 us, hash = 75420340f67d35f4
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000046,time:0,execs:0,orig:00107.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1436562 us, hash = 3000aaa96d5d78a2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000047,time:0,execs:0,orig:00109.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1349032 us, hash = 0a94c71c8fd2cd39
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000048,time:0,execs:0,orig:00110.txt'...
    len = 47, map size = 47264, exec speed = 1268201 us, hash = 963e63f096cf572d
Results of dry-run 0[*] Attempting dry run with 'id:000049,time:0,execs:0,orig:00111.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47271, exec speed = 1266533 us, hash = 40391cb4b5ccf31f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000050,time:0,execs:0,orig:00112.txt'...
    len = 47, map size = 47260, exec speed = 1261399 us, hash = f72b9da7c0f2bc4e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000051,time:0,execs:0,orig:00113.txt'...
    len = 71, map size = 47423, exec speed = 1946487 us, hash = f3feea5b5e3f6f15
Results of dry-run 0[*] Attempting dry run with 'id:000052,time:0,execs:0,orig:00114.txt'...
    len = 47, map size = 47258, exec speed = 1264703 us, hash = f78e396be6def73d
Results of dry-run 0[*] Attempting dry run with 'id:000053,time:0,execs:0,orig:00115.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1483270 us, hash = 0785c70eada761b7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000054,time:0,execs:0,orig:00116.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1497233 us, hash = f62d9f164c2a0937
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000055,time:0,execs:0,orig:00117.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1263335 us, hash = 6e3cc339b7b4bca3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000056,time:0,execs:0,orig:00118.txt'...
    len = 47, map size = 47260, exec speed = 1260811 us, hash = 22144106ec842bcc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000057,time:0,execs:0,orig:00119.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47289, exec speed = 1393901 us, hash = a42bcf16469d137a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000058,time:0,execs:0,orig:00120.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1272899 us, hash = 2454d4da47253b7e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000059,time:0,execs:0,orig:00121.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1265172 us, hash = d859c03a6e46db71
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000060,time:0,execs:0,orig:00122.txt'...
    len = 47, map size = 47260, exec speed = 1274164 us, hash = 22144106ec842bcc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000061,time:0,execs:0,orig:00123.txt'...
    len = 49, map size = 47289, exec speed = 1269091 us, hash = a42bcf16469d137a
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000062,time:0,execs:0,orig:00124.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000062,time:0,execs:0,orig:00124.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000063,time:0,execs:0,orig:00126.txt'...
    len = 47, map size = 47260, exec speed = 1264273 us, hash = f72b9da7c0f2bc4e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000064,time:0,execs:0,orig:00127.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1271020 us, hash = f02ba97badf943b1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000065,time:0,execs:0,orig:00128.txt'...
    len = 47, map size = 47260, exec speed = 1281695 us, hash = 75420340f67d35f4
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000066,time:0,execs:0,orig:00129.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1265764 us, hash = 8e99d60ed60d8eb8
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000067,time:0,execs:0,orig:00131.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47425, exec speed = 1959034 us, hash = 1db7bde626c0c159
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000068,time:0,execs:0,orig:00133.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1269493 us, hash = 5911eaf90cbc79a1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000069,time:0,execs:0,orig:00134.txt'...
    len = 47, map size = 47258, exec speed = 1262479 us, hash = f78e396be6def73d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000070,time:0,execs:0,orig:00135.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47258, exec speed = 1267752 us, hash = 5b34457169441bf6
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000071,time:0,execs:0,orig:00136.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47264, exec speed = 1270221 us, hash = 2619ab113712829b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000072,time:0,execs:0,orig:00137.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47425, exec speed = 1971072 us, hash = 6ad07667c39651d7
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000073,time:0,execs:0,orig:00138.txt'...
    len = 57, map size = 47256, exec speed = 1272029 us, hash = b725c2d0f561929a
Results of dry-run 0[*] Attempting dry run with 'id:000074,time:0,execs:0,orig:00142.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47264, exec speed = 1265712 us, hash = 99107054ddb25e2c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000075,time:0,execs:0,orig:00143.txt'...
    len = 47, map size = 47272, exec speed = 1282476 us, hash = b0d13081c0fd4d01
Results of dry-run 0[*] Attempting dry run with 'id:000076,time:0,execs:0,orig:00144.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1270905 us, hash = 75420340f67d35f4
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000077,time:0,execs:0,orig:00145.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47258, exec speed = 1265184 us, hash = f78e396be6def73d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000078,time:0,execs:0,orig:00146.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1275553 us, hash = 137c9baf09905e66
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000079,time:0,execs:0,orig:00148.txt'...
    len = 47, map size = 47260, exec speed = 1278434 us, hash = 11efdce0c63fc459
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000080,time:0,execs:0,orig:00149.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47272, exec speed = 1285065 us, hash = 20eaeee6325f0a5c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000081,time:0,execs:0,orig:00151.txt'...
    len = 47, map size = 47260, exec speed = 1268200 us, hash = 75420340f67d35f4
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000082,time:0,execs:0,orig:00153.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1269006 us, hash = 4c67047e892a9514
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000083,time:0,execs:0,orig:00154.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47440, exec speed = 1990100 us, hash = 13ece7f625ea48f6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000084,time:0,execs:0,orig:00155.txt'...
    len = 47, map size = 47258, exec speed = 1263138 us, hash = f78e396be6def73d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000085,time:0,execs:0,orig:00156.txt'...
    len = 47, map size = 47435, exec speed = 2006162 us, hash = b53ac03895d96fd8
Results of dry-run 0[*] Attempting dry run with 'id:000086,time:0,execs:0,orig:00158.txt'...
    len = 47, map size = 47447, exec speed = 2005991 us, hash = 8a594f90f1faeb90
Results of dry-run 0[*] Attempting dry run with 'id:000087,time:0,execs:0,orig:00159.txt'...
    len = 47, map size = 47445, exec speed = 1972199 us, hash = 67527799847d693a
Results of dry-run 0[*] Attempting dry run with 'id:000088,time:0,execs:0,orig:00160.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47450, exec speed = 2036791 us, hash = 5c99b62268917269
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000089,time:0,execs:0,orig:00161.txt'...
    len = 47, map size = 47435, exec speed = 2020822 us, hash = 96675c59d9f42b2d
Results of dry-run 0[*] Attempting dry run with 'id:000090,time:0,execs:0,orig:00163.txt'...
    len = 47, map size = 47445, exec speed = 2002896 us, hash = 58bc27ce476d3115
Results of dry-run 0[*] Attempting dry run with 'id:000091,time:0,execs:0,orig:00164.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000091,time:0,execs:0,orig:00164.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000092,time:0,execs:0,orig:00165.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47435, exec speed = 1954535 us, hash = 6d275a7c116450e1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000093,time:0,execs:0,orig:00166.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47438, exec speed = 1969346 us, hash = 78495be4be3fae01
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000094,time:0,execs:0,orig:00167.txt'...
    len = 49, map size = 47423, exec speed = 1953322 us, hash = 786032cd85aecadc
Results of dry-run 0[*] Attempting dry run with 'id:000095,time:0,execs:0,orig:00168.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1275534 us, hash = 0602964fa68a980c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000096,time:0,execs:0,orig:00170.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47431, exec speed = 1954949 us, hash = e090d010edb15280
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000097,time:0,execs:0,orig:00171.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47440, exec speed = 1962605 us, hash = 08e8c246f1e0a537
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000098,time:0,execs:0,orig:00172.txt'...
    len = 47, map size = 47443, exec speed = 2007245 us, hash = 9c881fb73564a727
Results of dry-run 0[*] Attempting dry run with 'id:000099,time:0,execs:0,orig:00173.txt'...
    len = 47, map size = 47442, exec speed = 2021108 us, hash = 34d00e2c47f941d7
Results of dry-run 0[*] Attempting dry run with 'id:000100,time:0,execs:0,orig:00175.txt'...
[!] WARNING: instability detected during calibration
    len = 63, map size = 47759, exec speed = 2165649 us, hash = 4d40198e821b05b9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000101,time:0,execs:0,orig:00176.txt'...
    len = 47, map size = 47422, exec speed = 1957314 us, hash = 204606b08fb2218f
Results of dry-run 0[*] Attempting dry run with 'id:000102,time:0,execs:0,orig:00177.txt'...
    len = 47, map size = 47443, exec speed = 1992291 us, hash = 98a2d35e6e7380b7
Results of dry-run 0[*] Attempting dry run with 'id:000103,time:0,execs:0,orig:00178.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47433, exec speed = 1970490 us, hash = ec0b145b12efe170
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000104,time:0,execs:0,orig:00179.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000104,time:0,execs:0,orig:00179.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000105,time:0,execs:0,orig:00180.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000105,time:0,execs:0,orig:00180.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000106,time:0,execs:0,orig:00181.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47449, exec speed = 3630037 us, hash = c355d8e1a3cd947f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000107,time:0,execs:0,orig:00183.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1267680 us, hash = 7b34e6abf399c5ef
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000108,time:0,execs:0,orig:00184.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47441, exec speed = 1959104 us, hash = 2e3afb1f26058cf3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000109,time:0,execs:0,orig:00186.txt'...
    len = 47, map size = 47260, exec speed = 1286053 us, hash = 50b6cacbb10ff330
Results of dry-run 0[*] Attempting dry run with 'id:000110,time:0,execs:0,orig:00187.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47481, exec speed = 2389357 us, hash = 74ea7c3c4adcc14c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000111,time:0,execs:0,orig:00189.txt'...
    len = 47, map size = 47448, exec speed = 1965953 us, hash = d99c27afe6bb21ef
Results of dry-run 0[*] Attempting dry run with 'id:000112,time:0,execs:0,orig:00190.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47425, exec speed = 1949700 us, hash = 150d5c86c1ff0544
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000113,time:0,execs:0,orig:00191.txt'...
    len = 59, map size = 47425, exec speed = 1949908 us, hash = 71d6d40411fd3019
Results of dry-run 0[*] Attempting dry run with 'id:000114,time:0,execs:0,orig:00192.txt'...
    len = 47, map size = 47435, exec speed = 2013439 us, hash = 1a67c13993d6ade2
Results of dry-run 0[*] Attempting dry run with 'id:000115,time:0,execs:0,orig:00193.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47411, exec speed = 1950109 us, hash = c276166a0dcc279a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000116,time:0,execs:0,orig:00194.txt'...
    len = 47, map size = 47434, exec speed = 1945993 us, hash = 7b9efdd9af9ecc1b
Results of dry-run 0[*] Attempting dry run with 'id:000117,time:0,execs:0,orig:00195.txt'...
    len = 47, map size = 47691, exec speed = 1998322 us, hash = e4af214fc0ef0411
Results of dry-run 0[*] Attempting dry run with 'id:000118,time:0,execs:0,orig:00197.txt'...
    len = 47, map size = 47434, exec speed = 2010290 us, hash = e8519777de91b7f5
Results of dry-run 0[*] Attempting dry run with 'id:000119,time:0,execs:0,orig:00201.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47438, exec speed = 1955708 us, hash = e72b077e76175c7b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000120,time:0,execs:0,orig:00202.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47445, exec speed = 1964968 us, hash = be1136232d94eecd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000121,time:0,execs:0,orig:00203.txt'...
    len = 47, map size = 47417, exec speed = 1960152 us, hash = bd1d56b0482529dd
Results of dry-run 0[*] Attempting dry run with 'id:000122,time:0,execs:0,orig:00209.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47262, exec speed = 1268781 us, hash = b706c2206b215980
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000123,time:0,execs:0,orig:00211.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47437, exec speed = 1945177 us, hash = f00c67a0e2edbfd9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000124,time:0,execs:0,orig:00212.txt'...
    len = 47, map size = 47412, exec speed = 1948280 us, hash = 65fbc43c9f280408
Results of dry-run 0[*] Attempting dry run with 'id:000125,time:0,execs:0,orig:00217.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47422, exec speed = 1948337 us, hash = ac220ef58b3c9a70
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000126,time:0,execs:0,orig:00220.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47443, exec speed = 2122912 us, hash = d6ee31fb4e4f4cf2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000127,time:0,execs:0,orig:20000112-1.txt'...
[!] WARNING: instability detected during calibration
    len = 74, map size = 47423, exec speed = 1970451 us, hash = cfc8992e45af1c74
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000128,time:0,execs:0,orig:20000113-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000128,time:0,execs:0,orig:20000113-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000129,time:0,execs:0,orig:20000121-1.txt'...
    len = 56, map size = 47266, exec speed = 1265206 us, hash = aa2c7983e82e497d
Results of dry-run 0[*] Attempting dry run with 'id:000130,time:0,execs:0,orig:20000205-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47263, exec speed = 1266291 us, hash = ccf1f9410301ace1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000131,time:0,execs:0,orig:20000217-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000131,time:0,execs:0,orig:20000217-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000132,time:0,execs:0,orig:20000224-1.txt'...
    len = 52, map size = 47264, exec speed = 1266604 us, hash = 873a29089fe04400
Results of dry-run 0[*] Attempting dry run with 'id:000133,time:0,execs:0,orig:20000227-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000133,time:0,execs:0,orig:20000227-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000134,time:0,execs:0,orig:20000313-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000134,time:0,execs:0,orig:20000313-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000135,time:0,execs:0,orig:20000314-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47260, exec speed = 1278021 us, hash = 068611ca47de1d8e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000136,time:0,execs:0,orig:20000314-2.txt'...
    len = 64, map size = 47424, exec speed = 1966579 us, hash = 713a3cf04f8620c1
Results of dry-run 0[*] Attempting dry run with 'id:000137,time:0,execs:0,orig:20000314-3.txt'...
[!] WARNING: instability detected during calibration
    len = 86, map size = 47423, exec speed = 1955994 us, hash = ab353561c8f55094
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000138,time:0,execs:0,orig:20000402-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47260, exec speed = 1261478 us, hash = 0b899011586f1107
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000139,time:0,execs:0,orig:20000403-1.txt'...
    len = 56, map size = 47422, exec speed = 1964491 us, hash = 68208a0b99861220
Results of dry-run 0[*] Attempting dry run with 'id:000140,time:0,execs:0,orig:20000412-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000140,time:0,execs:0,orig:20000412-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000141,time:0,execs:0,orig:20000412-2.txt'...
    len = 52, map size = 47261, exec speed = 1292049 us, hash = 3d7ab05f1372dcae
Results of dry-run 0[*] Attempting dry run with 'id:000142,time:0,execs:0,orig:20000412-4.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000142,time:0,execs:0,orig:20000412-4.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000143,time:0,execs:0,orig:20000412-5.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000143,time:0,execs:0,orig:20000412-5.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000144,time:0,execs:0,orig:20000412-6.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000144,time:0,execs:0,orig:20000412-6.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000145,time:0,execs:0,orig:20000419-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000145,time:0,execs:0,orig:20000419-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000146,time:0,execs:0,orig:20000422-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000146,time:0,execs:0,orig:20000422-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000147,time:0,execs:0,orig:20000503-1.txt'...
    len = 52, map size = 47269, exec speed = 1283804 us, hash = c707903974a427ac
Results of dry-run 0[*] Attempting dry run with 'id:000148,time:0,execs:0,orig:20000511-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000148,time:0,execs:0,orig:20000511-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000149,time:0,execs:0,orig:20000519-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000149,time:0,execs:0,orig:20000519-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000150,time:0,execs:0,orig:20000523-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000150,time:0,execs:0,orig:20000523-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000151,time:0,execs:0,orig:20000528-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000151,time:0,execs:0,orig:20000528-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000152,time:0,execs:0,orig:20000605-2.txt'...
    len = 54, map size = 47274, exec speed = 1287223 us, hash = b19488d130cbc6fe
Results of dry-run 0[*] Attempting dry run with 'id:000153,time:0,execs:0,orig:20000605-3.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47422, exec speed = 1937588 us, hash = 59c292addea0e2ab
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000154,time:0,execs:0,orig:20000622-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000154,time:0,execs:0,orig:20000622-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000155,time:0,execs:0,orig:20000703-1.txt'...
    len = 58, map size = 47275, exec speed = 1287650 us, hash = 278093298e6cba54
Results of dry-run 0[*] Attempting dry run with 'id:000156,time:0,execs:0,orig:20000706-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000156,time:0,execs:0,orig:20000706-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000157,time:0,execs:0,orig:20000706-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000157,time:0,execs:0,orig:20000706-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000158,time:0,execs:0,orig:20000706-4.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000158,time:0,execs:0,orig:20000706-4.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000159,time:0,execs:0,orig:20000706-5.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000159,time:0,execs:0,orig:20000706-5.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000160,time:0,execs:0,orig:20000715-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000160,time:0,execs:0,orig:20000715-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000161,time:0,execs:0,orig:20000717-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000161,time:0,execs:0,orig:20000717-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000162,time:0,execs:0,orig:20000717-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000162,time:0,execs:0,orig:20000717-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000163,time:0,execs:0,orig:20000717-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000163,time:0,execs:0,orig:20000717-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000164,time:0,execs:0,orig:20000717-5.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000164,time:0,execs:0,orig:20000717-5.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000165,time:0,execs:0,orig:20000726-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47265, exec speed = 1269498 us, hash = b675d4b8608c1143
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000166,time:0,execs:0,orig:20000731-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47300, exec speed = 1369941 us, hash = 7aae162bee37d5a4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000167,time:0,execs:0,orig:20000801-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47434, exec speed = 1961761 us, hash = ac05d4b59e1be245
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000168,time:0,execs:0,orig:20001009-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47267, exec speed = 1265783 us, hash = 11f30d91a19a05a9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000169,time:0,execs:0,orig:20001009-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000169,time:0,execs:0,orig:20001009-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000170,time:0,execs:0,orig:20001011-1.txt'...
[!] WARNING: instability detected during calibration
    len = 74, map size = 47428, exec speed = 1951294 us, hash = 42b5f9f0aa59eb44
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000171,time:0,execs:0,orig:20001017-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47433, exec speed = 2153432 us, hash = ab425befac259a27
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000172,time:0,execs:0,orig:20001017-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000172,time:0,execs:0,orig:20001017-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000173,time:0,execs:0,orig:20001024-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000173,time:0,execs:0,orig:20001024-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000174,time:0,execs:0,orig:20001026-1.txt'...
    len = 33, map size = 37885, exec speed = 435040 us, hash = f17d235f78d98289
Results of dry-run 0[*] Attempting dry run with 'id:000175,time:0,execs:0,orig:20001027-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000175,time:0,execs:0,orig:20001027-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000176,time:0,execs:0,orig:20001108-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000176,time:0,execs:0,orig:20001108-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000177,time:0,execs:0,orig:20001130-2.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47259, exec speed = 1498897 us, hash = 2143ae22cf29043b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000178,time:0,execs:0,orig:20001203-1.txt'...
    len = 54, map size = 47268, exec speed = 1267177 us, hash = 68eba841fe2ee7e5
Results of dry-run 0[*] Attempting dry run with 'id:000179,time:0,execs:0,orig:20001203-2.txt'...
    len = 52, map size = 47436, exec speed = 2275614 us, hash = e5480d88cb4d1ce6
Results of dry-run 0[*] Attempting dry run with 'id:000180,time:0,execs:0,orig:20001228-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1442180 us, hash = 4ad2f8341115ad79
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000181,time:0,execs:0,orig:20001229-1.txt'...
[!] WARNING: instability detected during calibration
    len = 74, map size = 47426, exec speed = 1950791 us, hash = 5cf9fa78257fe315
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000182,time:0,execs:0,orig:20010116-1.txt'...
    len = 52, map size = 47268, exec speed = 1286723 us, hash = 5afce505ca8a0d68
Results of dry-run 0[*] Attempting dry run with 'id:000183,time:0,execs:0,orig:20010118-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000183,time:0,execs:0,orig:20010118-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000184,time:0,execs:0,orig:20010119-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47273, exec speed = 1274860 us, hash = fb579814c637529e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000185,time:0,execs:0,orig:20010123-1.txt'...
    len = 52, map size = 47263, exec speed = 1290648 us, hash = 188580dc877ed829
Results of dry-run 0[*] Attempting dry run with 'id:000186,time:0,execs:0,orig:20010129-1.txt'...
    len = 56, map size = 47267, exec speed = 1288259 us, hash = a7973b6e5e593b86
Results of dry-run 0[*] Attempting dry run with 'id:000187,time:0,execs:0,orig:20010221-1.txt'...
    len = 52, map size = 47262, exec speed = 1282021 us, hash = 2f550a7dd977a2cb
Results of dry-run 0[*] Attempting dry run with 'id:000188,time:0,execs:0,orig:20010403-1.txt'...
    len = 54, map size = 47273, exec speed = 1281205 us, hash = 8f1c3aca14f179b7
Results of dry-run 0[*] Attempting dry run with 'id:000189,time:0,execs:0,orig:20010409-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47396, exec speed = 1948903 us, hash = b0ca1a5086f1bbf7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000190,time:0,execs:0,orig:20010518-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000190,time:0,execs:0,orig:20010518-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000191,time:0,execs:0,orig:20010518-2.txt'...
    len = 52, map size = 47285, exec speed = 1286591 us, hash = 2f1315d83db5e947
Results of dry-run 0[*] Attempting dry run with 'id:000192,time:0,execs:0,orig:20010520-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000192,time:0,execs:0,orig:20010520-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000193,time:0,execs:0,orig:20010605-1.txt'...
    len = 52, map size = 47260, exec speed = 1267195 us, hash = 0c75bf753dece229
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000194,time:0,execs:0,orig:20010605-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000194,time:0,execs:0,orig:20010605-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000195,time:0,execs:0,orig:20010711-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000195,time:0,execs:0,orig:20010711-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000196,time:0,execs:0,orig:20010717-1.txt'...
    len = 52, map size = 47261, exec speed = 1272814 us, hash = 00c6c426ab36b97b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000197,time:0,execs:0,orig:20010904-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47259, exec speed = 1389567 us, hash = dce293606726d006
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000198,time:0,execs:0,orig:20010915-1.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47424, exec speed = 1972712 us, hash = 6f169a390bb3fa13
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000199,time:0,execs:0,orig:20010925-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000199,time:0,execs:0,orig:20010925-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000200,time:0,execs:0,orig:20011019-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47257, exec speed = 1402507 us, hash = 91837a033a5e09d7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000201,time:0,execs:0,orig:20011024-1.txt'...
    len = 86, map size = 47266, exec speed = 1285817 us, hash = 66bd844653d303f2
Results of dry-run 0[*] Attempting dry run with 'id:000202,time:0,execs:0,orig:20011109-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000202,time:0,execs:0,orig:20011109-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000203,time:0,execs:0,orig:20011109-2.txt'...
[!] WARNING: instability detected during calibration
    len = 86, map size = 47422, exec speed = 1958485 us, hash = 2e5ec9d369960778
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000204,time:0,execs:0,orig:20011114-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000204,time:0,execs:0,orig:20011114-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000205,time:0,execs:0,orig:20011121-1.txt'...
    len = 64, map size = 47422, exec speed = 1963423 us, hash = 62059e68aa548624
Results of dry-run 0[*] Attempting dry run with 'id:000206,time:0,execs:0,orig:20011219-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1275859 us, hash = 3c9d6a24fa5eb869
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000207,time:0,execs:0,orig:20011223-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47260, exec speed = 1437412 us, hash = 26c75acbc93215f0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000208,time:0,execs:0,orig:2002-04-17-PrintfChar.txt'...
[!] WARNING: instability detected during calibration
    len = 75, map size = 47422, exec speed = 2135653 us, hash = 5bc4ecf729eb0b0d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000209,time:0,execs:0,orig:2002-05-02-ArgumentTest.txt'...
    len = 58, map size = 37885, exec speed = 280551 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000210,time:0,execs:0,orig:2002-05-02-CastTest.txt'...
[!] WARNING: instability detected during calibration
    len = 63, map size = 47452, exec speed = 2117622 us, hash = e110292fd7f2b3fe
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000211,time:0,execs:0,orig:2002-05-02-CastTest1.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47438, exec speed = 1949212 us, hash = a66fecb6a2e7c80d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000212,time:0,execs:0,orig:2002-05-02-CastTest2.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47437, exec speed = 1947998 us, hash = 14708877b8fabf5b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000213,time:0,execs:0,orig:2002-05-02-ManyArguments.txt'...
[!] WARNING: instability detected during calibration
    len = 84, map size = 47601, exec speed = 2191441 us, hash = 698b3c7bb3ee9538
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000214,time:0,execs:0,orig:2002-05-03-NotTest.txt'...
    len = 66, map size = 47440, exec speed = 1995928 us, hash = 5ae9077ee44f7db0
Results of dry-run 0[*] Attempting dry run with 'id:000215,time:0,execs:0,orig:2002-05-19-DivTest.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47449, exec speed = 2063705 us, hash = 1dc96a0db98b3f03
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000216,time:0,execs:0,orig:2002-08-02-CastTest.txt'...
    len = 61, map size = 47446, exec speed = 1943623 us, hash = a3e68cc1ecfdc222
Results of dry-run 0[*] Attempting dry run with 'id:000217,time:0,execs:0,orig:2002-08-02-CastTest2.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47449, exec speed = 2041416 us, hash = 69a7894c7f81ea95
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000218,time:0,execs:0,orig:2002-08-19-CodegenBug.txt'...
    len = 63, map size = 47409, exec speed = 1951852 us, hash = 0d93783aa99a04ba
Results of dry-run 0[*] Attempting dry run with 'id:000219,time:0,execs:0,orig:2002-10-09-ArrayResolution.txt'...
[!] WARNING: instability detected during calibration
    len = 68, map size = 47449, exec speed = 1946941 us, hash = 5b6845604ebdd61f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000220,time:0,execs:0,orig:2002-10-12-StructureArgs.txt'...
[!] WARNING: instability detected during calibration
    len = 80, map size = 47555, exec speed = 2090253 us, hash = 87074e6415dbef45
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000221,time:0,execs:0,orig:2002-10-12-StructureArgsSimple.txt'...
    len = 59, map size = 37885, exec speed = 281242 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000222,time:0,execs:0,orig:2002-10-13-BadLoad.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47422, exec speed = 1944945 us, hash = eec98a96ac6ae7ed
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000223,time:0,execs:0,orig:2002-12-13-MishaTest.txt'...
    len = 86, map size = 47433, exec speed = 1945776 us, hash = 09bd284b1737ceb6
Results of dry-run 0[*] Attempting dry run with 'id:000224,time:0,execs:0,orig:20020103-1.txt'...
    len = 48, map size = 37885, exec speed = 341615 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000225,time:0,execs:0,orig:20020107-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000225,time:0,execs:0,orig:20020107-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000226,time:0,execs:0,orig:20020127-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1271056 us, hash = cfd9831f04a49a57
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000227,time:0,execs:0,orig:20020129-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47263, exec speed = 1279727 us, hash = 98b300f8ea9ddb11
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000228,time:0,execs:0,orig:20020213-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000228,time:0,execs:0,orig:20020213-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000229,time:0,execs:0,orig:20020215-1.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47273, exec speed = 1462339 us, hash = abb40ca355790d38
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000230,time:0,execs:0,orig:20020219-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000230,time:0,execs:0,orig:20020219-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000231,time:0,execs:0,orig:20020225-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000231,time:0,execs:0,orig:20020225-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000232,time:0,execs:0,orig:20020307-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1479438 us, hash = bd78496ca72f09f9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000233,time:0,execs:0,orig:20020314-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000233,time:0,execs:0,orig:20020314-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000234,time:0,execs:0,orig:20020320-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000234,time:0,execs:0,orig:20020320-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000235,time:0,execs:0,orig:20020328-1.txt'...
    len = 54, map size = 47273, exec speed = 1284748 us, hash = 4d27ab5cb5b87740
Results of dry-run 0[*] Attempting dry run with 'id:000236,time:0,execs:0,orig:20020402-1.txt'...
    len = 48, map size = 37885, exec speed = 281303 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000237,time:0,execs:0,orig:20020402-3.txt'...
    len = 52, map size = 47268, exec speed = 1434476 us, hash = 12883fe2041051d6
Results of dry-run 0[*] Attempting dry run with 'id:000238,time:0,execs:0,orig:20020413-1.txt'...
    len = 54, map size = 47287, exec speed = 2018686 us, hash = 85cd6641693646e7
Results of dry-run 0[*] Attempting dry run with 'id:000239,time:0,execs:0,orig:20020423-1.txt'...
    len = 48, map size = 37885, exec speed = 564818 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000240,time:0,execs:0,orig:20020503-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000240,time:0,execs:0,orig:20020503-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000241,time:0,execs:0,orig:20020506-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000241,time:0,execs:0,orig:20020506-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000242,time:0,execs:0,orig:20020508-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000242,time:0,execs:0,orig:20020508-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000243,time:0,execs:0,orig:20020510-1.txt'...
    len = 48, map size = 37885, exec speed = 513925 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000244,time:0,execs:0,orig:20020611-1.txt'...
    len = 52, map size = 47261, exec speed = 2539943 us, hash = 5a8a96838892a611
Results of dry-run 0[*] Attempting dry run with 'id:000245,time:0,execs:0,orig:20020614-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000245,time:0,execs:0,orig:20020614-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000246,time:0,execs:0,orig:20020619-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000246,time:0,execs:0,orig:20020619-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000247,time:0,execs:0,orig:20020716-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000247,time:0,execs:0,orig:20020716-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000248,time:0,execs:0,orig:20020805-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000248,time:0,execs:0,orig:20020805-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000249,time:0,execs:0,orig:20020810-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47429, exec speed = 2335491 us, hash = 502d34d17555bf61
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000250,time:0,execs:0,orig:20020819-1.txt'...
    len = 52, map size = 47261, exec speed = 1270179 us, hash = 3f54e4786d1d08fc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000251,time:0,execs:0,orig:20020904-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000251,time:0,execs:0,orig:20020904-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000252,time:0,execs:0,orig:20020916-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000252,time:0,execs:0,orig:20020916-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000253,time:0,execs:0,orig:20020920-1.txt'...
    len = 56, map size = 47432, exec speed = 1960529 us, hash = 169e48d68c99a8da
Results of dry-run 0[*] Attempting dry run with 'id:000254,time:0,execs:0,orig:20021010-1.txt'...
    len = 52, map size = 47265, exec speed = 1269643 us, hash = b82e7fd34ce6b23b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000255,time:0,execs:0,orig:20021010-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000255,time:0,execs:0,orig:20021010-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000256,time:0,execs:0,orig:20021011-1.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47423, exec speed = 1976793 us, hash = ddd31ebda51501bd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000257,time:0,execs:0,orig:20021015-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47265, exec speed = 1475289 us, hash = b82741047c4f8d8e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000258,time:0,execs:0,orig:20021024-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1816161 us, hash = 732fb1d74ab9d34b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000259,time:0,execs:0,orig:20021118-1.txt'...
    len = 45, map size = 37885, exec speed = 485000 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000260,time:0,execs:0,orig:20021118-2.txt'...
    len = 48, map size = 37885, exec speed = 279824 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000261,time:0,execs:0,orig:20021119-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000261,time:0,execs:0,orig:20021119-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000262,time:0,execs:0,orig:20021127-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000262,time:0,execs:0,orig:20021127-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000263,time:0,execs:0,orig:20021204-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000263,time:0,execs:0,orig:20021204-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000264,time:0,execs:0,orig:20021219-1.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47259, exec speed = 1259924 us, hash = 8407feda5305edba
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000265,time:0,execs:0,orig:2003-05-02-DependentPHI.txt'...
    len = 65, map size = 47444, exec speed = 1995202 us, hash = 3e0a8438bb759470
Results of dry-run 0[*] Attempting dry run with 'id:000266,time:0,execs:0,orig:2003-05-12-MinIntProblem.txt'...
    len = 66, map size = 47261, exec speed = 1276011 us, hash = 29633f05398b3cef
Results of dry-run 0[*] Attempting dry run with 'id:000267,time:0,execs:0,orig:2003-05-14-initialize-string.txt'...
[!] WARNING: instability detected during calibration
    len = 80, map size = 47417, exec speed = 1937425 us, hash = 6377c680b70665e1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000268,time:0,execs:0,orig:2003-05-21-BitfieldHandling.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47480, exec speed = 2108509 us, hash = df78abd67963b7ce
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000269,time:0,execs:0,orig:2003-05-21-UnionBitfields.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47498, exec speed = 1944822 us, hash = c083b8ac4f6910ce
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000270,time:0,execs:0,orig:2003-05-21-UnionTest.txt'...
    len = 68, map size = 47460, exec speed = 1964625 us, hash = 8f7ba48a590641c3
Results of dry-run 0[*] Attempting dry run with 'id:000271,time:0,execs:0,orig:2003-05-22-LocalTypeTest.txt'...
    len = 66, map size = 47443, exec speed = 1942291 us, hash = 43994316899916c1
Results of dry-run 0[*] Attempting dry run with 'id:000272,time:0,execs:0,orig:2003-05-31-LongShifts.txt'...
[!] WARNING: instability detected during calibration
    len = 63, map size = 47433, exec speed = 2262472 us, hash = 362f9bb00b0012c1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000273,time:0,execs:0,orig:2003-07-08-BitOpsTest.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47443, exec speed = 1963552 us, hash = c55d9cdf3a3ce14e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000274,time:0,execs:0,orig:2003-07-09-SignedArgs.txt'...
    len = 65, map size = 47473, exec speed = 2052116 us, hash = 43992ccee5d3e7d1
Results of dry-run 0[*] Attempting dry run with 'id:000275,time:0,execs:0,orig:2003-07-10-SignConversions.txt'...
    len = 90, map size = 47461, exec speed = 2029025 us, hash = 146d025cfe905df3
Results of dry-run 0[*] Attempting dry run with 'id:000276,time:0,execs:0,orig:2003-08-05-CastFPToUint.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47432, exec speed = 2017148 us, hash = 38fc03aa1b396e9c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000277,time:0,execs:0,orig:2003-08-20-FoldBug.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000277,time:0,execs:0,orig:2003-08-20-FoldBug.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000278,time:0,execs:0,orig:2003-09-18-BitFieldTest.txt'...
[!] WARNING: instability detected during calibration
    len = 65, map size = 47439, exec speed = 2035879 us, hash = 7cf5ff8a30578ac5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000279,time:0,execs:0,orig:2003-10-12-GlobalVarInitializers.txt'...
[!] WARNING: instability detected during calibration
    len = 76, map size = 47711, exec speed = 2144138 us, hash = da5b1adc31e1061c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000280,time:0,execs:0,orig:2003-10-29-ScalarReplBug.txt'...
    len = 66, map size = 47437, exec speed = 1943968 us, hash = 64bab698e8894bea
Results of dry-run 0[*] Attempting dry run with 'id:000281,time:0,execs:0,orig:20030105-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000281,time:0,execs:0,orig:20030105-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000282,time:0,execs:0,orig:20030117-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000282,time:0,execs:0,orig:20030117-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000283,time:0,execs:0,orig:20030120-2.txt'...
    len = 54, map size = 47432, exec speed = 1947797 us, hash = 6ef8134bedf9eda0
Results of dry-run 0[*] Attempting dry run with 'id:000284,time:0,execs:0,orig:20030128-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000284,time:0,execs:0,orig:20030128-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000285,time:0,execs:0,orig:20030209-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000285,time:0,execs:0,orig:20030209-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000286,time:0,execs:0,orig:20030218-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47262, exec speed = 1286189 us, hash = 9afa59f85cf9b676
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000287,time:0,execs:0,orig:20030221-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000287,time:0,execs:0,orig:20030221-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000288,time:0,execs:0,orig:20030222-1.txt'...
    len = 52, map size = 47262, exec speed = 1281774 us, hash = 643cb480e96469a8
Results of dry-run 0[*] Attempting dry run with 'id:000289,time:0,execs:0,orig:20030224-2.txt'...
    len = 52, map size = 47267, exec speed = 1279602 us, hash = 0cc13cd9da2e5a1a
Results of dry-run 0[*] Attempting dry run with 'id:000290,time:0,execs:0,orig:20030307-1.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47261, exec speed = 1280113 us, hash = 9c18ac71b7ce144d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000291,time:0,execs:0,orig:20030401-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1263621 us, hash = a1fe6fc22c7c56c6
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000292,time:0,execs:0,orig:20030403-1.txt'...
    len = 52, map size = 47265, exec speed = 1274983 us, hash = ce4a75f21ca3c7f4
Results of dry-run 0[*] Attempting dry run with 'id:000293,time:0,execs:0,orig:20030404-1.txt'...
    len = 52, map size = 47260, exec speed = 1267892 us, hash = 377a577d71553656
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000294,time:0,execs:0,orig:20030501-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000294,time:0,execs:0,orig:20030501-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000295,time:0,execs:0,orig:20030613-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47273, exec speed = 1274130 us, hash = 25e939fd32b5b962
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000296,time:0,execs:0,orig:20030626-1.txt'...
[!] WARNING: instability detected during calibration
    len = 74, map size = 47421, exec speed = 2121027 us, hash = cafe7c0c8e03b93d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000297,time:0,execs:0,orig:20030626-2.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47285, exec speed = 1271400 us, hash = 48ef597b06fa10ff
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000298,time:0,execs:0,orig:20030717-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47279, exec speed = 1374707 us, hash = 260d51909a3fac86
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000299,time:0,execs:0,orig:20030821-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000299,time:0,execs:0,orig:20030821-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000300,time:0,execs:0,orig:20030828-2.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47263, exec speed = 1279901 us, hash = d33ffaaaf156550d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000301,time:0,execs:0,orig:20030903-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47265, exec speed = 1272610 us, hash = 4ecd39f530275dd7
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000302,time:0,execs:0,orig:20030909-1.txt'...
    len = 54, map size = 47274, exec speed = 1284602 us, hash = 50ede3f0e04bb55d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000303,time:0,execs:0,orig:20030913-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1272008 us, hash = 93eb6207ad2cd367
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000304,time:0,execs:0,orig:20030914-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000304,time:0,execs:0,orig:20030914-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000305,time:0,execs:0,orig:20030914-2.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1457911 us, hash = 453d10243bc60ae7
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000306,time:0,execs:0,orig:20030916-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47260, exec speed = 1270222 us, hash = 26c75acbc93215f0
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000307,time:0,execs:0,orig:20030920-1.txt'...
    len = 64, map size = 47423, exec speed = 2295230 us, hash = dd0b6c9dfb0629df
Results of dry-run 0[*] Attempting dry run with 'id:000308,time:0,execs:0,orig:20031003-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47298, exec speed = 1663559 us, hash = 216eb5329ce31712
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000309,time:0,execs:0,orig:20031011-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000309,time:0,execs:0,orig:20031011-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000310,time:0,execs:0,orig:20031012-1.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47429, exec speed = 2369869 us, hash = 32846d0b174795db
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000311,time:0,execs:0,orig:20031204-1.txt'...
    len = 64, map size = 47427, exec speed = 1966033 us, hash = 4bf40ee5526377d4
Results of dry-run 0[*] Attempting dry run with 'id:000312,time:0,execs:0,orig:20031211-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000312,time:0,execs:0,orig:20031211-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000313,time:0,execs:0,orig:20031211-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000313,time:0,execs:0,orig:20031211-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000314,time:0,execs:0,orig:20031214-1.txt'...
    len = 52, map size = 47261, exec speed = 1269252 us, hash = 099f25b263bc45fa
Results of dry-run 0[*] Attempting dry run with 'id:000315,time:0,execs:0,orig:20031216-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000315,time:0,execs:0,orig:20031216-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000316,time:0,execs:0,orig:2004-02-02-NegativeZero.txt'...
[!] WARNING: instability detected during calibration
    len = 67, map size = 47542, exec speed = 2061367 us, hash = 50de67b371dd28c3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000317,time:0,execs:0,orig:2004-02-03-AggregateCopy.txt'...
    len = 66, map size = 47439, exec speed = 1957117 us, hash = 9160e5e7be63f149
Results of dry-run 0[*] Attempting dry run with 'id:000318,time:0,execs:0,orig:2004-03-15-IndirectGoto.txt'...
[!] WARNING: instability detected during calibration
    len = 65, map size = 47418, exec speed = 2062800 us, hash = 142e5a988dfff5c0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000319,time:0,execs:0,orig:2004-08-12-InlinerAndAllocas.txt'...
[!] WARNING: instability detected during calibration
    len = 70, map size = 47455, exec speed = 2033288 us, hash = 6266bd1cf2d9d553
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000320,time:0,execs:0,orig:2004-11-28-GlobalBoolLayout.txt'...
    len = 69, map size = 47446, exec speed = 1969093 us, hash = 190c53073440dcf9
Results of dry-run 0[*] Attempting dry run with 'id:000321,time:0,execs:0,orig:20040223-1.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47435, exec speed = 2368896 us, hash = 89f06130da0417a0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000322,time:0,execs:0,orig:20040302-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000322,time:0,execs:0,orig:20040302-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000323,time:0,execs:0,orig:20040311-1.txt'...
    len = 48, map size = 37885, exec speed = 279218 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000324,time:0,execs:0,orig:20040313-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000324,time:0,execs:0,orig:20040313-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000325,time:0,execs:0,orig:20040409-1w.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000325,time:0,execs:0,orig:20040409-1w.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000326,time:0,execs:0,orig:20040409-2w.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000326,time:0,execs:0,orig:20040409-2w.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000327,time:0,execs:0,orig:20040409-3.txt'...
    len = 48, map size = 37885, exec speed = 279841 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000328,time:0,execs:0,orig:20040411-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000328,time:0,execs:0,orig:20040411-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000329,time:0,execs:0,orig:20040423-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000329,time:0,execs:0,orig:20040423-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000330,time:0,execs:0,orig:20040520-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47260, exec speed = 1441795 us, hash = 948911c01d2efa9c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000331,time:0,execs:0,orig:20040625-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000331,time:0,execs:0,orig:20040625-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000332,time:0,execs:0,orig:20040805-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000332,time:0,execs:0,orig:20040805-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000333,time:0,execs:0,orig:20041019-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000333,time:0,execs:0,orig:20041019-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000334,time:0,execs:0,orig:20041113-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000334,time:0,execs:0,orig:20041113-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000335,time:0,execs:0,orig:20041114-1.txt'...
    len = 52, map size = 47261, exec speed = 1302085 us, hash = 40bc4b9d0ea8835c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000336,time:0,execs:0,orig:20041124-1.txt'...
    len = 33, map size = 37885, exec speed = 280335 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000337,time:0,execs:0,orig:20041126-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47259, exec speed = 1285467 us, hash = 4f8971e863836b74
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000338,time:0,execs:0,orig:20041213-2.txt'...
[!] WARNING: instability detected during calibration
    len = 58, map size = 47420, exec speed = 1966696 us, hash = aac99e24e377da7f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000339,time:0,execs:0,orig:20041218-2.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47426, exec speed = 2421841 us, hash = 82b5f81ec08b0d32
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000340,time:0,execs:0,orig:2005-05-06-LongLongSignedShift.txt'...
[!] WARNING: instability detected during calibration
    len = 72, map size = 47447, exec speed = 2143120 us, hash = e2b59c8d88216cdb
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000341,time:0,execs:0,orig:2005-05-11-Popcount-ffs-fls.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47515, exec speed = 3920743 us, hash = d315b5fd84c87d52
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000342,time:0,execs:0,orig:2005-05-12-Int64ToFP.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47750, exec speed = 4823301 us, hash = 4a2f29c8c6f11cae
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000343,time:0,execs:0,orig:2005-05-13-SDivTwo.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47269, exec speed = 1762266 us, hash = 8268f9a921954bd1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000344,time:0,execs:0,orig:2005-07-15-Bitfield-ABI.txt'...
    len = 65, map size = 47442, exec speed = 2143636 us, hash = 30ba58d4e22ea307
Results of dry-run 0[*] Attempting dry run with 'id:000345,time:0,execs:0,orig:2005-07-17-INT-To-FP.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000345,time:0,execs:0,orig:2005-07-17-INT-To-FP.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000346,time:0,execs:0,orig:2005-11-29-LongSwitch.txt'...
    len = 63, map size = 47435, exec speed = 1940490 us, hash = aad4a9f6e233eea5
Results of dry-run 0[*] Attempting dry run with 'id:000347,time:0,execs:0,orig:20050104-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47271, exec speed = 1363074 us, hash = 177d90d5ba75329f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000348,time:0,execs:0,orig:20050106-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47265, exec speed = 1452274 us, hash = 00c630fe07a679a2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000349,time:0,execs:0,orig:20050107-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000349,time:0,execs:0,orig:20050107-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000350,time:0,execs:0,orig:20050119-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47262, exec speed = 1435225 us, hash = 6f7ef5722c7be9b5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000351,time:0,execs:0,orig:20050119-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000351,time:0,execs:0,orig:20050119-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000352,time:0,execs:0,orig:20050124-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000352,time:0,execs:0,orig:20050124-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000353,time:0,execs:0,orig:20050125-1.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47427, exec speed = 1947966 us, hash = 04bc21d3683d6af3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000354,time:0,execs:0,orig:20050131-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1273941 us, hash = 3f54e4786d1d08fc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000355,time:0,execs:0,orig:20050203-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1291200 us, hash = 1ecada1278310c29
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000356,time:0,execs:0,orig:20050218-1.txt'...
[!] WARNING: instability detected during calibration
    len = 76, map size = 47269, exec speed = 1285765 us, hash = a486cefc612b8086
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000357,time:0,execs:0,orig:20050224-1.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47263, exec speed = 6796179 us, hash = 8a72797e4fec622a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000358,time:0,execs:0,orig:20050410-1.txt'...
    len = 52, map size = 47262, exec speed = 1279831 us, hash = d3b0691511a4da4b
Results of dry-run 0[*] Attempting dry run with 'id:000359,time:0,execs:0,orig:20050502-1.txt'...
[!] WARNING: instability detected during calibration
    len = 74, map size = 47425, exec speed = 1965849 us, hash = d5538d82fea0526f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000360,time:0,execs:0,orig:20050604-1.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47428, exec speed = 2128582 us, hash = 82b358631e060d01
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000361,time:0,execs:0,orig:20050607-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47258, exec speed = 1517776 us, hash = 7b20246bbc3ef451
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000362,time:0,execs:0,orig:20050613-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000362,time:0,execs:0,orig:20050613-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000363,time:0,execs:0,orig:20050713-1.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47431, exec speed = 2296325 us, hash = a38b86113a2d9093
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000364,time:0,execs:0,orig:20050826-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000364,time:0,execs:0,orig:20050826-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000365,time:0,execs:0,orig:20050929-1.txt'...
    len = 48, map size = 37885, exec speed = 279661 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000366,time:0,execs:0,orig:20051012-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47265, exec speed = 1275886 us, hash = 2c5becdc1d695b35
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000367,time:0,execs:0,orig:20051104-1.txt'...
    len = 52, map size = 47261, exec speed = 1263916 us, hash = 0f61c32cfa9ac258
Results of dry-run 0[*] Attempting dry run with 'id:000368,time:0,execs:0,orig:20051215-1.txt'...
    len = 56, map size = 47268, exec speed = 1273323 us, hash = 15fcded7c2f7f9e9
Results of dry-run 0[*] Attempting dry run with 'id:000369,time:0,execs:0,orig:2006-01-23-UnionInit.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47473, exec speed = 2389533 us, hash = 71b99396e35ca24b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000370,time:0,execs:0,orig:2006-01-29-SimpleIndirectCall.txt'...
    len = 71, map size = 47429, exec speed = 1945444 us, hash = ff91f3efb27bfed8
Results of dry-run 0[*] Attempting dry run with 'id:000371,time:0,execs:0,orig:2006-02-04-DivRem.txt'...
    len = 59, map size = 47464, exec speed = 2873932 us, hash = 3889f149f43dee87
Results of dry-run 0[*] Attempting dry run with 'id:000372,time:0,execs:0,orig:2006-12-01-float_varg.txt'...
    len = 81, map size = 47560, exec speed = 2185918 us, hash = 7a7716a8563c67bc
Results of dry-run 0[*] Attempting dry run with 'id:000373,time:0,execs:0,orig:2006-12-07-Compare64BitConstant.txt'...
    len = 73, map size = 47426, exec speed = 1935660 us, hash = 10e147d9273fe184
Results of dry-run 0[*] Attempting dry run with 'id:000374,time:0,execs:0,orig:2006-12-11-LoadConstants.txt'...
[!] WARNING: instability detected during calibration
    len = 66, map size = 47437, exec speed = 3776149 us, hash = e418a4a7088868c1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000375,time:0,execs:0,orig:20060110-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47274, exec speed = 1308650 us, hash = dc250232588e19f0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000376,time:0,execs:0,orig:20060110-2.txt'...
    len = 54, map size = 47267, exec speed = 1267184 us, hash = 8bd26de060c4306d
Results of dry-run 0[*] Attempting dry run with 'id:000377,time:0,execs:0,orig:20060127-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47265, exec speed = 1271190 us, hash = 4ae4cc6f3ff8edad
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000378,time:0,execs:0,orig:20060412-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47266, exec speed = 1281329 us, hash = 277f2afab27d63df
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000379,time:0,execs:0,orig:20060905-1.txt'...
    len = 52, map size = 47413, exec speed = 1961158 us, hash = f379dd2fdcec4d53
Results of dry-run 0[*] Attempting dry run with 'id:000380,time:0,execs:0,orig:20060910-1.txt'...
    len = 62, map size = 47269, exec speed = 1261882 us, hash = ab21d33f08c90b26
Results of dry-run 0[*] Attempting dry run with 'id:000381,time:0,execs:0,orig:20060930-1.txt'...
    len = 54, map size = 47277, exec speed = 1275094 us, hash = 9bfad860284720cb
Results of dry-run 0[*] Attempting dry run with 'id:000382,time:0,execs:0,orig:20061031-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000382,time:0,execs:0,orig:20061031-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000383,time:0,execs:0,orig:20061220-1.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47261, exec speed = 1475620 us, hash = 92cad071c318d288
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000384,time:0,execs:0,orig:2007-01-04-KNR-Args.txt'...
[!] WARNING: instability detected during calibration
    len = 91, map size = 47601, exec speed = 2142504 us, hash = 2c4921db4b325ae3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000385,time:0,execs:0,orig:2007-03-02-VaCopy.txt'...
    len = 69, map size = 47421, exec speed = 2102142 us, hash = ecb423b491fd4b59
Results of dry-run 0[*] Attempting dry run with 'id:000386,time:0,execs:0,orig:2007-04-10-BitfieldTest.txt'...
[!] WARNING: instability detected during calibration
    len = 75, map size = 47443, exec speed = 1940892 us, hash = 586e255249f16015
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000387,time:0,execs:0,orig:2007-04-25-weak.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47265, exec speed = 1263315 us, hash = 07e0f9b13d7a786f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000388,time:0,execs:0,orig:20070212-1.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47260, exec speed = 1444269 us, hash = ec97baee8d9286a3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000389,time:0,execs:0,orig:20070212-3.txt'...
    len = 52, map size = 47260, exec speed = 1285383 us, hash = cda7266e3bc66e6b
Results of dry-run 0[*] Attempting dry run with 'id:000390,time:0,execs:0,orig:20070424-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47280, exec speed = 1605142 us, hash = 5ffb29f225ef461a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000391,time:0,execs:0,orig:20070614-1.txt'...
[!] WARNING: instability detected during calibration
    len = 58, map size = 47422, exec speed = 2094227 us, hash = 4189bc1671869587
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000392,time:0,execs:0,orig:20070623-1.txt'...
    len = 48, map size = 37885, exec speed = 479276 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000393,time:0,execs:0,orig:20070824-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47260, exec speed = 1352981 us, hash = 377a577d71553656
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000394,time:0,execs:0,orig:20070919-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47428, exec speed = 2267720 us, hash = a0ba3f931c6c05e3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000395,time:0,execs:0,orig:20071011-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000395,time:0,execs:0,orig:20071011-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000396,time:0,execs:0,orig:20071018-1.txt'...
    len = 52, map size = 47391, exec speed = 1946958 us, hash = 61b5dcfd9da1978a
Results of dry-run 0[*] Attempting dry run with 'id:000397,time:0,execs:0,orig:20071030-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000397,time:0,execs:0,orig:20071030-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000398,time:0,execs:0,orig:20071108-1.txt'...
    len = 56, map size = 47425, exec speed = 1972464 us, hash = 844f4be9cc5d8ca7
Results of dry-run 0[*] Attempting dry run with 'id:000399,time:0,execs:0,orig:20071120-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47392, exec speed = 2031962 us, hash = 2fee28e5ac4187b8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000400,time:0,execs:0,orig:20071202-1.txt'...
    len = 54, map size = 47283, exec speed = 1284313 us, hash = 7bb210bf0d1c5fc1
Results of dry-run 0[*] Attempting dry run with 'id:000401,time:0,execs:0,orig:20071205-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000401,time:0,execs:0,orig:20071205-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000402,time:0,execs:0,orig:20071211-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000402,time:0,execs:0,orig:20071211-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000403,time:0,execs:0,orig:20071216-1.txt'...
    len = 52, map size = 47265, exec speed = 1379218 us, hash = be8062c315bd2354
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000404,time:0,execs:0,orig:20071220-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000404,time:0,execs:0,orig:20071220-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000405,time:0,execs:0,orig:2008-01-07-LongDouble.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47602, exec speed = 1985454 us, hash = ed47812ffddd6878
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000406,time:0,execs:0,orig:2008-04-18-LoopBug.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47452, exec speed = 2113561 us, hash = c7706120a2d232a8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000407,time:0,execs:0,orig:2008-04-20-LoopBug2.txt'...
[!] WARNING: instability detected during calibration
    len = 61, map size = 47452, exec speed = 2387712 us, hash = e5a06eecb8d0d09a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000408,time:0,execs:0,orig:20080117-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000408,time:0,execs:0,orig:20080117-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000409,time:0,execs:0,orig:20080122-1.txt'...
    len = 52, map size = 47260, exec speed = 1267713 us, hash = 25e407ec6ab7c729
Results of dry-run 0[*] Attempting dry run with 'id:000410,time:0,execs:0,orig:20080222-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47433, exec speed = 2112634 us, hash = c68575c369c16683
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000411,time:0,execs:0,orig:20080408-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000411,time:0,execs:0,orig:20080408-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000412,time:0,execs:0,orig:20080506-1.txt'...
    len = 48, map size = 37885, exec speed = 279871 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000413,time:0,execs:0,orig:20080506-2.txt'...
    len = 52, map size = 47259, exec speed = 1283350 us, hash = 9687aa69b7038545
Results of dry-run 0[*] Attempting dry run with 'id:000414,time:0,execs:0,orig:20080522-1.txt'...
    len = 52, map size = 47259, exec speed = 1443263 us, hash = a0a4e09052c33515
Results of dry-run 0[*] Attempting dry run with 'id:000415,time:0,execs:0,orig:20080529-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000415,time:0,execs:0,orig:20080529-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000416,time:0,execs:0,orig:20080813-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47265, exec speed = 1459641 us, hash = 078400d674344b75
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000417,time:0,execs:0,orig:20081103-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47268, exec speed = 1372842 us, hash = 719d2db7a5f70b08
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000418,time:0,execs:0,orig:20081112-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000418,time:0,execs:0,orig:20081112-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000419,time:0,execs:0,orig:20081117-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000419,time:0,execs:0,orig:20081117-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000420,time:0,execs:0,orig:2009-04-16-BitfieldInitialization.txt'...
    len = 89, map size = 47441, exec speed = 2107049 us, hash = 1c9cf84d6b9bbaa6
Results of dry-run 0[*] Attempting dry run with 'id:000421,time:0,execs:0,orig:2009-12-07-StructReturn.txt'...
[!] WARNING: instability detected during calibration
    len = 65, map size = 47309, exec speed = 1372057 us, hash = 8aab4c096c0d772a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000422,time:0,execs:0,orig:20090113-2.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47288, exec speed = 1376342 us, hash = d7a5ed3ff0426402
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000423,time:0,execs:0,orig:20090207-1.txt'...
    len = 52, map size = 47265, exec speed = 1283839 us, hash = a0918630c178d0d7
Results of dry-run 0[*] Attempting dry run with 'id:000424,time:0,execs:0,orig:20090527-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47272, exec speed = 1384946 us, hash = 731940e2bc1a21c4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000425,time:0,execs:0,orig:20090623-1.txt'...
    len = 52, map size = 47265, exec speed = 1278627 us, hash = fdd06793799c06c9
Results of dry-run 0[*] Attempting dry run with 'id:000426,time:0,execs:0,orig:20090814-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000426,time:0,execs:0,orig:20090814-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000427,time:0,execs:0,orig:20091229-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000427,time:0,execs:0,orig:20091229-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000428,time:0,execs:0,orig:2010-05-24-BitfieldTest.txt'...
[!] WARNING: instability detected during calibration
    len = 65, map size = 47262, exec speed = 1276526 us, hash = 629223ff817a36f6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000429,time:0,execs:0,orig:20100209-1.txt'...
    len = 52, map size = 47265, exec speed = 1277770 us, hash = 593a7d5b3aeead5c
Results of dry-run 0[*] Attempting dry run with 'id:000430,time:0,execs:0,orig:20100316-1.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47265, exec speed = 1368055 us, hash = be09cee467a10b04
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000431,time:0,execs:0,orig:20100430-1.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47422, exec speed = 1947792 us, hash = dd2dca10482dfd2e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000432,time:0,execs:0,orig:20100708-1.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47429, exec speed = 1963317 us, hash = 8ad0689e3b51a5c6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000433,time:0,execs:0,orig:20100805-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000433,time:0,execs:0,orig:20100805-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000434,time:0,execs:0,orig:20100827-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000434,time:0,execs:0,orig:20100827-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000435,time:0,execs:0,orig:20101011-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000435,time:0,execs:0,orig:20101011-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000436,time:0,execs:0,orig:20101013-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000436,time:0,execs:0,orig:20101013-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000437,time:0,execs:0,orig:20101025-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47263, exec speed = 1280708 us, hash = 90a45b55190163dc
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000438,time:0,execs:0,orig:20111212-1.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47422, exec speed = 2403673 us, hash = 296efe0b54792bad
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000439,time:0,execs:0,orig:20111227-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000439,time:0,execs:0,orig:20111227-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000440,time:0,execs:0,orig:20120105-1.txt'...
    len = 52, map size = 47260, exec speed = 1262310 us, hash = 97528899e9c4a598
Results of dry-run 0[*] Attempting dry run with 'id:000441,time:0,execs:0,orig:20120111-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47271, exec speed = 1271033 us, hash = c0f45e6d797c3a72
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000442,time:0,execs:0,orig:20120207-1.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47423, exec speed = 1969180 us, hash = 4bc7fa8ce8589fd1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000443,time:0,execs:0,orig:20120808-1.txt'...
    len = 52, map size = 47286, exec speed = 1629714 us, hash = 293653255f0d46a0
Results of dry-run 0[*] Attempting dry run with 'id:000444,time:0,execs:0,orig:20120817-1.txt'...
    len = 52, map size = 47269, exec speed = 2504508 us, hash = abc928fdb5b04adc
Results of dry-run 0[*] Attempting dry run with 'id:000445,time:0,execs:0,orig:20120919-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000445,time:0,execs:0,orig:20120919-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000446,time:0,execs:0,orig:20140212-1.txt'...
    len = 52, map size = 47258, exec speed = 1585110 us, hash = b0c12cae037ea6f3
Results of dry-run 0[*] Attempting dry run with 'id:000447,time:0,execs:0,orig:20140212-2.txt'...
    len = 52, map size = 47265, exec speed = 1275935 us, hash = ca01c1d8f6a5a6ab
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000448,time:0,execs:0,orig:20140326-1.txt'...
    len = 52, map size = 47260, exec speed = 1271406 us, hash = b68f4f45f7533c95
Results of dry-run 0[*] Attempting dry run with 'id:000449,time:0,execs:0,orig:20140622-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000449,time:0,execs:0,orig:20140622-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000450,time:0,execs:0,orig:20141107-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47279, exec speed = 1585258 us, hash = 2311677bc252b9d8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000451,time:0,execs:0,orig:20141125-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000451,time:0,execs:0,orig:20141125-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000452,time:0,execs:0,orig:20150611-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1670725 us, hash = 455869f5fbad9478
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000453,time:0,execs:0,orig:20170111-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47259, exec speed = 1620600 us, hash = da08bf1595b7ab12
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000454,time:0,execs:0,orig:20170401-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000454,time:0,execs:0,orig:20170401-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000455,time:0,execs:0,orig:20170419-1.txt'...
    len = 52, map size = 47265, exec speed = 1280223 us, hash = 1cc6b1d6dc3d13de
Results of dry-run 0[*] Attempting dry run with 'id:000456,time:0,execs:0,orig:20180112-1.txt'...
    len = 58, map size = 47268, exec speed = 1281711 us, hash = d2bfaadf7709ff7e
Results of dry-run 0[*] Attempting dry run with 'id:000457,time:0,execs:0,orig:20180131-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000457,time:0,execs:0,orig:20180131-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000458,time:0,execs:0,orig:20180226-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47432, exec speed = 1965218 us, hash = bc95326a3d4520a8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000459,time:0,execs:0,orig:20181120-1.txt'...
    len = 52, map size = 47260, exec speed = 1270298 us, hash = ea72cbd235e1fa02
Results of dry-run 0[*] Attempting dry run with 'id:000460,time:0,execs:0,orig:2020-01-06-coverage-001.txt'...
[!] WARNING: instability detected during calibration
    len = 65, map size = 47443, exec speed = 1954444 us, hash = 495aa735b7035c23
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000461,time:0,execs:0,orig:2020-01-06-coverage-002.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000462,time:0,execs:0,orig:2020-01-06-coverage-003.txt'...
[!] WARNING: instability detected during calibration
    len = 67, map size = 47450, exec speed = 2149471 us, hash = 892f556f39366a61
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000463,time:0,execs:0,orig:2020-01-06-coverage-004.txt'...
    len = 77, map size = 47442, exec speed = 2022644 us, hash = c16d7be99cce2357
Results of dry-run 0[*] Attempting dry run with 'id:000464,time:0,execs:0,orig:2020-01-06-coverage-005.txt'...
    len = 64, map size = 37885, exec speed = 458694 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000465,time:0,execs:0,orig:2020-01-06-coverage-006.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47454, exec speed = 2102155 us, hash = 38d203a118f4f016
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000466,time:0,execs:0,orig:2020-01-06-coverage-007.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47457, exec speed = 2155713 us, hash = 1a9d26e056475525
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000467,time:0,execs:0,orig:2020-01-06-coverage-008.txt'...
    len = 73, map size = 47452, exec speed = 1984311 us, hash = 18604d9a05c27091
Results of dry-run 0[*] Attempting dry run with 'id:000468,time:0,execs:0,orig:2020-01-06-coverage-009.txt'...
    len = 77, map size = 47449, exec speed = 1999390 us, hash = 85decfcbdd78dda3
Results of dry-run 0[*] Attempting dry run with 'id:000469,time:0,execs:0,orig:2020-01-06-coverage-010.txt'...
[!] WARNING: instability detected during calibration
    len = 89, map size = 47449, exec speed = 2043754 us, hash = bf5f73ced0e09f80
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000470,time:0,execs:0,orig:900409-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000470,time:0,execs:0,orig:900409-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000471,time:0,execs:0,orig:920202-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1274574 us, hash = 820277a7d9ad054b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000472,time:0,execs:0,orig:920428-1.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47424, exec speed = 1951146 us, hash = 137ee3c54bc2ed49
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000473,time:0,execs:0,orig:920429-1.txt'...
    len = 72, map size = 47421, exec speed = 2115556 us, hash = 0d066f6552a89ae9
Results of dry-run 0[*] Attempting dry run with 'id:000474,time:0,execs:0,orig:920501-6.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47423, exec speed = 1970153 us, hash = 32e8531f11c94056
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000475,time:0,execs:0,orig:920501-7.txt'...
    len = 50, map size = 47261, exec speed = 1277191 us, hash = cff2aacb1af5d1c8
Results of dry-run 0[*] Attempting dry run with 'id:000476,time:0,execs:0,orig:920604-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47273, exec speed = 1279819 us, hash = 6ecbd7d0d5b065cd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000477,time:0,execs:0,orig:920612-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000477,time:0,execs:0,orig:920612-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000478,time:0,execs:0,orig:920625-1.txt'...
    len = 50, map size = 47344, exec speed = 1287171 us, hash = 9f5201925a8090f2
Results of dry-run 0[*] Attempting dry run with 'id:000479,time:0,execs:0,orig:920711-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000479,time:0,execs:0,orig:920711-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000480,time:0,execs:0,orig:920721-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000480,time:0,execs:0,orig:920721-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000481,time:0,execs:0,orig:920721-4.txt'...
    len = 50, map size = 47262, exec speed = 1281482 us, hash = 1cc328e85dd1ae4d
Results of dry-run 0[*] Attempting dry run with 'id:000482,time:0,execs:0,orig:920728-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000482,time:0,execs:0,orig:920728-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000483,time:0,execs:0,orig:920730-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000483,time:0,execs:0,orig:920730-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000484,time:0,execs:0,orig:920810-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47407, exec speed = 1965975 us, hash = c36ba4c72643eab0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000485,time:0,execs:0,orig:920829-1.txt'...
    len = 50, map size = 47262, exec speed = 1285875 us, hash = 429a4193056e8b8d
Results of dry-run 0[*] Attempting dry run with 'id:000486,time:0,execs:0,orig:920908-2.txt'...
    len = 50, map size = 47263, exec speed = 1284974 us, hash = 5fba001000aaa988
Results of dry-run 0[*] Attempting dry run with 'id:000487,time:0,execs:0,orig:920929-1.txt'...
    len = 50, map size = 47260, exec speed = 1271508 us, hash = 3d84fe5a4042d2eb
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000488,time:0,execs:0,orig:921013-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1291216 us, hash = 2b6e79df12ae0d20
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000489,time:0,execs:0,orig:921029-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000489,time:0,execs:0,orig:921029-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000490,time:0,execs:0,orig:921113-1.txt'...
    len = 52, map size = 47334, exec speed = 1291402 us, hash = a7db5f1b6800006e
Results of dry-run 0[*] Attempting dry run with 'id:000491,time:0,execs:0,orig:921117-1.txt'...
    len = 52, map size = 47270, exec speed = 1292743 us, hash = 9c42a45df51bbe64
Results of dry-run 0[*] Attempting dry run with 'id:000492,time:0,execs:0,orig:921123-1.txt'...
    len = 50, map size = 47264, exec speed = 1280340 us, hash = 8a5b053c1fa09371
Results of dry-run 0[*] Attempting dry run with 'id:000493,time:0,execs:0,orig:921123-2.txt'...
    len = 50, map size = 47261, exec speed = 1283471 us, hash = 56b62648653523f2
Results of dry-run 0[*] Attempting dry run with 'id:000494,time:0,execs:0,orig:921124-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1270233 us, hash = 09b99a702527ebdb
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000495,time:0,execs:0,orig:921204-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47262, exec speed = 1284602 us, hash = 6fedba652717d856
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000496,time:0,execs:0,orig:921208-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47300, exec speed = 1286950 us, hash = b4f1d542cffb6c9f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000497,time:0,execs:0,orig:921218-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000497,time:0,execs:0,orig:921218-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000498,time:0,execs:0,orig:930126-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000498,time:0,execs:0,orig:930126-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000499,time:0,execs:0,orig:930406-1.txt'...
    len = 62, map size = 47422, exec speed = 1953339 us, hash = 8bb9b95ef8219802
Results of dry-run 0[*] Attempting dry run with 'id:000500,time:0,execs:0,orig:930429-1.txt'...
[!] WARNING: instability detected during calibration
    len = 72, map size = 47420, exec speed = 1954993 us, hash = f89aeedecef8e5be
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000501,time:0,execs:0,orig:930513-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47435, exec speed = 1302647 us, hash = c28786d799bdfba1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000502,time:0,execs:0,orig:930526-1.txt'...
    len = 50, map size = 47264, exec speed = 1274881 us, hash = 6eeb20324687961c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000503,time:0,execs:0,orig:930527-1.txt'...
    len = 46, map size = 37885, exec speed = 283737 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000504,time:0,execs:0,orig:930529-1.txt'...
    len = 46, map size = 37885, exec speed = 284078 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000505,time:0,execs:0,orig:930603-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000505,time:0,execs:0,orig:930603-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000506,time:0,execs:0,orig:930603-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000506,time:0,execs:0,orig:930603-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000507,time:0,execs:0,orig:930603-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000507,time:0,execs:0,orig:930603-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000508,time:0,execs:0,orig:930614-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47281, exec speed = 1292107 us, hash = 6cd3f7a0a62b57c0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000509,time:0,execs:0,orig:930614-2.txt'...
    len = 46, map size = 37885, exec speed = 286527 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000510,time:0,execs:0,orig:930622-1.txt'...
    len = 46, map size = 37885, exec speed = 284941 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000511,time:0,execs:0,orig:930622-2.txt'...
    len = 46, map size = 37885, exec speed = 285373 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000512,time:0,execs:0,orig:930628-1.txt'...
    len = 46, map size = 37885, exec speed = 286661 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000513,time:0,execs:0,orig:930630-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000513,time:0,execs:0,orig:930630-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000514,time:0,execs:0,orig:930718-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000514,time:0,execs:0,orig:930718-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000515,time:0,execs:0,orig:930719-1.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000516,time:0,execs:0,orig:930725-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000516,time:0,execs:0,orig:930725-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000517,time:0,execs:0,orig:930921-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47262, exec speed = 1281360 us, hash = 46cd395fa869a247
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000518,time:0,execs:0,orig:930929-1.txt'...
    len = 46, map size = 37885, exec speed = 281825 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000519,time:0,execs:0,orig:930930-1.txt'...
    len = 50, map size = 47262, exec speed = 1285257 us, hash = 6f608a0519ecd9f7
Results of dry-run 0[*] Attempting dry run with 'id:000520,time:0,execs:0,orig:931004-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000520,time:0,execs:0,orig:931004-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000521,time:0,execs:0,orig:931004-11.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000521,time:0,execs:0,orig:931004-11.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000522,time:0,execs:0,orig:931004-3.txt'...
    len = 58, map size = 47429, exec speed = 1973082 us, hash = 6120a46de269b3ec
Results of dry-run 0[*] Attempting dry run with 'id:000523,time:0,execs:0,orig:931004-5.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000523,time:0,execs:0,orig:931004-5.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000524,time:0,execs:0,orig:931004-7.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000524,time:0,execs:0,orig:931004-7.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000525,time:0,execs:0,orig:931004-9.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000525,time:0,execs:0,orig:931004-9.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000526,time:0,execs:0,orig:931005-1.txt'...
    len = 50, map size = 47262, exec speed = 1286356 us, hash = 4def0fdd883c2b4f
Results of dry-run 0[*] Attempting dry run with 'id:000527,time:0,execs:0,orig:931031-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1275654 us, hash = 29345021271898ad
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000528,time:0,execs:0,orig:931102-1.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000529,time:0,execs:0,orig:931102-2.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000530,time:0,execs:0,orig:931110-1.txt'...
    len = 68, map size = 47432, exec speed = 1955973 us, hash = e3f6e9609f7747f0
Results of dry-run 0[*] Attempting dry run with 'id:000531,time:0,execs:0,orig:931110-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000531,time:0,execs:0,orig:931110-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000532,time:0,execs:0,orig:940122-1.txt'...
    len = 50, map size = 47262, exec speed = 1284827 us, hash = 60cb3fd607966824
Results of dry-run 0[*] Attempting dry run with 'id:000533,time:0,execs:0,orig:941014-2.txt'...
    len = 52, map size = 47434, exec speed = 1970309 us, hash = 5326cc49bd1c88ea
Results of dry-run 0[*] Attempting dry run with 'id:000534,time:0,execs:0,orig:941015-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000534,time:0,execs:0,orig:941015-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000535,time:0,execs:0,orig:941021-1.txt'...
    len = 52, map size = 47298, exec speed = 1289582 us, hash = 72c4aab08b538c4b
Results of dry-run 0[*] Attempting dry run with 'id:000536,time:0,execs:0,orig:941031-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000536,time:0,execs:0,orig:941031-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000537,time:0,execs:0,orig:950221-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47422, exec speed = 1974887 us, hash = 5df47f7cedf22699
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000538,time:0,execs:0,orig:950426-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000538,time:0,execs:0,orig:950426-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000539,time:0,execs:0,orig:950503-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000539,time:0,execs:0,orig:950503-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000540,time:0,execs:0,orig:950511-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000540,time:0,execs:0,orig:950511-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000541,time:0,execs:0,orig:950605-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000541,time:0,execs:0,orig:950605-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000542,time:0,execs:0,orig:950607-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000542,time:0,execs:0,orig:950607-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000543,time:0,execs:0,orig:950612-1.txt'...
    len = 46, map size = 37885, exec speed = 284552 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000544,time:0,execs:0,orig:950621-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000544,time:0,execs:0,orig:950621-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000545,time:0,execs:0,orig:950704-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1337024 us, hash = 92fd0766e34f2ecb
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000546,time:0,execs:0,orig:950706-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1530020 us, hash = 29345021271898ad
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000547,time:0,execs:0,orig:950710-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1283565 us, hash = ccac7461e32fcc4e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000548,time:0,execs:0,orig:950714-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000548,time:0,execs:0,orig:950714-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000549,time:0,execs:0,orig:950906-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1276701 us, hash = 67f1e74cd3782f20
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000550,time:0,execs:0,orig:951003-1.txt'...
    len = 50, map size = 47261, exec speed = 1276276 us, hash = ccda9b2d4abfbf3f
Results of dry-run 0[*] Attempting dry run with 'id:000551,time:0,execs:0,orig:951115-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000551,time:0,execs:0,orig:951115-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000552,time:0,execs:0,orig:960117-1.txt'...
    len = 54, map size = 47426, exec speed = 1946081 us, hash = da54a72c432894df
Results of dry-run 0[*] Attempting dry run with 'id:000553,time:0,execs:0,orig:960209-1.txt'...
    len = 52, map size = 47432, exec speed = 1967704 us, hash = 124829a9d80000b4
Results of dry-run 0[*] Attempting dry run with 'id:000554,time:0,execs:0,orig:960215-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000554,time:0,execs:0,orig:960215-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000555,time:0,execs:0,orig:960218-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000555,time:0,execs:0,orig:960218-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000556,time:0,execs:0,orig:960219-1.txt'...
    len = 50, map size = 47262, exec speed = 1278724 us, hash = 365fb9c2bf40d1a7
Results of dry-run 0[*] Attempting dry run with 'id:000557,time:0,execs:0,orig:960311-1.txt'...
    len = 50, map size = 47265, exec speed = 1275711 us, hash = e1725bf9ee1dd59d
Results of dry-run 0[*] Attempting dry run with 'id:000558,time:0,execs:0,orig:960311-2.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47265, exec speed = 1273060 us, hash = f598ba73a1099afb
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000559,time:0,execs:0,orig:960311-3.txt'...
    len = 62, map size = 47428, exec speed = 1951339 us, hash = 4b3fc2c0c04122e7
Results of dry-run 0[*] Attempting dry run with 'id:000560,time:0,execs:0,orig:960317-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47265, exec speed = 1283366 us, hash = 1320b66143563bb0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000561,time:0,execs:0,orig:960321-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000561,time:0,execs:0,orig:960321-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000562,time:0,execs:0,orig:960327-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47257, exec speed = 1272676 us, hash = 58a438300fdfcc96
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000563,time:0,execs:0,orig:960402-1.txt'...
    len = 50, map size = 47261, exec speed = 1277601 us, hash = 85c96a3578aa02b5
Results of dry-run 0[*] Attempting dry run with 'id:000564,time:0,execs:0,orig:960512-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47426, exec speed = 1947130 us, hash = 75460b6b45e116a9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000565,time:0,execs:0,orig:960513-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000565,time:0,execs:0,orig:960513-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000566,time:0,execs:0,orig:960521-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47406, exec speed = 2127468 us, hash = 940c5be991f079dd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000567,time:0,execs:0,orig:960608-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000567,time:0,execs:0,orig:960608-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000568,time:0,execs:0,orig:960801-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47262, exec speed = 1274871 us, hash = 3ebeb6ef4bf518e6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000569,time:0,execs:0,orig:960909-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000569,time:0,execs:0,orig:960909-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000570,time:0,execs:0,orig:961004-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1389419 us, hash = f5d50051da003296
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000571,time:0,execs:0,orig:961017-1.txt'...
    len = 50, map size = 47259, exec speed = 1259865 us, hash = f906e56f4579db0e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000572,time:0,execs:0,orig:961017-2.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 9801123 us, hash = 1af184a94edeeb10
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000573,time:0,execs:0,orig:961026-1.txt'...
    len = 50, map size = 47262, exec speed = 1279300 us, hash = a4d903bbbc952f81
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000574,time:0,execs:0,orig:961112-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1274164 us, hash = cee36b35c5e720a0
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000575,time:0,execs:0,orig:961122-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000575,time:0,execs:0,orig:961122-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000576,time:0,execs:0,orig:961122-2.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1356053 us, hash = cee36b35c5e720a0
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000577,time:0,execs:0,orig:961213-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000577,time:0,execs:0,orig:961213-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000578,time:0,execs:0,orig:961223-1.txt'...
    len = 52, map size = 47309, exec speed = 1550833 us, hash = 62e58267ca0531d3
Results of dry-run 0[*] Attempting dry run with 'id:000579,time:0,execs:0,orig:970214-2.txt'...
    len = 50, map size = 47260, exec speed = 1273982 us, hash = d5fb07bee4bb5408
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000580,time:0,execs:0,orig:970217-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47262, exec speed = 1270994 us, hash = b9f65951a66821e0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000581,time:0,execs:0,orig:980424-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000581,time:0,execs:0,orig:980424-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000582,time:0,execs:0,orig:980505-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47263, exec speed = 1456433 us, hash = 9117a93369f1eec6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000583,time:0,execs:0,orig:980505-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000583,time:0,execs:0,orig:980505-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000584,time:0,execs:0,orig:980506-1.txt'...
    len = 50, map size = 47259, exec speed = 1261408 us, hash = 6a968fd59fb5f6d1
Results of dry-run 0[*] Attempting dry run with 'id:000585,time:0,execs:0,orig:980506-3.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47424, exec speed = 2319631 us, hash = a25620a41bcff2b4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000586,time:0,execs:0,orig:980526-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000586,time:0,execs:0,orig:980526-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000587,time:0,execs:0,orig:980602-2.txt'...
    len = 50, map size = 47262, exec speed = 1282491 us, hash = 37421dffd653a23a
Results of dry-run 0[*] Attempting dry run with 'id:000588,time:0,execs:0,orig:980604-1.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47310, exec speed = 1466957 us, hash = cfe6a563e4ec1fd4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000589,time:0,execs:0,orig:980612-1.txt'...
[!] WARNING: instability detected during calibration
    len = 74, map size = 47429, exec speed = 2146879 us, hash = 91983765284232fc
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000590,time:0,execs:0,orig:980701-1.txt'...
    len = 50, map size = 47420, exec speed = 1967210 us, hash = f0d313afa8e1e38b
Results of dry-run 0[*] Attempting dry run with 'id:000591,time:0,execs:0,orig:980707-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000591,time:0,execs:0,orig:980707-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000592,time:0,execs:0,orig:980716-1.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47262, exec speed = 1277679 us, hash = 94db458465780cd8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000593,time:0,execs:0,orig:980929-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000593,time:0,execs:0,orig:980929-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000594,time:0,execs:0,orig:981001-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000594,time:0,execs:0,orig:981001-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000595,time:0,execs:0,orig:981130-1.txt'...
    len = 50, map size = 47262, exec speed = 1280531 us, hash = 426796c274de5acc
Results of dry-run 0[*] Attempting dry run with 'id:000596,time:0,execs:0,orig:981206-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47273, exec speed = 1440965 us, hash = 7730597ddc6de0b0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000597,time:0,execs:0,orig:990106-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000597,time:0,execs:0,orig:990106-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000598,time:0,execs:0,orig:990106-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000598,time:0,execs:0,orig:990106-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000599,time:0,execs:0,orig:990127-1.txt'...
    len = 46, map size = 37885, exec speed = 283061 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000600,time:0,execs:0,orig:990128-1.txt'...
[!] WARNING: instability detected during calibration
    len = 74, map size = 47428, exec speed = 2051985 us, hash = 24f865e7a8ed0ee8
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000601,time:0,execs:0,orig:990211-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1274201 us, hash = f02d025bc0d2f48a
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000602,time:0,execs:0,orig:990324-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000602,time:0,execs:0,orig:990324-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000603,time:0,execs:0,orig:990513-1.txt'...
    len = 50, map size = 47260, exec speed = 1287980 us, hash = 00b4c620896adacc
Results of dry-run 0[*] Attempting dry run with 'id:000604,time:0,execs:0,orig:990525-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000604,time:0,execs:0,orig:990525-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000605,time:0,execs:0,orig:990525-2.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47260, exec speed = 1371186 us, hash = d1e9fe178cf4dd31
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000606,time:0,execs:0,orig:990527-1.txt'...
    len = 50, map size = 47262, exec speed = 1278053 us, hash = db7f2d525b423d65
Results of dry-run 0[*] Attempting dry run with 'id:000607,time:0,execs:0,orig:990804-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47262, exec speed = 1280391 us, hash = 60b2113c2d639b64
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000608,time:0,execs:0,orig:990811-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000608,time:0,execs:0,orig:990811-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000609,time:0,execs:0,orig:990827-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000609,time:0,execs:0,orig:990827-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000610,time:0,execs:0,orig:990829-1.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47348, exec speed = 1698326 us, hash = 079e605708b61415
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000611,time:0,execs:0,orig:990923-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000611,time:0,execs:0,orig:990923-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000612,time:0,execs:0,orig:991016-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000612,time:0,execs:0,orig:991016-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000613,time:0,execs:0,orig:991019-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47266, exec speed = 1283681 us, hash = f34eb3c6aaff6a56
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000614,time:0,execs:0,orig:991201-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47430, exec speed = 1972355 us, hash = aa439d6e75314348
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000615,time:0,execs:0,orig:991202-1.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000616,time:0,execs:0,orig:991216-4.txt'...
    len = 52, map size = 47272, exec speed = 1280587 us, hash = fdc5990763f89b57
Results of dry-run 0[*] Attempting dry run with 'id:000617,time:0,execs:0,orig:991227-1.txt'...
    len = 50, map size = 47262, exec speed = 1285336 us, hash = fc50ae76dc4c3673
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000618,time:0,execs:0,orig:991228-1.txt'...
    len = 46, map size = 37885, exec speed = 284969 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000619,time:0,execs:0,orig:AtomicOps.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000619,time:0,execs:0,orig:AtomicOps.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000620,time:0,execs:0,orig:DuffsDevice.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47454, exec speed = 2077971 us, hash = eada410d64cf3e8b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000621,time:0,execs:0,orig:FloatPrecision.txt'...
[!] WARNING: instability detected during calibration
    len = 58, map size = 47623, exec speed = 1963223 us, hash = 8913b7bd1be04b11
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000622,time:0,execs:0,orig:NotTest.txt'...
    len = 55, map size = 47436, exec speed = 1992056 us, hash = 0f9b48485d533378
Results of dry-run 0[*] Attempting dry run with 'id:000623,time:0,execs:0,orig:PR1386.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47448, exec speed = 1961806 us, hash = 342b287a59ff67e8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000624,time:0,execs:0,orig:PR491.txt'...
    len = 47, map size = 47260, exec speed = 1273034 us, hash = 44ee7727b6fdaf57
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000625,time:0,execs:0,orig:PR640.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47426, exec speed = 1962362 us, hash = 3131d4e6b2fe471b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000626,time:0,execs:0,orig:StructModifyTest.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000626,time:0,execs:0,orig:StructModifyTest.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000627,time:0,execs:0,orig:TestLoop.txt'...
    len = 50, map size = 47441, exec speed = 2005308 us, hash = 581584711b95b9bf
Results of dry-run 0[*] Attempting dry run with 'id:000628,time:0,execs:0,orig:add_numbers.txt'...
    len = 55, map size = 47439, exec speed = 1954816 us, hash = e3a2986ebda7eb60
Results of dry-run 0[*] Attempting dry run with 'id:000629,time:0,execs:0,orig:align-2.txt'...
    len = 45, map size = 37885, exec speed = 281861 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000630,time:0,execs:0,orig:align-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000630,time:0,execs:0,orig:align-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000631,time:0,execs:0,orig:anon-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47266, exec speed = 1278285 us, hash = 5adfb75fb7ff2ca4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000632,time:0,execs:0,orig:bf-pack-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000632,time:0,execs:0,orig:bf-pack-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000633,time:0,execs:0,orig:bf-sign-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000633,time:0,execs:0,orig:bf-sign-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000634,time:0,execs:0,orig:bigstack.txt'...
    len = 46, map size = 37885, exec speed = 279688 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000635,time:0,execs:0,orig:bitfld-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000635,time:0,execs:0,orig:bitfld-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000636,time:0,execs:0,orig:bitfld-2.txt'...
    len = 50, map size = 47260, exec speed = 1436034 us, hash = 8c477ab18d83feec
Results of dry-run 0[*] Attempting dry run with 'id:000637,time:0,execs:0,orig:block-byref-test.txt'...
[!] WARNING: instability detected during calibration
    len = 58, map size = 47257, exec speed = 1372811 us, hash = 065f23aadd4c8c2c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000638,time:0,execs:0,orig:built-in-setjmp.txt'...
    len = 81, map size = 47422, exec speed = 1992295 us, hash = e8994dbc0477e0dd
Results of dry-run 0[*] Attempting dry run with 'id:000639,time:0,execs:0,orig:builtin-prefetch-1.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47432, exec speed = 1958926 us, hash = 76fff8c4d4109570
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000640,time:0,execs:0,orig:builtin-prefetch-3.txt'...
    len = 60, map size = 47274, exec speed = 1278438 us, hash = a427b15876ad8f81
Results of dry-run 0[*] Attempting dry run with 'id:000641,time:0,execs:0,orig:builtin-prefetch-4.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47284, exec speed = 1275674 us, hash = 71a4a0ba0ba63bb0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000642,time:0,execs:0,orig:builtin-prefetch-5.txt'...
    len = 60, map size = 47276, exec speed = 1276941 us, hash = 3eb1f845e091afd7
Results of dry-run 0[*] Attempting dry run with 'id:000643,time:0,execs:0,orig:builtin-prefetch-6.txt'...
    len = 84, map size = 47436, exec speed = 1955730 us, hash = 9f24fc0de82a4a63
Results of dry-run 0[*] Attempting dry run with 'id:000644,time:0,execs:0,orig:byval-alignment.txt'...
    len = 63, map size = 47633, exec speed = 1976784 us, hash = 7ea3f08a9a1ed7cc
Results of dry-run 0[*] Attempting dry run with 'id:000645,time:0,execs:0,orig:callargs.txt'...
    len = 78, map size = 47594, exec speed = 2646444 us, hash = 94e0e8408e2ad696
Results of dry-run 0[*] Attempting dry run with 'id:000646,time:0,execs:0,orig:cmpsf-1.txt'...
    len = 55, map size = 47425, exec speed = 1956311 us, hash = 14ecb6ad706ad7cd
Results of dry-run 0[*] Attempting dry run with 'id:000647,time:0,execs:0,orig:compare-3.txt'...
    len = 53, map size = 47269, exec speed = 1263763 us, hash = 5a3db80c824aebfb
Results of dry-run 0[*] Attempting dry run with 'id:000648,time:0,execs:0,orig:compare.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47445, exec speed = 1968376 us, hash = 0d874151570411c6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000649,time:0,execs:0,orig:complex-1.txt'...
    len = 47, map size = 37885, exec speed = 283293 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000650,time:0,execs:0,orig:complex-3.txt'...
    len = 53, map size = 47310, exec speed = 1288226 us, hash = e19883cb5505d04c
Results of dry-run 0[*] Attempting dry run with 'id:000651,time:0,execs:0,orig:compndlit-1.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47262, exec speed = 1582850 us, hash = 2d2e34b44e02bcee
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000652,time:0,execs:0,orig:conditional-gnu-ext.txt'...
    len = 46, map size = 37885, exec speed = 553444 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000653,time:0,execs:0,orig:const-addr-expr-1.txt'...
[!] WARNING: instability detected during calibration
    len = 61, map size = 47432, exec speed = 1967725 us, hash = 4e8214c40c018bbf
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000654,time:0,execs:0,orig:cvt-1.txt'...
    len = 47, map size = 47310, exec speed = 1275548 us, hash = 89874cd5be489b5e
Results of dry-run 0[*] Attempting dry run with 'id:000655,time:0,execs:0,orig:divcmp-1.txt'...
    len = 46, map size = 37885, exec speed = 282538 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000656,time:0,execs:0,orig:divcmp-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000656,time:0,execs:0,orig:divcmp-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000657,time:0,execs:0,orig:divcmp-3.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1390760 us, hash = 8a4f7ce7556a0d43
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000658,time:0,execs:0,orig:divcmp-4.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000658,time:0,execs:0,orig:divcmp-4.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000659,time:0,execs:0,orig:divcmp-5.txt'...
    len = 50, map size = 47265, exec speed = 1263645 us, hash = d12910a6e6b5046c
Results of dry-run 0[*] Attempting dry run with 'id:000660,time:0,execs:0,orig:divconst-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000660,time:0,execs:0,orig:divconst-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000661,time:0,execs:0,orig:divide_numbers_program1.txt'...
    len = 71, map size = 47485, exec speed = 1955652 us, hash = 2429f3533937e0a4
Results of dry-run 0[*] Attempting dry run with 'id:000662,time:0,execs:0,orig:doloop-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47267, exec speed = 1299094 us, hash = e7189f4fc4b758d4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000663,time:0,execs:0,orig:doloop-2.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47269, exec speed = 1284557 us, hash = 322f6decbdd4d040
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000664,time:0,execs:0,orig:enum-3.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47263, exec speed = 1290803 us, hash = 5f4c7eb6b067800d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000665,time:0,execs:0,orig:factorial_program.txt'...
    len = 59, map size = 47449, exec speed = 1958447 us, hash = d2ea2c6d42299b4d
Results of dry-run 0[*] Attempting dry run with 'id:000666,time:0,execs:0,orig:ffs-2.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47426, exec speed = 2121165 us, hash = 4847cefd730f8e08
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000667,time:0,execs:0,orig:float16-smoke.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47415, exec speed = 1964669 us, hash = 3232fa67983a3d88
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000668,time:0,execs:0,orig:floatunsisf-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000668,time:0,execs:0,orig:floatunsisf-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000669,time:0,execs:0,orig:fprintf-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47448, exec speed = 2444833 us, hash = c6c2510cd73847d0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000670,time:0,execs:0,orig:globalrefs.txt'...
    len = 48, map size = 37885, exec speed = 496947 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000671,time:0,execs:0,orig:gofast.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47430, exec speed = 3073035 us, hash = 53a2a60cb5ad0c3e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000672,time:0,execs:0,orig:ifcvt-onecmpl-abs-1.txt'...
    len = 61, map size = 47266, exec speed = 1276820 us, hash = e534a38ccb1dc2b6
Results of dry-run 0[*] Attempting dry run with 'id:000673,time:0,execs:0,orig:inst-check.txt'...
    len = 52, map size = 47261, exec speed = 1281235 us, hash = 2914fd1a359de75e
Results of dry-run 0[*] Attempting dry run with 'id:000674,time:0,execs:0,orig:ipa-sra-2.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47402, exec speed = 2176685 us, hash = 3f99930e5a51dce2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000675,time:0,execs:0,orig:largest_number_program.txt'...
[!] WARNING: instability detected during calibration
    len = 68, map size = 47446, exec speed = 2190399 us, hash = 9a0338e23ce0fb6a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000676,time:0,execs:0,orig:leap_year_program.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47451, exec speed = 2288528 us, hash = 36afaff696421e78
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000677,time:0,execs:0,orig:longlong.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1371309 us, hash = 44af84d54361c670
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000678,time:0,execs:0,orig:loop-1.txt'...
    len = 48, map size = 47262, exec speed = 1279787 us, hash = ba285a80e2adcedd
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000679,time:0,execs:0,orig:loop-10.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000679,time:0,execs:0,orig:loop-10.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000680,time:0,execs:0,orig:loop-12.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000680,time:0,execs:0,orig:loop-12.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000681,time:0,execs:0,orig:loop-13.txt'...
    len = 51, map size = 47430, exec speed = 1965651 us, hash = 8d7c1f8d1785a8d7
Results of dry-run 0[*] Attempting dry run with 'id:000682,time:0,execs:0,orig:loop-15.txt'...
    len = 45, map size = 37885, exec speed = 282066 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000683,time:0,execs:0,orig:loop-2b.txt'...
    len = 49, map size = 47265, exec speed = 1405101 us, hash = ccb14569a1fdec3a
Results of dry-run 0[*] Attempting dry run with 'id:000684,time:0,execs:0,orig:loop-2c.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000684,time:0,execs:0,orig:loop-2c.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000685,time:0,execs:0,orig:loop-2e.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47273, exec speed = 1596698 us, hash = 82d3f8d28ce42cf5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000686,time:0,execs:0,orig:loop-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000686,time:0,execs:0,orig:loop-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000687,time:0,execs:0,orig:loop-3b.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000687,time:0,execs:0,orig:loop-3b.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000688,time:0,execs:0,orig:loop-3c.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000689,time:0,execs:0,orig:loop-4b.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47261, exec speed = 1280217 us, hash = e12cf432823b3ae7
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000690,time:0,execs:0,orig:loop-5.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000690,time:0,execs:0,orig:loop-5.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000691,time:0,execs:0,orig:loop-6.txt'...
    len = 48, map size = 47264, exec speed = 1286795 us, hash = 439271290ee7e49b
Results of dry-run 0[*] Attempting dry run with 'id:000692,time:0,execs:0,orig:loop-7.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000692,time:0,execs:0,orig:loop-7.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000693,time:0,execs:0,orig:loop-8.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47287, exec speed = 1494902 us, hash = 354e7ca2a4a48c45
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000694,time:0,execs:0,orig:loop-9.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47270, exec speed = 1275233 us, hash = ab28952866fe4086
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000695,time:0,execs:0,orig:loop-ivopts-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000695,time:0,execs:0,orig:loop-ivopts-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000696,time:0,execs:0,orig:mayalias-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000696,time:0,execs:0,orig:mayalias-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000697,time:0,execs:0,orig:mayalias-2.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47261, exec speed = 1277029 us, hash = e17c8da3c0606800
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000698,time:0,execs:0,orig:memcpy-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000698,time:0,execs:0,orig:memcpy-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000699,time:0,execs:0,orig:memset-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47272, exec speed = 5901039 us, hash = 549e8e759e2d0b76
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000700,time:0,execs:0,orig:memset-3.txt'...
    len = 46, map size = 37885, exec speed = 281440 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000701,time:0,execs:0,orig:mod-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000701,time:0,execs:0,orig:mod-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000702,time:0,execs:0,orig:ms_struct-bitfield-init.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000702,time:0,execs:0,orig:ms_struct-bitfield-init.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000703,time:0,execs:0,orig:ms_struct_pack_layout-1.txt'...
[!] WARNING: instability detected during calibration
    len = 65, map size = 47260, exec speed = 1265194 us, hash = 88c86714f26a6ba0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000704,time:0,execs:0,orig:multdi-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000704,time:0,execs:0,orig:multdi-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000705,time:0,execs:0,orig:nest-stdar-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000705,time:0,execs:0,orig:nest-stdar-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000706,time:0,execs:0,orig:nestfunc-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000706,time:0,execs:0,orig:nestfunc-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000707,time:0,execs:0,orig:nestfunc-6.txt'...
    len = 33, map size = 37885, exec speed = 280360 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000708,time:0,execs:0,orig:nestfunc-7.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47426, exec speed = 2170871 us, hash = 0b556a167fc66c0b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000709,time:0,execs:0,orig:p18298.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47428, exec speed = 2664008 us, hash = 4333f5a99078e3fb
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000710,time:0,execs:0,orig:packed-2.txt'...
    len = 50, map size = 47260, exec speed = 1263315 us, hash = 2a6f8f9c3d242fc1
Results of dry-run 0[*] Attempting dry run with 'id:000711,time:0,execs:0,orig:positive_negative_program.txt'...
[!] WARNING: instability detected during calibration
    len = 67, map size = 47422, exec speed = 2276658 us, hash = 2909cba9794f349c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000712,time:0,execs:0,orig:pr15262.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47261, exec speed = 1767542 us, hash = d5cb40997e2f8255
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000713,time:0,execs:0,orig:pr16790-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47260, exec speed = 1269054 us, hash = d286769b70637f96
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000714,time:0,execs:0,orig:pr17078-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47260, exec speed = 1739962 us, hash = 8a449e7cb5bcb14e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000715,time:0,execs:0,orig:pr17133.txt'...
    len = 49, map size = 47265, exec speed = 1271976 us, hash = 28e6a0d37c0ddff9
Results of dry-run 0[*] Attempting dry run with 'id:000716,time:0,execs:0,orig:pr19005.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47264, exec speed = 1273020 us, hash = eaea4ed3b1905a5d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000717,time:0,execs:0,orig:pr19449.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47268, exec speed = 1268070 us, hash = eecc39f0517e0581
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000718,time:0,execs:0,orig:pr19515.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47260, exec speed = 1263585 us, hash = 38f28674cda223a2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000719,time:0,execs:0,orig:pr19606.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47261, exec speed = 1271721 us, hash = 32c93049002a79d9
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000720,time:0,execs:0,orig:pr19689.txt'...
    len = 49, map size = 47266, exec speed = 1262730 us, hash = 756f71e12604d14a
Results of dry-run 0[*] Attempting dry run with 'id:000721,time:0,execs:0,orig:pr20100-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000721,time:0,execs:0,orig:pr20100-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000722,time:0,execs:0,orig:pr20187-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47291, exec speed = 1263747 us, hash = 3b9620d1193ea854
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000723,time:0,execs:0,orig:pr20466-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47261, exec speed = 1282672 us, hash = 528ba5d6cb66d15b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000724,time:0,execs:0,orig:pr21173.txt'...
[!] WARNING: instability detected during calibration
    len = 61, map size = 47424, exec speed = 1942010 us, hash = 2d2b99479bec0193
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000725,time:0,execs:0,orig:pr21964-1.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47274, exec speed = 1279047 us, hash = 0fe584fea9dd7ecf
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000726,time:0,execs:0,orig:pr22061-1.txt'...
    len = 51, map size = 47262, exec speed = 1280277 us, hash = 6762e398bdbd9e8e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000727,time:0,execs:0,orig:pr22061-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000727,time:0,execs:0,orig:pr22061-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000728,time:0,execs:0,orig:pr22429.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000728,time:0,execs:0,orig:pr22429.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000729,time:0,execs:0,orig:pr22493-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000729,time:0,execs:0,orig:pr22493-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000730,time:0,execs:0,orig:pr22630.txt'...
    len = 49, map size = 47265, exec speed = 1275073 us, hash = 2d6da32709e0d773
Results of dry-run 0[*] Attempting dry run with 'id:000731,time:0,execs:0,orig:pr23047.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000731,time:0,execs:0,orig:pr23047.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000732,time:0,execs:0,orig:pr23135.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47297, exec speed = 1272214 us, hash = eda7be4fa38bbb26
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000733,time:0,execs:0,orig:pr23604.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47273, exec speed = 1274137 us, hash = b5dfde9aaae11c0b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000734,time:0,execs:0,orig:pr24135.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47271, exec speed = 1286835 us, hash = cfcc097d7817f9ee
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000735,time:0,execs:0,orig:pr24141.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000735,time:0,execs:0,orig:pr24141.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000736,time:0,execs:0,orig:pr25125.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000736,time:0,execs:0,orig:pr25125.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000737,time:0,execs:0,orig:pr25737.txt'...
    len = 49, map size = 47258, exec speed = 1262241 us, hash = a99bf891fd368336
Results of dry-run 0[*] Attempting dry run with 'id:000738,time:0,execs:0,orig:pr27260.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000738,time:0,execs:0,orig:pr27260.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000739,time:0,execs:0,orig:pr27364.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000739,time:0,execs:0,orig:pr27364.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000740,time:0,execs:0,orig:pr27671-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000740,time:0,execs:0,orig:pr27671-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000741,time:0,execs:0,orig:pr28289.txt'...
    len = 49, map size = 47261, exec speed = 1275865 us, hash = 291b72d3f9a23627
Results of dry-run 0[*] Attempting dry run with 'id:000742,time:0,execs:0,orig:pr28403.txt'...
    len = 63, map size = 47433, exec speed = 1970272 us, hash = 4af5eae179dd6817
Results of dry-run 0[*] Attempting dry run with 'id:000743,time:0,execs:0,orig:pr28651.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000743,time:0,execs:0,orig:pr28651.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000744,time:0,execs:0,orig:pr29006.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47260, exec speed = 1272165 us, hash = afa838339eecaa41
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000745,time:0,execs:0,orig:pr29156.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000745,time:0,execs:0,orig:pr29156.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000746,time:0,execs:0,orig:pr29695-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000746,time:0,execs:0,orig:pr29695-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000747,time:0,execs:0,orig:pr29797-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000747,time:0,execs:0,orig:pr29797-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000748,time:0,execs:0,orig:pr30185.txt'...
    len = 45, map size = 37885, exec speed = 283812 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000749,time:0,execs:0,orig:pr30778.txt'...
    len = 49, map size = 47259, exec speed = 1282068 us, hash = 5bf5ddad87acf7e1
Results of dry-run 0[*] Attempting dry run with 'id:000750,time:0,execs:0,orig:pr31072.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000750,time:0,execs:0,orig:pr31072.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000751,time:0,execs:0,orig:pr31136.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000751,time:0,execs:0,orig:pr31136.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000752,time:0,execs:0,orig:pr31169.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000752,time:0,execs:0,orig:pr31169.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000753,time:0,execs:0,orig:pr31605.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000753,time:0,execs:0,orig:pr31605.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000754,time:0,execs:0,orig:pr32244-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47270, exec speed = 1271636 us, hash = e3842df95c25c481
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000755,time:0,execs:0,orig:pr32500.txt'...
    len = 49, map size = 47265, exec speed = 1276387 us, hash = f204278ff105b96f
Results of dry-run 0[*] Attempting dry run with 'id:000756,time:0,execs:0,orig:pr33142.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47272, exec speed = 1275432 us, hash = 041c2acdc99eb2cb
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000757,time:0,execs:0,orig:pr33382.txt'...
    len = 49, map size = 47261, exec speed = 1271197 us, hash = 18fa2bf1381d075b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000758,time:0,execs:0,orig:pr33669.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000758,time:0,execs:0,orig:pr33669.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000759,time:0,execs:0,orig:pr33779-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000759,time:0,execs:0,orig:pr33779-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000760,time:0,execs:0,orig:pr33779-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000760,time:0,execs:0,orig:pr33779-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000761,time:0,execs:0,orig:pr33992.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47430, exec speed = 1962859 us, hash = be3cb54e64fe1153
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000762,time:0,execs:0,orig:pr34070-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000762,time:0,execs:0,orig:pr34070-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000763,time:0,execs:0,orig:pr34070-2.txt'...
    len = 51, map size = 47276, exec speed = 1273207 us, hash = 8c5f675d8af0761e
Results of dry-run 0[*] Attempting dry run with 'id:000764,time:0,execs:0,orig:pr34099-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000764,time:0,execs:0,orig:pr34099-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000765,time:0,execs:0,orig:pr34099.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000765,time:0,execs:0,orig:pr34099.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000766,time:0,execs:0,orig:pr34154.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000766,time:0,execs:0,orig:pr34154.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000767,time:0,execs:0,orig:pr34176.txt'...
    len = 63, map size = 47429, exec speed = 1966061 us, hash = fa79e3e97f3c7f3c
Results of dry-run 0[*] Attempting dry run with 'id:000768,time:0,execs:0,orig:pr34768-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47269, exec speed = 1274241 us, hash = 37c1e66f30ddf7bc
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000769,time:0,execs:0,orig:pr34971.txt'...
    len = 51, map size = 47433, exec speed = 1957712 us, hash = fdb48956a8088a13
Results of dry-run 0[*] Attempting dry run with 'id:000770,time:0,execs:0,orig:pr34982.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000770,time:0,execs:0,orig:pr34982.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000771,time:0,execs:0,orig:pr35231.txt'...
    len = 51, map size = 47272, exec speed = 1276961 us, hash = d64a3fdc6427e3cc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000772,time:0,execs:0,orig:pr35390.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1272974 us, hash = 143cb8e2e281e75c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000773,time:0,execs:0,orig:pr35800.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000773,time:0,execs:0,orig:pr35800.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000774,time:0,execs:0,orig:pr36034-1.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47427, exec speed = 1950418 us, hash = e571d06b8bac3c9e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000775,time:0,execs:0,orig:pr36034-2.txt'...
    len = 63, map size = 47435, exec speed = 1957632 us, hash = f8b4e8828e9c92e1
Results of dry-run 0[*] Attempting dry run with 'id:000776,time:0,execs:0,orig:pr36038.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000776,time:0,execs:0,orig:pr36038.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000777,time:0,execs:0,orig:pr36321.txt'...
[!] WARNING: instability detected during calibration
    len = 71, map size = 47426, exec speed = 1947649 us, hash = f00e20ff704698ea
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000778,time:0,execs:0,orig:pr36343.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47299, exec speed = 1362091 us, hash = 148b673bca77bd2f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000779,time:0,execs:0,orig:pr36765.txt'...
    len = 49, map size = 47393, exec speed = 1950513 us, hash = 8d733c98254b09fc
Results of dry-run 0[*] Attempting dry run with 'id:000780,time:0,execs:0,orig:pr37102.txt'...
    len = 49, map size = 47265, exec speed = 1278446 us, hash = 9d717c88367933c1
Results of dry-run 0[*] Attempting dry run with 'id:000781,time:0,execs:0,orig:pr37125.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000781,time:0,execs:0,orig:pr37125.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000782,time:0,execs:0,orig:pr37780.txt'...
    len = 49, map size = 47264, exec speed = 1274689 us, hash = 0f5d6df9f3e3c505
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000783,time:0,execs:0,orig:pr37882.txt'...
    len = 49, map size = 47265, exec speed = 1278863 us, hash = 6daf1a5d3407ab83
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000784,time:0,execs:0,orig:pr37924.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1269192 us, hash = 26c1f9ce2de0dbe5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000785,time:0,execs:0,orig:pr37931.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000785,time:0,execs:0,orig:pr37931.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000786,time:0,execs:0,orig:pr38048-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000786,time:0,execs:0,orig:pr38048-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000787,time:0,execs:0,orig:pr38236.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47261, exec speed = 1282800 us, hash = 03d09a0fae0beb9a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000788,time:0,execs:0,orig:pr38422.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000788,time:0,execs:0,orig:pr38422.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000789,time:0,execs:0,orig:pr38819.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47262, exec speed = 1281845 us, hash = 6bbe4e0970684c18
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000790,time:0,execs:0,orig:pr38969.txt'...
[!] WARNING: instability detected during calibration
    len = 63, map size = 47314, exec speed = 1290916 us, hash = 5b09ac735d2a758c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000791,time:0,execs:0,orig:pr39120.txt'...
    len = 49, map size = 47259, exec speed = 1292600 us, hash = 6e2b605128026438
Results of dry-run 0[*] Attempting dry run with 'id:000792,time:0,execs:0,orig:pr39233.txt'...
    len = 49, map size = 47265, exec speed = 1282191 us, hash = f06393dffccb121c
Results of dry-run 0[*] Attempting dry run with 'id:000793,time:0,execs:0,orig:pr39240.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000793,time:0,execs:0,orig:pr39240.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000794,time:0,execs:0,orig:pr39501.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000794,time:0,execs:0,orig:pr39501.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000795,time:0,execs:0,orig:pr40022.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47264, exec speed = 1282016 us, hash = 8a51195e900def28
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000796,time:0,execs:0,orig:pr40404.txt'...
    len = 49, map size = 47260, exec speed = 1273224 us, hash = d7f098d1c8be28a9
Results of dry-run 0[*] Attempting dry run with 'id:000797,time:0,execs:0,orig:pr40493.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1278609 us, hash = 55012e91d46cd82f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000798,time:0,execs:0,orig:pr40579.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1276453 us, hash = 84590fa0c3e06f8e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000799,time:0,execs:0,orig:pr41317.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47260, exec speed = 1268699 us, hash = 38f28674cda223a2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000800,time:0,execs:0,orig:pr41395-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000800,time:0,execs:0,orig:pr41395-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000801,time:0,execs:0,orig:pr41463.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000801,time:0,execs:0,orig:pr41463.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000802,time:0,execs:0,orig:pr41917.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47260, exec speed = 1406067 us, hash = 38f28674cda223a2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000803,time:0,execs:0,orig:pr41935.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47274, exec speed = 1348243 us, hash = 35945a06d5a86826
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000804,time:0,execs:0,orig:pr42154.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000804,time:0,execs:0,orig:pr42154.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000805,time:0,execs:0,orig:pr42248.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47289, exec speed = 1369980 us, hash = 02dbf959ffe346bf
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000806,time:0,execs:0,orig:pr42269-2.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47269, exec speed = 1540523 us, hash = e34e720648e50589
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000807,time:0,execs:0,orig:pr42512.txt'...
    len = 49, map size = 47277, exec speed = 1283102 us, hash = db4ba8f403d53784
Results of dry-run 0[*] Attempting dry run with 'id:000808,time:0,execs:0,orig:pr42544.txt'...
    len = 49, map size = 47260, exec speed = 1265518 us, hash = 38f28674cda223a2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000809,time:0,execs:0,orig:pr42570.txt'...
    len = 49, map size = 47265, exec speed = 1279063 us, hash = 619c416636fac960
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000810,time:0,execs:0,orig:pr42721.txt'...
    len = 53, map size = 47433, exec speed = 1966731 us, hash = c43a28d74a378493
Results of dry-run 0[*] Attempting dry run with 'id:000811,time:0,execs:0,orig:pr43008.txt'...
    len = 49, map size = 47265, exec speed = 1277207 us, hash = 1f60e5c003a2613f
Results of dry-run 0[*] Attempting dry run with 'id:000812,time:0,execs:0,orig:pr43236.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47275, exec speed = 1292130 us, hash = b654592be966c749
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000813,time:0,execs:0,orig:pr43269.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1432336 us, hash = 6cefa08123a3b6ee
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000814,time:0,execs:0,orig:pr43385.txt'...
    len = 45, map size = 37885, exec speed = 284678 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000815,time:0,execs:0,orig:pr43438.txt'...
    len = 49, map size = 47260, exec speed = 1430637 us, hash = 57d743266951d472
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000816,time:0,execs:0,orig:pr43560.txt'...
    len = 30, map size = 37885, exec speed = 283791 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000817,time:0,execs:0,orig:pr43629.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1497020 us, hash = 3ae2c301b934a00d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000818,time:0,execs:0,orig:pr43783.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000818,time:0,execs:0,orig:pr43783.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000819,time:0,execs:0,orig:pr43784.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47267, exec speed = 1933749 us, hash = 315c390504187df3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000820,time:0,execs:0,orig:pr43835.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47397, exec speed = 1955365 us, hash = 3ea1125ab18554a5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000821,time:0,execs:0,orig:pr44164.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1278500 us, hash = dbe22e0faf3a4bba
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000822,time:0,execs:0,orig:pr44202-1.txt'...
    len = 53, map size = 47436, exec speed = 1965578 us, hash = 5f6314132b6b9ab4
Results of dry-run 0[*] Attempting dry run with 'id:000823,time:0,execs:0,orig:pr44555.txt'...
    len = 49, map size = 47265, exec speed = 1274951 us, hash = bbb0bb867150125c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000824,time:0,execs:0,orig:pr44683.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000824,time:0,execs:0,orig:pr44683.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000825,time:0,execs:0,orig:pr44828.txt'...
    len = 51, map size = 47283, exec speed = 1275600 us, hash = 65a830746290c8ba
Results of dry-run 0[*] Attempting dry run with 'id:000826,time:0,execs:0,orig:pr44852.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000826,time:0,execs:0,orig:pr44852.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000827,time:0,execs:0,orig:pr44858.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000827,time:0,execs:0,orig:pr44858.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000828,time:0,execs:0,orig:pr45262.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000828,time:0,execs:0,orig:pr45262.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000829,time:0,execs:0,orig:pr45695.txt'...
    len = 49, map size = 47265, exec speed = 1273961 us, hash = 87c88b944d14e844
Results of dry-run 0[*] Attempting dry run with 'id:000830,time:0,execs:0,orig:pr46019.txt'...
    len = 61, map size = 47430, exec speed = 1958639 us, hash = 3e7c6e5b235877e8
Results of dry-run 0[*] Attempting dry run with 'id:000831,time:0,execs:0,orig:pr46309.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47260, exec speed = 1912347 us, hash = ffa480871b69ec95
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000832,time:0,execs:0,orig:pr46316.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47434, exec speed = 1964594 us, hash = a9836e108f983611
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000833,time:0,execs:0,orig:pr46909-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000833,time:0,execs:0,orig:pr46909-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000834,time:0,execs:0,orig:pr47148.txt'...
    len = 53, map size = 47433, exec speed = 1965359 us, hash = 4cbde9ddbac32487
Results of dry-run 0[*] Attempting dry run with 'id:000835,time:0,execs:0,orig:pr47155.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47261, exec speed = 1269484 us, hash = f4769934016915f6
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000836,time:0,execs:0,orig:pr47299.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000836,time:0,execs:0,orig:pr47299.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000837,time:0,execs:0,orig:pr47337.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47278, exec speed = 1294997 us, hash = 4ca6c7579bbcdecf
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000838,time:0,execs:0,orig:pr48571-1.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47433, exec speed = 2123045 us, hash = 6c63fc0c95c46a71
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000839,time:0,execs:0,orig:pr48717.txt'...
    len = 49, map size = 47261, exec speed = 1424864 us, hash = b65438be5e4f09c0
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000840,time:0,execs:0,orig:pr48809.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000840,time:0,execs:0,orig:pr48809.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000841,time:0,execs:0,orig:pr48814-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000841,time:0,execs:0,orig:pr48814-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000842,time:0,execs:0,orig:pr48973-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000842,time:0,execs:0,orig:pr48973-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000843,time:0,execs:0,orig:pr48973-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000843,time:0,execs:0,orig:pr48973-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000844,time:0,execs:0,orig:pr49073.txt'...
    len = 49, map size = 47260, exec speed = 1270954 us, hash = 38f28674cda223a2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000845,time:0,execs:0,orig:pr49161.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000845,time:0,execs:0,orig:pr49161.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000846,time:0,execs:0,orig:pr49186.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000846,time:0,execs:0,orig:pr49186.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000847,time:0,execs:0,orig:pr49218.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47396, exec speed = 1459621 us, hash = e3e2901dff4395c6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000848,time:0,execs:0,orig:pr49281.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000848,time:0,execs:0,orig:pr49281.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000849,time:0,execs:0,orig:pr49419.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1441017 us, hash = 8a54c8d368f13617
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000850,time:0,execs:0,orig:pr49712.txt'...
    len = 49, map size = 47260, exec speed = 1266651 us, hash = b0408a8da445984e
Results of dry-run 0[*] Attempting dry run with 'id:000851,time:0,execs:0,orig:pr50865.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000851,time:0,execs:0,orig:pr50865.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000852,time:0,execs:0,orig:pr51023.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000852,time:0,execs:0,orig:pr51023.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000853,time:0,execs:0,orig:pr51323.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47268, exec speed = 1275356 us, hash = c496507589e64503
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000854,time:0,execs:0,orig:pr51466.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000854,time:0,execs:0,orig:pr51466.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000855,time:0,execs:0,orig:pr51877.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47283, exec speed = 1286901 us, hash = 85c14b6ad08af943
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000856,time:0,execs:0,orig:pr52209.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000856,time:0,execs:0,orig:pr52209.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000857,time:0,execs:0,orig:pr52286.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000857,time:0,execs:0,orig:pr52286.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000858,time:0,execs:0,orig:pr52760.txt'...
    len = 49, map size = 47273, exec speed = 1293706 us, hash = 7f1aab37e7eecfc1
Results of dry-run 0[*] Attempting dry run with 'id:000859,time:0,execs:0,orig:pr53084.txt'...
[!] WARNING: instability detected during calibration
    len = 71, map size = 47422, exec speed = 2318362 us, hash = 54b6cb874d485f32
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000860,time:0,execs:0,orig:pr53160.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47267, exec speed = 1535806 us, hash = 8ac49cfce61a03cf
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000861,time:0,execs:0,orig:pr53465.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1364109 us, hash = 9632a69cb47137b3
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000862,time:0,execs:0,orig:pr53645-2.txt'...
    len = 51, map size = 47421, exec speed = 1319868 us, hash = 97e2526b4e5d9223
Results of dry-run 0[*] Attempting dry run with 'id:000863,time:0,execs:0,orig:pr53645.txt'...
    len = 49, map size = 47360, exec speed = 1300551 us, hash = 0ae5cbf887c04d83
Results of dry-run 0[*] Attempting dry run with 'id:000864,time:0,execs:0,orig:pr53688.txt'...
[!] WARNING: instability detected during calibration
    len = 71, map size = 47422, exec speed = 1947977 us, hash = 578697525fe8c5fd
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000865,time:0,execs:0,orig:pr54937.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000865,time:0,execs:0,orig:pr54937.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000866,time:0,execs:0,orig:pr54985.txt'...
    len = 53, map size = 47271, exec speed = 1285916 us, hash = 254ec8724b945c29
Results of dry-run 0[*] Attempting dry run with 'id:000867,time:0,execs:0,orig:pr55137.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000867,time:0,execs:0,orig:pr55137.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000868,time:0,execs:0,orig:pr55750.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47426, exec speed = 1961699 us, hash = ed02a68493a20405
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000869,time:0,execs:0,orig:pr56051.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47262, exec speed = 1390539 us, hash = 17ad46bd16e5a2c5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000870,time:0,execs:0,orig:pr56799.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000870,time:0,execs:0,orig:pr56799.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000871,time:0,execs:0,orig:pr56837.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000871,time:0,execs:0,orig:pr56837.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000872,time:0,execs:0,orig:pr56899.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000872,time:0,execs:0,orig:pr56899.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000873,time:0,execs:0,orig:pr56962.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47430, exec speed = 2234979 us, hash = 4789e3f1e7713854
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000874,time:0,execs:0,orig:pr56982.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1465372 us, hash = 118c2aea70bf063c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000875,time:0,execs:0,orig:pr57124.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000875,time:0,execs:0,orig:pr57124.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000876,time:0,execs:0,orig:pr57130.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47272, exec speed = 1462821 us, hash = 915e268207d0719f
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000877,time:0,execs:0,orig:pr57131.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000877,time:0,execs:0,orig:pr57131.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000878,time:0,execs:0,orig:pr57144.txt'...
    len = 49, map size = 47264, exec speed = 1268191 us, hash = f7fdc5de9dc79f0d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000879,time:0,execs:0,orig:pr57281.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47425, exec speed = 1942599 us, hash = 268d155917219486
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000880,time:0,execs:0,orig:pr57321.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47261, exec speed = 1677792 us, hash = 7b1c319be86f2f22
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000881,time:0,execs:0,orig:pr57344-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000881,time:0,execs:0,orig:pr57344-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000882,time:0,execs:0,orig:pr57344-2.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47411, exec speed = 2668701 us, hash = 4dd50b3c95caa497
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000883,time:0,execs:0,orig:pr57344-4.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000883,time:0,execs:0,orig:pr57344-4.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000884,time:0,execs:0,orig:pr57568.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47261, exec speed = 1276592 us, hash = d036c3584cf025ec
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000885,time:0,execs:0,orig:pr57860.txt'...
    len = 49, map size = 47272, exec speed = 1277195 us, hash = 661dd0b183ab40be
Results of dry-run 0[*] Attempting dry run with 'id:000886,time:0,execs:0,orig:pr57861.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000886,time:0,execs:0,orig:pr57861.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000887,time:0,execs:0,orig:pr57875.txt'...
    len = 49, map size = 47265, exec speed = 1279201 us, hash = 96ff09638b8508dc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000888,time:0,execs:0,orig:pr57876.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000888,time:0,execs:0,orig:pr57876.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000889,time:0,execs:0,orig:pr57877.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000889,time:0,execs:0,orig:pr57877.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000890,time:0,execs:0,orig:pr58277-2.txt'...
[!] WARNING: instability detected during calibration
    len = 65, map size = 47427, exec speed = 1957598 us, hash = 199dc9bcd54fa5d4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000891,time:0,execs:0,orig:pr58364.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000891,time:0,execs:0,orig:pr58364.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000892,time:0,execs:0,orig:pr58385.txt'...
    len = 49, map size = 47261, exec speed = 1267798 us, hash = 05726dc6c0f8392f
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000893,time:0,execs:0,orig:pr58387.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000893,time:0,execs:0,orig:pr58387.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000894,time:0,execs:0,orig:pr58419.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47264, exec speed = 1270385 us, hash = 338919a2bc026381
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000895,time:0,execs:0,orig:pr58431.txt'...
    len = 49, map size = 47271, exec speed = 1272051 us, hash = bde6fc69219b35a6
Results of dry-run 0[*] Attempting dry run with 'id:000896,time:0,execs:0,orig:pr58564.txt'...
    len = 49, map size = 47261, exec speed = 1273378 us, hash = b8fe9f8a8fc0197d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000897,time:0,execs:0,orig:pr58570.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1277933 us, hash = 3f874ad8ea8e093c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000898,time:0,execs:0,orig:pr58640-2.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47278, exec speed = 1276401 us, hash = cb717ab5a98e8a54
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000899,time:0,execs:0,orig:pr58640.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47263, exec speed = 1455589 us, hash = 067c4f1e2a6c3373
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000900,time:0,execs:0,orig:pr58662.txt'...
    len = 49, map size = 47265, exec speed = 1276815 us, hash = 2966c2ac62e20b31
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000901,time:0,execs:0,orig:pr58726.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47271, exec speed = 1891986 us, hash = ffaf8863947da688
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000902,time:0,execs:0,orig:pr58943.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000902,time:0,execs:0,orig:pr58943.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000903,time:0,execs:0,orig:pr59014.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47420, exec speed = 2024083 us, hash = 814fcf154f8b9621
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000904,time:0,execs:0,orig:pr59101.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1272703 us, hash = dc8cf401fa137413
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000905,time:0,execs:0,orig:pr59221.txt'...
    len = 49, map size = 47267, exec speed = 1270304 us, hash = f6889518a58b45d0
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000906,time:0,execs:0,orig:pr59229.txt'...
    len = 61, map size = 47430, exec speed = 1968463 us, hash = f8160e4d62e1f3e0
Results of dry-run 0[*] Attempting dry run with 'id:000907,time:0,execs:0,orig:pr59358.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000907,time:0,execs:0,orig:pr59358.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000908,time:0,execs:0,orig:pr59387.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47274, exec speed = 1502117 us, hash = f06e19b798fd8d6d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000909,time:0,execs:0,orig:pr59388.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1496145 us, hash = bb9ee581127d4ec3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000910,time:0,execs:0,orig:pr59413.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000910,time:0,execs:0,orig:pr59413.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000911,time:0,execs:0,orig:pr59747.txt'...
    len = 49, map size = 47272, exec speed = 1281038 us, hash = 563a64bb15e1eab9
Results of dry-run 0[*] Attempting dry run with 'id:000912,time:0,execs:0,orig:pr60062.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47273, exec speed = 1280639 us, hash = 323f91c6876581c7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000913,time:0,execs:0,orig:pr60454.txt'...
    len = 49, map size = 47265, exec speed = 1272024 us, hash = 100c771111043b90
Results of dry-run 0[*] Attempting dry run with 'id:000914,time:0,execs:0,orig:pr60822.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47269, exec speed = 1839690 us, hash = 398b1d51a39ffe9a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000915,time:0,execs:0,orig:pr60960.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000915,time:0,execs:0,orig:pr60960.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000916,time:0,execs:0,orig:pr61375.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000916,time:0,execs:0,orig:pr61375.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000917,time:0,execs:0,orig:pr61517.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47261, exec speed = 1454093 us, hash = 9681aaf80abb52e7
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000918,time:0,execs:0,orig:pr61682.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47322, exec speed = 1513250 us, hash = 9df8948928bee9d5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000919,time:0,execs:0,orig:pr61725.txt'...
    len = 49, map size = 47260, exec speed = 1267209 us, hash = 38f28674cda223a2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000920,time:0,execs:0,orig:pr63659.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47260, exec speed = 1357214 us, hash = 38f28674cda223a2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000921,time:0,execs:0,orig:pr63843.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000921,time:0,execs:0,orig:pr63843.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000922,time:0,execs:0,orig:pr64242.txt'...
[!] WARNING: instability detected during calibration
    len = 61, map size = 47433, exec speed = 2165545 us, hash = 69046ebabf87d05d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000923,time:0,execs:0,orig:pr64255.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1357939 us, hash = 285d34a5a84b8607
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000924,time:0,execs:0,orig:pr64260.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47261, exec speed = 1643499 us, hash = f39543c7a6f932ea
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000925,time:0,execs:0,orig:pr64682.txt'...
    len = 49, map size = 47270, exec speed = 1308339 us, hash = 974bea27220c81e5
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000926,time:0,execs:0,orig:pr64957.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47271, exec speed = 2128412 us, hash = 3006fbe49485e98a
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000927,time:0,execs:0,orig:pr64979.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47284, exec speed = 1638574 us, hash = 7a9266e45b078240
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000928,time:0,execs:0,orig:pr65053-1.txt'...
    len = 51, map size = 47258, exec speed = 1267728 us, hash = c98fb91d626adc7f
Results of dry-run 0[*] Attempting dry run with 'id:000929,time:0,execs:0,orig:pr65053-2.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47265, exec speed = 1271729 us, hash = 78510c1d995f427b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000930,time:0,execs:0,orig:pr65170.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000930,time:0,execs:0,orig:pr65170.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000931,time:0,execs:0,orig:pr65215-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47456, exec speed = 2146019 us, hash = aa3dd4b5ca4c6c67
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000932,time:0,execs:0,orig:pr65215-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000932,time:0,execs:0,orig:pr65215-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000933,time:0,execs:0,orig:pr65215-4.txt'...
    len = 51, map size = 47271, exec speed = 1289173 us, hash = e67081cd21c5f9fc
Results of dry-run 0[*] Attempting dry run with 'id:000934,time:0,execs:0,orig:pr65215-5.txt'...
    len = 51, map size = 47269, exec speed = 1291416 us, hash = 371cdbb9a58c4012
Results of dry-run 0[*] Attempting dry run with 'id:000935,time:0,execs:0,orig:pr65216.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47270, exec speed = 1698170 us, hash = 75eb38f0385e94b1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000936,time:0,execs:0,orig:pr65418-1.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47269, exec speed = 1275955 us, hash = 7d58fdebe27b3238
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000937,time:0,execs:0,orig:pr66187.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000937,time:0,execs:0,orig:pr66187.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000938,time:0,execs:0,orig:pr66556.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47263, exec speed = 1274079 us, hash = fe4f8e2dd7fdf3c7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000939,time:0,execs:0,orig:pr66757.txt'...
    len = 73, map size = 47429, exec speed = 1955713 us, hash = 5e83092d58897b96
Results of dry-run 0[*] Attempting dry run with 'id:000940,time:0,execs:0,orig:pr66940.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000940,time:0,execs:0,orig:pr66940.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000941,time:0,execs:0,orig:pr67037.txt'...
    len = 49, map size = 47266, exec speed = 1283582 us, hash = c818079219d9165f
Results of dry-run 0[*] Attempting dry run with 'id:000942,time:0,execs:0,orig:pr67226.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47272, exec speed = 1302105 us, hash = f8c22a37c47286c1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000943,time:0,execs:0,orig:pr67714.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1395902 us, hash = 4be547c6f81e18c8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000944,time:0,execs:0,orig:pr67781.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47272, exec speed = 1274636 us, hash = f10482e18fc8e139
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000945,time:0,execs:0,orig:pr67929_1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000945,time:0,execs:0,orig:pr67929_1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000946,time:0,execs:0,orig:pr68143_1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000946,time:0,execs:0,orig:pr68143_1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000947,time:0,execs:0,orig:pr68185.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47274, exec speed = 1341609 us, hash = 50c03de12dbc6149
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000948,time:0,execs:0,orig:pr68249.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47301, exec speed = 1301362 us, hash = 8a45f7890d09a1df
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000949,time:0,execs:0,orig:pr68250.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000949,time:0,execs:0,orig:pr68250.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000950,time:0,execs:0,orig:pr68321.txt'...
    len = 61, map size = 47424, exec speed = 1952685 us, hash = 1fcbc026315376bf
Results of dry-run 0[*] Attempting dry run with 'id:000951,time:0,execs:0,orig:pr68328.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47264, exec speed = 1424072 us, hash = ef1a566db839d7f8
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000952,time:0,execs:0,orig:pr68376-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47270, exec speed = 1461192 us, hash = 8bd41b9f505672f5
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000953,time:0,execs:0,orig:pr68381.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47278, exec speed = 1289186 us, hash = e0709a8cd592848d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000954,time:0,execs:0,orig:pr68506.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1279522 us, hash = 0f0892fe04e643ee
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000955,time:0,execs:0,orig:pr68532.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000955,time:0,execs:0,orig:pr68532.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000956,time:0,execs:0,orig:pr68624.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000956,time:0,execs:0,orig:pr68624.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000957,time:0,execs:0,orig:pr68648.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000957,time:0,execs:0,orig:pr68648.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000958,time:0,execs:0,orig:pr68841.txt'...
    len = 45, map size = 37885, exec speed = 281456 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000959,time:0,execs:0,orig:pr68911.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47261, exec speed = 1263977 us, hash = 2aab740c55ede9c0
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000960,time:0,execs:0,orig:pr69097-1.txt'...
    len = 51, map size = 47282, exec speed = 1265170 us, hash = 54d7b7ffcb3c5a47
Results of dry-run 0[*] Attempting dry run with 'id:000961,time:0,execs:0,orig:pr69097-2.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47272, exec speed = 1274527 us, hash = 4f33fb15f6e34a1f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000962,time:0,execs:0,orig:pr69320-1.txt'...
    len = 51, map size = 47269, exec speed = 1442925 us, hash = b2f8cf2d8c8bb12a
Results of dry-run 0[*] Attempting dry run with 'id:000963,time:0,execs:0,orig:pr69320-2.txt'...
    len = 57, map size = 47269, exec speed = 1273455 us, hash = da01483455ad3d4a
Results of dry-run 0[*] Attempting dry run with 'id:000964,time:0,execs:0,orig:pr69320-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000964,time:0,execs:0,orig:pr69320-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000965,time:0,execs:0,orig:pr69320-4.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000965,time:0,execs:0,orig:pr69320-4.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000966,time:0,execs:0,orig:pr69403.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47273, exec speed = 1276550 us, hash = 9af376a29698b8ef
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000967,time:0,execs:0,orig:pr69691.txt'...
    len = 49, map size = 47264, exec speed = 1322079 us, hash = a4ffdf77698f7963
Results of dry-run 0[*] Attempting dry run with 'id:000968,time:0,execs:0,orig:pr70005.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47263, exec speed = 1655592 us, hash = 2ed766e1879af610
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000969,time:0,execs:0,orig:pr70127.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47282, exec speed = 1273548 us, hash = 09dd609b9ea74ec7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000970,time:0,execs:0,orig:pr70222-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000970,time:0,execs:0,orig:pr70222-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000971,time:0,execs:0,orig:pr70429.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000971,time:0,execs:0,orig:pr70429.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000972,time:0,execs:0,orig:pr70460.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000972,time:0,execs:0,orig:pr70460.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000973,time:0,execs:0,orig:pr71335.txt'...
    len = 51, map size = 47279, exec speed = 1429900 us, hash = 52bd5224ec56db56
Results of dry-run 0[*] Attempting dry run with 'id:000974,time:0,execs:0,orig:pr71494.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47258, exec speed = 1373148 us, hash = ad50789de4f706fc
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000975,time:0,execs:0,orig:pr71550.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47262, exec speed = 1276755 us, hash = f75226b7f86baa30
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000976,time:0,execs:0,orig:pr71554.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1277229 us, hash = 8ee30fcbdfd2d9ec
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000977,time:0,execs:0,orig:pr71700.txt'...
    len = 49, map size = 47265, exec speed = 1272522 us, hash = 34a9cc6f732f65fd
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000978,time:0,execs:0,orig:pr7284-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000978,time:0,execs:0,orig:pr7284-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000979,time:0,execs:0,orig:pr77766.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47271, exec speed = 1269797 us, hash = 9b5588304fb2f6aa
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000980,time:0,execs:0,orig:pr77767.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000980,time:0,execs:0,orig:pr77767.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000981,time:0,execs:0,orig:pr78378.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000981,time:0,execs:0,orig:pr78378.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000982,time:0,execs:0,orig:pr78436.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47273, exec speed = 1341711 us, hash = 27851743150ba0a9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000983,time:0,execs:0,orig:pr78477.txt'...
    len = 49, map size = 47274, exec speed = 1290448 us, hash = 8a6c4251219a78a2
Results of dry-run 0[*] Attempting dry run with 'id:000984,time:0,execs:0,orig:pr78586.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000984,time:0,execs:0,orig:pr78586.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000985,time:0,execs:0,orig:pr78617.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47280, exec speed = 1374067 us, hash = af951db6ee851d4d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000986,time:0,execs:0,orig:pr78622.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000986,time:0,execs:0,orig:pr78622.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000987,time:0,execs:0,orig:pr78856.txt'...
    len = 61, map size = 47431, exec speed = 1963928 us, hash = d081a0a122bd4f69
Results of dry-run 0[*] Attempting dry run with 'id:000988,time:0,execs:0,orig:pr79121.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47272, exec speed = 1274808 us, hash = af5e52093857ccc1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000989,time:0,execs:0,orig:pr79286.txt'...
    len = 49, map size = 47444, exec speed = 1960887 us, hash = 9b756106142943a9
Results of dry-run 0[*] Attempting dry run with 'id:000990,time:0,execs:0,orig:pr79327.txt'...
    len = 49, map size = 47291, exec speed = 1332982 us, hash = c2e03adad5f21838
Results of dry-run 0[*] Attempting dry run with 'id:000991,time:0,execs:0,orig:pr79354.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47290, exec speed = 1283738 us, hash = 5501da6669291e3a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000992,time:0,execs:0,orig:pr79388.txt'...
    len = 49, map size = 47265, exec speed = 1274458 us, hash = f2be3ff8996101ea
Results of dry-run 0[*] Attempting dry run with 'id:000993,time:0,execs:0,orig:pr79450.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000993,time:0,execs:0,orig:pr79450.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000994,time:0,execs:0,orig:pr79737-1.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47274, exec speed = 1295412 us, hash = 7d8f91c0fb372a4e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000995,time:0,execs:0,orig:pr79737-2.txt'...
    len = 61, map size = 47271, exec speed = 1283917 us, hash = 83ad2fe52ebeb062
Results of dry-run 0[*] Attempting dry run with 'id:000996,time:0,execs:0,orig:pr80153.txt'...
    len = 73, map size = 47431, exec speed = 1959695 us, hash = ee819ee9d59b5bdc
Results of dry-run 0[*] Attempting dry run with 'id:000997,time:0,execs:0,orig:pr81281.txt'...
    len = 49, map size = 47265, exec speed = 1276386 us, hash = e171d13f8f3c942e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000998,time:0,execs:0,orig:pr81503.txt'...
    len = 53, map size = 47267, exec speed = 1270522 us, hash = bc4fa23a9fccc7f5
Results of dry-run 0[*] Attempting dry run with 'id:000999,time:0,execs:0,orig:pr81555.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000999,time:0,execs:0,orig:pr81555.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001000,time:0,execs:0,orig:pr81556.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001000,time:0,execs:0,orig:pr81556.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001001,time:0,execs:0,orig:pr81588.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47432, exec speed = 2168806 us, hash = 3d29108a6f81139a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001002,time:0,execs:0,orig:pr81913.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47420, exec speed = 1999205 us, hash = a45a8d01caeefa31
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001003,time:0,execs:0,orig:pr82954.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001003,time:0,execs:0,orig:pr82954.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001004,time:0,execs:0,orig:pr83269.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001004,time:0,execs:0,orig:pr83269.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001005,time:0,execs:0,orig:pr83298.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001005,time:0,execs:0,orig:pr83298.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001006,time:0,execs:0,orig:pr83477.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001006,time:0,execs:0,orig:pr83477.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001007,time:0,execs:0,orig:pr84169.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001007,time:0,execs:0,orig:pr84169.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001008,time:0,execs:0,orig:pr85156.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001008,time:0,execs:0,orig:pr85156.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001009,time:0,execs:0,orig:pr85169.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001009,time:0,execs:0,orig:pr85169.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001010,time:0,execs:0,orig:pr85529-1.txt'...
    len = 51, map size = 47265, exec speed = 1271345 us, hash = 30e939fa7ab61e7f
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001011,time:0,execs:0,orig:pr85582-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47268, exec speed = 1269542 us, hash = d187615f720e9be4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001012,time:0,execs:0,orig:pr85582-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001012,time:0,execs:0,orig:pr85582-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001013,time:0,execs:0,orig:pr85756.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47271, exec speed = 1398463 us, hash = f0ca0948579c7f9d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001014,time:0,execs:0,orig:pr86231.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001014,time:0,execs:0,orig:pr86231.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001015,time:0,execs:0,orig:pr86492.txt'...
    len = 49, map size = 47265, exec speed = 1273454 us, hash = debea68e8167ee4b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001016,time:0,execs:0,orig:pr86528.txt'...
    len = 61, map size = 47425, exec speed = 1988866 us, hash = 802669a1a1999109
Results of dry-run 0[*] Attempting dry run with 'id:001017,time:0,execs:0,orig:pr86714.txt'...
    len = 49, map size = 47264, exec speed = 1281529 us, hash = de55251d63fe5f22
Results of dry-run 0[*] Attempting dry run with 'id:001018,time:0,execs:0,orig:pr86844.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001018,time:0,execs:0,orig:pr86844.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001019,time:0,execs:0,orig:pr87053.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001019,time:0,execs:0,orig:pr87053.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001020,time:0,execs:0,orig:pr87290.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47269, exec speed = 1611090 us, hash = 27711b7156214527
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001021,time:0,execs:0,orig:pr87623.txt'...
    len = 49, map size = 47266, exec speed = 1277081 us, hash = eee1f71748f817b8
Results of dry-run 0[*] Attempting dry run with 'id:001022,time:0,execs:0,orig:pr88693.txt'...
    len = 71, map size = 47426, exec speed = 1968574 us, hash = c1e2defcbabcaadc
Results of dry-run 0[*] Attempting dry run with 'id:001023,time:0,execs:0,orig:pr89826.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001023,time:0,execs:0,orig:pr89826.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001024,time:0,execs:0,orig:pr90025.txt'...
    len = 49, map size = 47269, exec speed = 1285824 us, hash = 16585359f7041671
Results of dry-run 0[*] Attempting dry run with 'id:001025,time:0,execs:0,orig:pr90949.txt'...
    len = 51, map size = 47425, exec speed = 1951804 us, hash = 29be4b1370019c19
Results of dry-run 0[*] Attempting dry run with 'id:001026,time:0,execs:0,orig:pr91137.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47273, exec speed = 15815428 us, hash = cebdad6a1576bb5a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001027,time:0,execs:0,orig:printf-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001027,time:0,execs:0,orig:printf-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001028,time:0,execs:0,orig:product_numbers.txt'...
[!] WARNING: instability detected during calibration
    len = 63, map size = 47551, exec speed = 1959550 us, hash = 7f4d3b41e585f4ed
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001029,time:0,execs:0,orig:product_numbers_program.txt'...
    len = 71, map size = 47567, exec speed = 1962668 us, hash = c90c96276fb1a572
Results of dry-run 0[*] Attempting dry run with 'id:001030,time:0,execs:0,orig:pta-field-2.txt'...
    len = 55, map size = 47267, exec speed = 1289071 us, hash = 1aaf8cf66dccfd4e
Results of dry-run 0[*] Attempting dry run with 'id:001031,time:0,execs:0,orig:pure-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47265, exec speed = 1272955 us, hash = 968cc9486cb4eed3
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001032,time:0,execs:0,orig:restrict-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001032,time:0,execs:0,orig:restrict-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001033,time:0,execs:0,orig:scal-to-vec3.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47261, exec speed = 1267928 us, hash = 070a166eea5f08fe
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001034,time:0,execs:0,orig:scope-1.txt'...
    len = 49, map size = 47260, exec speed = 1274422 us, hash = 8bc55a8ca417b844
Results of dry-run 0[*] Attempting dry run with 'id:001035,time:0,execs:0,orig:shiftdi.txt'...
    len = 49, map size = 47263, exec speed = 1271695 us, hash = 7f2a311c5d03e2c5
Results of dry-run 0[*] Attempting dry run with 'id:001036,time:0,execs:0,orig:shiftopt-1.txt'...
    len = 54, map size = 47428, exec speed = 1946485 us, hash = 9d263843b282d720
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001037,time:0,execs:0,orig:simd-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001037,time:0,execs:0,orig:simd-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001038,time:0,execs:0,orig:simd-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001038,time:0,execs:0,orig:simd-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001039,time:0,execs:0,orig:simd-5.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47425, exec speed = 1957455 us, hash = d5c25acdd44dae60
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001040,time:0,execs:0,orig:simd-6.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001040,time:0,execs:0,orig:simd-6.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001041,time:0,execs:0,orig:square_program1.txt'...
    len = 57, map size = 47447, exec speed = 1956194 us, hash = 20dace5a8fb231f5
Results of dry-run 0[*] Attempting dry run with 'id:001042,time:0,execs:0,orig:ssad-run.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47341, exec speed = 1399112 us, hash = d6957e6ec394f37a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001043,time:0,execs:0,orig:stdarg-3.txt'...
    len = 46, map size = 37885, exec speed = 301784 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001044,time:0,execs:0,orig:stdarg-4.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47432, exec speed = 2122712 us, hash = f4eeba81894cfba1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001045,time:0,execs:0,orig:strcpy-2.txt'...
[!] WARNING: instability detected during calibration
    len = 72, map size = 47424, exec speed = 2032242 us, hash = 2dd8c2a5d56349d5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001046,time:0,execs:0,orig:strct-pack-2.txt'...
    len = 54, map size = 47265, exec speed = 1276578 us, hash = 5517a5a84057293d
Results of dry-run 0[*] Attempting dry run with 'id:001047,time:0,execs:0,orig:strct-pack-3.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47273, exec speed = 1287177 us, hash = 0b9b0abf5a399bf6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001048,time:0,execs:0,orig:strct-varg-1.txt'...
    len = 35, map size = 37885, exec speed = 284267 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001049,time:0,execs:0,orig:string-opt-17.txt'...
    len = 55, map size = 47278, exec speed = 1301504 us, hash = 11776c06ed731724
Results of dry-run 0[*] Attempting dry run with 'id:001050,time:0,execs:0,orig:string-opt-18.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001050,time:0,execs:0,orig:string-opt-18.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001051,time:0,execs:0,orig:struct-aliasing-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001051,time:0,execs:0,orig:struct-aliasing-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001052,time:0,execs:0,orig:struct-cpy-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47267, exec speed = 1282668 us, hash = 3b5776db3ace3b40
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001053,time:0,execs:0,orig:struct-ini-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001053,time:0,execs:0,orig:struct-ini-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001054,time:0,execs:0,orig:struct-ret-2.txt'...
    len = 54, map size = 47266, exec speed = 1265370 us, hash = f024be82cfa00b06
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001055,time:0,execs:0,orig:subtract_numbers_program1.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47452, exec speed = 1949163 us, hash = 93f307f2dc36757b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001056,time:0,execs:0,orig:sum_numbers_program.txt'...
[!] WARNING: instability detected during calibration
    len = 63, map size = 47444, exec speed = 1941389 us, hash = e6a0f22163e2ad43
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001057,time:0,execs:0,orig:sumarray.txt'...
    len = 50, map size = 47457, exec speed = 1960333 us, hash = f3b103c3fc589d94
Results of dry-run 0[*] Attempting dry run with 'id:001058,time:0,execs:0,orig:sumarray2d.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47451, exec speed = 1967877 us, hash = d4c5a2ecc7ffad5b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001059,time:0,execs:0,orig:sumarraymalloc.txt'...
    len = 56, map size = 47447, exec speed = 1975620 us, hash = 3022168daabf9051
Results of dry-run 0[*] Attempting dry run with 'id:001060,time:0,execs:0,orig:switch-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001060,time:0,execs:0,orig:switch-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001061,time:0,execs:0,orig:t.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47443, exec speed = 1940846 us, hash = 9d00ef4b9ca5e669
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001062,time:0,execs:0,orig:test_indvars.txt'...
    len = 50, map size = 37885, exec speed = 284070 us, hash = f17d235f78d98289
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001063,time:0,execs:0,orig:testcase-Expr-1.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47441, exec speed = 2044232 us, hash = 054da86848192f15
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001064,time:0,execs:0,orig:testcase-ExprConstant-1.txt'...
[!] WARNING: instability detected during calibration
    len = 65, map size = 47431, exec speed = 1945445 us, hash = 6d2e3a46de3b1cb0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001065,time:0,execs:0,orig:testcase-InstCombine-1.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47267, exec speed = 1278764 us, hash = 1ed1894853a746c4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001066,time:0,execs:0,orig:unroll-1.txt'...
    len = 62, map size = 47424, exec speed = 1970702 us, hash = ccb860ad6ae86066
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001067,time:0,execs:0,orig:usmul.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001067,time:0,execs:0,orig:usmul.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001068,time:0,execs:0,orig:va-arg-11.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47261, exec speed = 1291010 us, hash = 76d8b5b4be6e89c1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001069,time:0,execs:0,orig:va-arg-12.txt'...
[!] WARNING: instability detected during calibration
    len = 93, map size = 47433, exec speed = 2215838 us, hash = efc1d04a153262cd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001070,time:0,execs:0,orig:va-arg-14.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001070,time:0,execs:0,orig:va-arg-14.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001071,time:0,execs:0,orig:va-arg-15.txt'...
[!] WARNING: instability detected during calibration
    len = 115, map size = 47430, exec speed = 2064966 us, hash = d11199806bcb0653
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001072,time:0,execs:0,orig:va-arg-17.txt'...
[!] WARNING: instability detected during calibration
    len = 85, map size = 47294, exec speed = 1426680 us, hash = 41c9f4b2998b130b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001073,time:0,execs:0,orig:va-arg-20.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001073,time:0,execs:0,orig:va-arg-20.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001074,time:0,execs:0,orig:va-arg-21.txt'...
    len = 61, map size = 47418, exec speed = 2134104 us, hash = 955ba359318cdf09
Results of dry-run 0[*] Attempting dry run with 'id:001075,time:0,execs:0,orig:va-arg-23.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001075,time:0,execs:0,orig:va-arg-23.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001076,time:0,execs:0,orig:va-arg-24.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47257, exec speed = 1547863 us, hash = 335a653cff4477cf
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001077,time:0,execs:0,orig:vla-dealloc-1.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:001078,time:0,execs:0,orig:vowel_program.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47419, exec speed = 2220641 us, hash = dd0cf7712e1b79c2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001079,time:0,execs:0,orig:vrp-5.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001079,time:0,execs:0,orig:vrp-5.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001080,time:0,execs:0,orig:vrp-6.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001080,time:0,execs:0,orig:vrp-6.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001081,time:0,execs:0,orig:vrp-7.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001081,time:0,execs:0,orig:vrp-7.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001082,time:0,execs:0,orig:widechar-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001082,time:0,execs:0,orig:widechar-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001083,time:0,execs:0,orig:widechar-3.txt'...
[!] WARNING: instability detected during calibration
    len = 74, map size = 47421, exec speed = 2606653 us, hash = db9fc5816f5ef49c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001084,time:0,execs:0,orig:zero-struct-1.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47424, exec speed = 2347381 us, hash = 3739ce4503404119
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001085,time:0,execs:0,orig:zero-struct-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001085,time:0,execs:0,orig:zero-struct-2.txt' results in a crash, skipping
[!] WARNING: Skipped 7 test cases (0.64%) due to timeouts or crashes.
[+] All test cases processed.
[!] WARNING: The target binary is pretty slow! See /usr/local/share/doc/afl/fuzzing_in_depth.md#i-improve-the-speed
[!] WARNING: Some test cases look useless. Consider using a smaller set.
[!] WARNING: You probably have far too many input files! Consider trimming down.
[+] Here are some useful stats:

    Test case count : 77 favored, 425 variable, 399 ignored, 1086 total
       Bitmap range : 37885 to 47759 bits (average: 46808.96 bits)
        Exec timing : 283k to 15.8M us (average: 1.62M us)

[*] -t option specified. We'll use an exec timeout of 99000 ms.
[+] All set and ready to roll!


 american fuzzy lop ++4.08c {default} (...nge-2023/build/X86/gem5.opt) [fast]
┌─ process timing ────────────────────────────────────┬─ overall results ────┐
│        run time : 0 days, 17 hrs, 51 min, 9 sec     │  cycles done : 0     │
│   last new find : 0 days, 0 hrs, 9 min, 48 sec      │ corpus count : 1369  │
│last saved crash : 0 days, 2 hrs, 40 min, 10 sec     │saved crashes : 38    │
│ last saved hang : 0 days, 11 hrs, 54 min, 10 sec    │  saved hangs : 2     │
├─ cycle progress ─────────────────────┬─ map coverage┴──────────────────────┤
│  now processing : 983.0 (71.8%)      │    map density : 72.13% / 74.40%    │
 american fuzzy lop ++4.08c {default} (...nge-2023/build/X86/gem5.opt) [fast]│
┌─ process timing ────────────────────────────────────┬─ overall results ────┐
│        run time : 0 days, 17 hrs, 52 min, 36 sec    │  cycles done : 0     │
│   last new find : 0 days, 0 hrs, 11 min, 15 sec     │ corpus count : 1369  │
│last saved crash : 0 days, 2 hrs, 41 min, 37 sec     │saved crashes : 38    │
│ last saved hang : 0 days, 11 hrs, 55 min, 37 sec    │  saved hangs : 2     │
├─ cycle progress ─────────────────────┬─ map coverage┴──────────────────────┤
│  now processing : 983.0 (71.8%)      │    map density : 72.13% / 74.40%    │
│  runs timed out : 0 (0.00%)          │ count coverage : 2.15 bits/tuple    │
├─ stage progress ─────────────────────┼─ findings in depth ─────────────────┤
│  now trying : cm-gem5.so             │ favored items : 86 (6.28%)          │
│ stage execs : 626/2560 (24.45%)      │  new edges on : 108 (7.89%)         │
│ total execs : 55.4k                  │ total crashes : 2422 (38 saved)     │
│  exec speed : 0.78/sec (zzzz...)     │  total tmouts : 22 (0 saved)        │
├─ fuzzing strategy yields ────────────┴─────────────┬─ item geometry ───────┤
│   bit flips : disabled (custom-mutator-only mode)  │    levels : 4         │
│  byte flips : disabled (custom-mutator-only mode)  │   pending : 926       │
│ arithmetics : disabled (custom-mutator-only mode)  │  pend fav : 45        │
│  known ints : disabled (custom-mutator-only mode)  │ own finds : 283       │
│  dictionary : n/a                                  │  imported : 0         │
│havoc/splice : 0/0, 0/0                             │ stability : 99.98%    │
│py/custom/rq : unused, 314/43.6k, unused, unused    ├───────────────────────┘
│    trim/eff : 1.17%/688, disabled                  │          [cpu000: 37%]
└─ strategy: explore ────────── state: in progress ──┘

















 american fuzzy lop ++4.08c {default} (...nge-2023/build/X86/gem5.opt) [fast]
┌─ process timing ────────────────────────────────────┬─ overall results ────┐
│        run time : 0 days, 18 hrs, 13 min, 14 sec    │  cycles done : 0     │
│   last new find : 0 days, 0 hrs, 10 min, 49 sec     │ corpus count : 1371  │
│last saved crash : 0 days, 3 hrs, 2 min, 15 sec      │saved crashes : 38    │
│ last saved hang : 0 days, 12 hrs, 16 min, 14 sec    │  saved hangs : 2     │
├─ cycle progress ─────────────────────┬─ map coverage┴──────────────────────┤
│  now processing : 983.0 (71.7%)      │    map density : 72.13% / 74.40%    │
│  runs timed out : 0 (0.00%)          │ count coverage : 2.16 bits/tuple    │
├─ stage progress ─────────────────────┼─ findings in depth ─────────────────┤
│  now trying : cm-gem5.so             │ favored items : 86 (6.27%)          │
│ stage execs : 1564/2560 (61.09%)     │  new edges on : 108 (7.88%)         │
│ total execs : 56.4k                  │ total crashes : 2422 (38 saved)     │
│  exec speed : 0.77/sec (zzzz...)     │  total tmouts : 22 (0 saved)        │
├─ fuzzing strategy yields ────────────┴─────────────┬─ item geometry ───────┤
│   bit flips : disabled (custom-mutator-only mode)  │    levels : 4         │
│  byte flips : disabled (custom-mutator-only mode)  │   pending : 928       │
│ arithmetics : disabled (custom-mutator-only mode)  │  pend fav : 45        │
│  known ints : disabled (custom-mutator-only mode)  │ own finds : 285       │
│  dictionary : n/a                                  │  imported : 0         │
│havoc/splice : 0/0, 0/0                             │ stability : 99.98%    │
│py/custom/rq : unused, 314/43.6k, unused, unused    ├───────────────────────┘
│    trim/eff : 1.17%/688, disabled                  │          [cpu000: 25%]
└─ strategy: explore ────────── state: in progress ──┘
