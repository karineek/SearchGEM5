ubuntu@fuzzer-03:~/experiment-6$ more run-afl.sh 
 AFL_DUMB_FORKSRV=1 AFL_CUSTOM_MUTATOR_ONLY=1 AFL_CUSTOM_MUTATOR_LIBRARY="/home/ubuntu/Gem5Testing/src/custom_mutators/cm-gem5.so" /home/ubuntu/AFLplusplus/afl-fuzz -m 50000 -t 99000 -i input -o output -- /home/ubuntu/gem5-ssbse-challen
ge-2023/build/X86/gem5.opt /home/ubuntu/gem5-ssbse-challenge-2023/ssbse-challenge-examples/hello-custom-binary-Ex.py --isa X86 --input @@
ubuntu@fuzzer-03:~/experiment-6$ ./run-afl.sh 
[+] Enabled environment variable AFL_CUSTOM_MUTATOR_LIBRARY with value /home/ubuntu/Gem5Testing/src/custom_mutators/cm-gem5.so
[+] Enabled environment variable AFL_DUMB_FORKSRV with value 1
[+] Enabled environment variable AFL_CUSTOM_MUTATOR_ONLY with value 1
afl-fuzz++4.08c based on afl by Michal Zalewski and a large online community
[+] AFL++ is maintained by Marc "van Hauser" Heuse, Dominik Maier, Andrea Fioraldi and Heiko "hexcoder" Eißfeldt
[+] AFL++ is open source, get it at https://github.com/AFLplusplus/AFLplusplus
[+] NOTE: AFL++ >= v3 has changed defaults and behaviours - see README.md
[+] No -M/-S set, autoconfiguring for "-S default"
[*] Getting to work...
[+] Using exponential power schedule (FAST)
[+] Enabled testcache with 50 MB
[+] Generating fuzz data with a length of min=1 max=1048576
[*] Checking core_pattern...
[!] WARNING: Could not check CPU scaling governor
[+] You have 8 CPU cores and 2 runnable tasks (utilization: 25%).
[+] Try parallel jobs - see /usr/local/share/doc/afl/fuzzing_in_depth.md#c-using-multiple-cores
[*] Setting up output directories...
[*] Checking CPU core loadout...
[+] Found a free CPU core, try binding to #0.
[*] Loading custom mutator library from '/home/ubuntu/Gem5Testing/src/custom_mutators/cm-gem5.so'...
[+] Found 'afl_custom_mutator'.
[*] optional symbol 'afl_custom_fuzz_count' not found.
[*] optional symbol 'afl_custom_post_process' not found.
[*] optional symbol 'afl_custom_init_trim' not found.
[*] optional symbol 'afl_custom_trim' not found.
[*] optional symbol 'afl_custom_post_trim' not found.
[*] optional symbol 'afl_custom_havoc_mutation' not found.
[*] optional symbol 'afl_custom_havoc_mutation_probability' not found.
[*] optional symbol 'afl_custom_queue_get' not found.
[*] optional symbol 'afl_custom_splice_optout' not found.
[*] optional symbol 'afl_custom_fuzz_send' not found.
[*] optional symbol 'afl_custom_queue_new_entry' not found
[*] optional symbol 'afl_custom_describe' not found.
[+] Custom mutator '/home/ubuntu/Gem5Testing/src/custom_mutators/cm-gem5.so' installed successfully.
[*] Scanning 'input'...
[+] Loaded a total of 1086 seeds.
[*] Creating hard links for all input files...
[*] Validating target binary...
[*] Spinning up the fork server...
[+] All right - fork server is up.
[*] Target map size: 65536
[*] No auto-generated dictionary tokens to reuse.
[*] Attempting dry run with 'id:000000,time:0,execs:0,orig:00010.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47460, exec speed = 1990624 us, hash = 49b2633177c5494c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000001,time:0,execs:0,orig:00040.txt'...
    len = 45, map size = 47411, exec speed = 1937015 us, hash = d6653ae53727c3fa
Results of dry-run 0[*] Attempting dry run with 'id:000002,time:0,execs:0,orig:00043.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1338386 us, hash = ff22e8c09b88de64
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000003,time:0,execs:0,orig:00044.txt'...
    len = 45, map size = 47271, exec speed = 1272018 us, hash = bd819c0c1fc25b6a
Results of dry-run 0[*] Attempting dry run with 'id:000004,time:0,execs:0,orig:00045.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1362925 us, hash = bc6efed97d1656aa
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000005,time:0,execs:0,orig:00046.txt'...
    len = 45, map size = 47271, exec speed = 1267045 us, hash = bd819c0c1fc25b6a
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000006,time:0,execs:0,orig:00047.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1360894 us, hash = 5e2cd9f64185d413
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000007,time:0,execs:0,orig:00048.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47266, exec speed = 1271085 us, hash = 6a844bf9e01c42be
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000008,time:0,execs:0,orig:00049.txt'...
    len = 45, map size = 47271, exec speed = 1268079 us, hash = 11163ddd87488a2b
Results of dry-run 0[*] Attempting dry run with 'id:000009,time:0,execs:0,orig:00056.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47438, exec speed = 2326700 us, hash = 0654cac1898e9fdf
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000010,time:0,execs:0,orig:00057.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47266, exec speed = 1407446 us, hash = db5cc4ba312c7fd1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000011,time:0,execs:0,orig:00058.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47256, exec speed = 1269006 us, hash = a884d8c1933c1c6f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000012,time:0,execs:0,orig:00059.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47425, exec speed = 2045166 us, hash = 03d23e162d2f23b2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000013,time:0,execs:0,orig:00061.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1406402 us, hash = 1c62052951fba64b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000014,time:0,execs:0,orig:00062.txt'...
    len = 45, map size = 47271, exec speed = 1268685 us, hash = de247b1516f90b7b
Results of dry-run 0[*] Attempting dry run with 'id:000015,time:0,execs:0,orig:00064.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1268259 us, hash = c39e737fe3273f13
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000016,time:0,execs:0,orig:00065.txt'...
    len = 49, map size = 47266, exec speed = 1275890 us, hash = a333fc324b6f54a5
Results of dry-run 0[*] Attempting dry run with 'id:000017,time:0,execs:0,orig:00067.txt'...
    len = 45, map size = 47271, exec speed = 1268117 us, hash = 1c62052951fba64b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000018,time:0,execs:0,orig:00068.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1265218 us, hash = 1c62052951fba64b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000019,time:0,execs:0,orig:00070.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1266143 us, hash = de247b1516f90b7b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000020,time:0,execs:0,orig:00073.txt'...
    len = 45, map size = 47271, exec speed = 1271175 us, hash = 084764b759b4a1d6
Results of dry-run 0[*] Attempting dry run with 'id:000021,time:0,execs:0,orig:00074.txt'...
    len = 45, map size = 47438, exec speed = 1949138 us, hash = 12c8847eddf27161
Results of dry-run 0[*] Attempting dry run with 'id:000022,time:0,execs:0,orig:00075.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1266348 us, hash = 11163ddd87488a2b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000023,time:0,execs:0,orig:00076.txt'...
    len = 45, map size = 47271, exec speed = 1266637 us, hash = a793b592e76bd0f3
Results of dry-run 0[*] Attempting dry run with 'id:000024,time:0,execs:0,orig:00077.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1268642 us, hash = 7b9defd905d320d3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000025,time:0,execs:0,orig:00079.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1265942 us, hash = 09aa25e3e18a6212
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000026,time:0,execs:0,orig:00081.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1369611 us, hash = 09aa25e3e18a6212
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000027,time:0,execs:0,orig:00083.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47272, exec speed = 1610982 us, hash = 5e4ba5b2834de17e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000028,time:0,execs:0,orig:00084.txt'...
    len = 51, map size = 47261, exec speed = 1276634 us, hash = d3f225d95204815b
Results of dry-run 0[*] Attempting dry run with 'id:000029,time:0,execs:0,orig:00085.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1279444 us, hash = 0afa1fbeaace30ed
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000030,time:0,execs:0,orig:00087.txt'...
    len = 57, map size = 47425, exec speed = 1951867 us, hash = eae66245ca198b1d
Results of dry-run 0[*] Attempting dry run with 'id:000031,time:0,execs:0,orig:00089.txt'...
    len = 45, map size = 47272, exec speed = 1267440 us, hash = fd6a199a033e1638
Results of dry-run 0[*] Attempting dry run with 'id:000032,time:0,execs:0,orig:00090.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47266, exec speed = 1272478 us, hash = f4f9a57c3ca59541
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000033,time:0,execs:0,orig:00091.txt'...
    len = 49, map size = 47425, exec speed = 1958772 us, hash = 673e9f236dd24b99
Results of dry-run 0[*] Attempting dry run with 'id:000034,time:0,execs:0,orig:00093.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47425, exec speed = 1955445 us, hash = 954ade63982b7aa2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000035,time:0,execs:0,orig:00094.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1268321 us, hash = 1c62052951fba64b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000036,time:0,execs:0,orig:00095.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1270098 us, hash = 57eae1d13cfb1799
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000037,time:0,execs:0,orig:00098.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1267786 us, hash = 1c62052951fba64b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000038,time:0,execs:0,orig:00099.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1272990 us, hash = 1c62052951fba64b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000039,time:0,execs:0,orig:00100.txt'...
    len = 57, map size = 47425, exec speed = 1952493 us, hash = eae66245ca198b1d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000040,time:0,execs:0,orig:00101.txt'...
    len = 45, map size = 47271, exec speed = 1269797 us, hash = 1c62052951fba64b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000041,time:0,execs:0,orig:00102.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1270650 us, hash = 2ce261806ee1bd1e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000042,time:0,execs:0,orig:00103.txt'...
    len = 45, map size = 47271, exec speed = 1273476 us, hash = 1c62052951fba64b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000043,time:0,execs:0,orig:00104.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1276005 us, hash = 09aa25e3e18a6212
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000044,time:0,execs:0,orig:00105.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1360874 us, hash = 11163ddd87488a2b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000045,time:0,execs:0,orig:00106.txt'...
    len = 45, map size = 47271, exec speed = 1270244 us, hash = 11163ddd87488a2b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000046,time:0,execs:0,orig:00107.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1793359 us, hash = 204cc59e7682ecba
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000047,time:0,execs:0,orig:00109.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47266, exec speed = 1272089 us, hash = 0fcf7905a6a00e2d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000048,time:0,execs:0,orig:00110.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1476920 us, hash = 3fd6d5d58d36a90f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000049,time:0,execs:0,orig:00111.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47271, exec speed = 1268661 us, hash = 7c5c1fa182c0b04c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000050,time:0,execs:0,orig:00112.txt'...
    len = 45, map size = 47271, exec speed = 1264840 us, hash = 09aa25e3e18a6212
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000051,time:0,execs:0,orig:00113.txt'...
    len = 69, map size = 47422, exec speed = 1965861 us, hash = d9451e456003e203
Results of dry-run 0[*] Attempting dry run with 'id:000052,time:0,execs:0,orig:00114.txt'...
    len = 45, map size = 47270, exec speed = 1270082 us, hash = 646ca5fe2391a50c
Results of dry-run 0[*] Attempting dry run with 'id:000053,time:0,execs:0,orig:00115.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1358523 us, hash = 1c39befcbf38d743
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000054,time:0,execs:0,orig:00116.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1266281 us, hash = fb405fcfb5fcc3bd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000055,time:0,execs:0,orig:00117.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47266, exec speed = 1360682 us, hash = e1e487cba0d2943f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000056,time:0,execs:0,orig:00118.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1333656 us, hash = e758878ce598d3e2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000057,time:0,execs:0,orig:00119.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47289, exec speed = 1271050 us, hash = 89f75d9b0a0d5a4e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000058,time:0,execs:0,orig:00120.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1266352 us, hash = 0306f1a8d79e5130
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000059,time:0,execs:0,orig:00121.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47272, exec speed = 1266646 us, hash = a8d62acd0d5deec3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000060,time:0,execs:0,orig:00122.txt'...
    len = 45, map size = 47271, exec speed = 1268753 us, hash = 1c62052951fba64b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000061,time:0,execs:0,orig:00123.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47289, exec speed = 1274605 us, hash = 89f75d9b0a0d5a4e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000062,time:0,execs:0,orig:00124.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47267, exec speed = 1266964 us, hash = 0d2b6189f618fff7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000063,time:0,execs:0,orig:00126.txt'...
    len = 45, map size = 47271, exec speed = 1445185 us, hash = 09aa25e3e18a6212
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000064,time:0,execs:0,orig:00127.txt'...
    len = 45, map size = 47271, exec speed = 1265283 us, hash = b5e8f07d0ff570ab
Results of dry-run 0[*] Attempting dry run with 'id:000065,time:0,execs:0,orig:00128.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1267433 us, hash = 11163ddd87488a2b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000066,time:0,execs:0,orig:00129.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1387432 us, hash = 07ba28687920d851
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000067,time:0,execs:0,orig:00131.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47425, exec speed = 2067830 us, hash = 64af320e9957df83
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000068,time:0,execs:0,orig:00133.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47272, exec speed = 1386067 us, hash = d495627c47df3b88
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000069,time:0,execs:0,orig:00134.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47270, exec speed = 1374254 us, hash = 85cff75bb6846eaf
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000070,time:0,execs:0,orig:00135.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47270, exec speed = 1269888 us, hash = 85cff75bb6846eaf
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000071,time:0,execs:0,orig:00136.txt'...
    len = 45, map size = 47271, exec speed = 1273896 us, hash = b780177010c5e42a
Results of dry-run 0[*] Attempting dry run with 'id:000072,time:0,execs:0,orig:00137.txt'...
    len = 57, map size = 47425, exec speed = 2112306 us, hash = 7a50aa4d53df7023
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000073,time:0,execs:0,orig:00138.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47256, exec speed = 1362365 us, hash = d458ba3a6f747950
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000074,time:0,execs:0,orig:00142.txt'...
    len = 45, map size = 47271, exec speed = 1271467 us, hash = e4ab759d88a6e49c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000075,time:0,execs:0,orig:00143.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47281, exec speed = 1374595 us, hash = 70df0cd81bfa17b3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000076,time:0,execs:0,orig:00144.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1453665 us, hash = 11163ddd87488a2b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000077,time:0,execs:0,orig:00145.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47270, exec speed = 1363039 us, hash = 646ca5fe2391a50c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000078,time:0,execs:0,orig:00146.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47266, exec speed = 1465924 us, hash = dc844b04bb3bc2a8
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000079,time:0,execs:0,orig:00148.txt'...
    len = 45, map size = 47271, exec speed = 1427888 us, hash = be4035642cab4ecc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000080,time:0,execs:0,orig:00149.txt'...
    len = 47, map size = 47272, exec speed = 1480659 us, hash = 41ec817247b990fd
Results of dry-run 0[*] Attempting dry run with 'id:000081,time:0,execs:0,orig:00151.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1366152 us, hash = 11163ddd87488a2b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000082,time:0,execs:0,orig:00153.txt'...
    len = 47, map size = 47266, exec speed = 1271269 us, hash = cdaca4599f4fc73d
Results of dry-run 0[*] Attempting dry run with 'id:000083,time:0,execs:0,orig:00154.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47450, exec speed = 2412242 us, hash = d482f9c3136bd1ce
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000084,time:0,execs:0,orig:00155.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47270, exec speed = 1267504 us, hash = 646ca5fe2391a50c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000085,time:0,execs:0,orig:00156.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47444, exec speed = 2029156 us, hash = a510d1a84d9fd6a0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000086,time:0,execs:0,orig:00158.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47451, exec speed = 2055072 us, hash = 60aa9e59c8ac8e57
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000087,time:0,execs:0,orig:00159.txt'...
    len = 45, map size = 47457, exec speed = 1973088 us, hash = ef9daec2dd2c7f90
Results of dry-run 0[*] Attempting dry run with 'id:000088,time:0,execs:0,orig:00160.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47450, exec speed = 2039486 us, hash = 153329f9747c92cb
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000089,time:0,execs:0,orig:00161.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47444, exec speed = 2020669 us, hash = 49b3c8f9d549f497
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000090,time:0,execs:0,orig:00163.txt'...
    len = 45, map size = 47451, exec speed = 2004534 us, hash = f5d555af9f9bd81f
Results of dry-run 0[*] Attempting dry run with 'id:000091,time:0,execs:0,orig:00164.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000091,time:0,execs:0,orig:00164.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000092,time:0,execs:0,orig:00165.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47444, exec speed = 2118355 us, hash = bd97237ae7bb732e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000093,time:0,execs:0,orig:00166.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47438, exec speed = 2199127 us, hash = 7f2d3e94a8cb2f6a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000094,time:0,execs:0,orig:00167.txt'...
    len = 47, map size = 47423, exec speed = 1954995 us, hash = 9c5ee7742f5df3ff
Results of dry-run 0[*] Attempting dry run with 'id:000095,time:0,execs:0,orig:00168.txt'...
    len = 45, map size = 47271, exec speed = 1553966 us, hash = 6856186a606e152b
Results of dry-run 0[*] Attempting dry run with 'id:000096,time:0,execs:0,orig:00170.txt'...
    len = 57, map size = 47431, exec speed = 1954900 us, hash = 6926fe80c60c3681
Results of dry-run 0[*] Attempting dry run with 'id:000097,time:0,execs:0,orig:00171.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47453, exec speed = 1960526 us, hash = 815540756af88183
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000098,time:0,execs:0,orig:00172.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47455, exec speed = 2114268 us, hash = 3846a5d08a96c24c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000099,time:0,execs:0,orig:00173.txt'...
    len = 45, map size = 47452, exec speed = 2033524 us, hash = 3b63cdccc0171d7e
Results of dry-run 0[*] Attempting dry run with 'id:000100,time:0,execs:0,orig:00175.txt'...
[!] WARNING: instability detected during calibration
    len = 61, map size = 47763, exec speed = 2171339 us, hash = 1417f0e1671bc6df
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000101,time:0,execs:0,orig:00176.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47435, exec speed = 2272451 us, hash = 6a9ff19fbd8c4517
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000102,time:0,execs:0,orig:00177.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47449, exec speed = 2086787 us, hash = ba89d86900f0cf78
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000103,time:0,execs:0,orig:00178.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47444, exec speed = 1962229 us, hash = 4c672414a9e5c1d0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000104,time:0,execs:0,orig:00179.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000104,time:0,execs:0,orig:00179.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000105,time:0,execs:0,orig:00180.txt'...
    len = 45, map size = 47422, exec speed = 1948562 us, hash = ef300cad1eb15070
Results of dry-run 0[*] Attempting dry run with 'id:000106,time:0,execs:0,orig:00181.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47459, exec speed = 3610831 us, hash = 5d00b89a6b670e3c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000107,time:0,execs:0,orig:00183.txt'...
    len = 45, map size = 47271, exec speed = 1265108 us, hash = f9a91019422d01b1
Results of dry-run 0[*] Attempting dry run with 'id:000108,time:0,execs:0,orig:00184.txt'...
    len = 47, map size = 47441, exec speed = 1960166 us, hash = fc761e98bb1baab6
Results of dry-run 0[*] Attempting dry run with 'id:000109,time:0,execs:0,orig:00186.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47270, exec speed = 1283145 us, hash = ea5c593a2537b0cb
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000110,time:0,execs:0,orig:00187.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47490, exec speed = 2387156 us, hash = db70c5f087735d58
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000111,time:0,execs:0,orig:00189.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47460, exec speed = 1969044 us, hash = 6d99f755e8d9eb31
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000112,time:0,execs:0,orig:00190.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47425, exec speed = 1951051 us, hash = 95982e75246d9c35
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000113,time:0,execs:0,orig:00191.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47425, exec speed = 1953379 us, hash = f10c393a20c55212
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000114,time:0,execs:0,orig:00192.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47446, exec speed = 2016361 us, hash = 9a54c9713666f576
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000115,time:0,execs:0,orig:00193.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47423, exec speed = 1947222 us, hash = 8819bf100ee46eb5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000116,time:0,execs:0,orig:00194.txt'...
    len = 45, map size = 47447, exec speed = 2132413 us, hash = cf2109333062ac00
Results of dry-run 0[*] Attempting dry run with 'id:000117,time:0,execs:0,orig:00195.txt'...
    len = 45, map size = 47706, exec speed = 2006527 us, hash = 070edf6a0377442d
Results of dry-run 0[*] Attempting dry run with 'id:000118,time:0,execs:0,orig:00197.txt'...
    len = 45, map size = 47444, exec speed = 2004384 us, hash = f07a78850035330a
Results of dry-run 0[*] Attempting dry run with 'id:000119,time:0,execs:0,orig:00201.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47448, exec speed = 1948090 us, hash = fac36b3bbe020353
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000120,time:0,execs:0,orig:00202.txt'...
    len = 45, map size = 47452, exec speed = 1958558 us, hash = 876b378e0f318863
Results of dry-run 0[*] Attempting dry run with 'id:000121,time:0,execs:0,orig:00203.txt'...
    len = 45, map size = 47427, exec speed = 1971408 us, hash = 2b16c0c6ec33776d
Results of dry-run 0[*] Attempting dry run with 'id:000122,time:0,execs:0,orig:00209.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47272, exec speed = 1274339 us, hash = 67074d24fe1a2c6b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000123,time:0,execs:0,orig:00211.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47443, exec speed = 1950932 us, hash = abf9a612340d9f35
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000124,time:0,execs:0,orig:00212.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47423, exec speed = 1956332 us, hash = fc2cc3d14d50077f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000125,time:0,execs:0,orig:00217.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47422, exec speed = 1958120 us, hash = 7a9de8ba140845d7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000126,time:0,execs:0,orig:00220.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47455, exec speed = 2111885 us, hash = e7b0dcc7c749b39d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000127,time:0,execs:0,orig:20000112-1.txt'...
[!] WARNING: instability detected during calibration
    len = 72, map size = 47424, exec speed = 1966733 us, hash = 1ad72a7b68d54d05
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000128,time:0,execs:0,orig:20000113-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000128,time:0,execs:0,orig:20000113-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000129,time:0,execs:0,orig:20000121-1.txt'...
    len = 54, map size = 47267, exec speed = 1272506 us, hash = 2781e5bcff5ec7a6
Results of dry-run 0[*] Attempting dry run with 'id:000130,time:0,execs:0,orig:20000205-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1281900 us, hash = 3b695c415883d51c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000131,time:0,execs:0,orig:20000217-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000131,time:0,execs:0,orig:20000217-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000132,time:0,execs:0,orig:20000224-1.txt'...
    len = 50, map size = 47260, exec speed = 1277668 us, hash = 6e1e2c9a1bff622b
Results of dry-run 0[*] Attempting dry run with 'id:000133,time:0,execs:0,orig:20000227-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000133,time:0,execs:0,orig:20000227-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000134,time:0,execs:0,orig:20000313-1.txt'...
    len = 50, map size = 47264, exec speed = 1279189 us, hash = 5df746fafaa2869b
Results of dry-run 0[*] Attempting dry run with 'id:000135,time:0,execs:0,orig:20000314-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1279968 us, hash = ebf5074410b8dc5d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000136,time:0,execs:0,orig:20000314-2.txt'...
    len = 62, map size = 47423, exec speed = 1960191 us, hash = 83215f883c43f715
Results of dry-run 0[*] Attempting dry run with 'id:000137,time:0,execs:0,orig:20000314-3.txt'...
[!] WARNING: instability detected during calibration
    len = 84, map size = 47424, exec speed = 1964714 us, hash = a161a2c58c26c909
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000138,time:0,execs:0,orig:20000402-1.txt'...
    len = 52, map size = 47260, exec speed = 1267553 us, hash = 973b552535dd4e43
Results of dry-run 0[*] Attempting dry run with 'id:000139,time:0,execs:0,orig:20000403-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47432, exec speed = 1975529 us, hash = f6efdcbac33999c8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000140,time:0,execs:0,orig:20000412-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000140,time:0,execs:0,orig:20000412-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000141,time:0,execs:0,orig:20000412-2.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1474268 us, hash = e5fb694efe4a3250
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000142,time:0,execs:0,orig:20000412-4.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000142,time:0,execs:0,orig:20000412-4.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000143,time:0,execs:0,orig:20000412-5.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000143,time:0,execs:0,orig:20000412-5.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000144,time:0,execs:0,orig:20000412-6.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000144,time:0,execs:0,orig:20000412-6.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000145,time:0,execs:0,orig:20000419-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000145,time:0,execs:0,orig:20000419-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000146,time:0,execs:0,orig:20000422-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000146,time:0,execs:0,orig:20000422-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000147,time:0,execs:0,orig:20000503-1.txt'...
    len = 50, map size = 47261, exec speed = 1290692 us, hash = 88865328926c2ea8
Results of dry-run 0[*] Attempting dry run with 'id:000148,time:0,execs:0,orig:20000511-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000148,time:0,execs:0,orig:20000511-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000149,time:0,execs:0,orig:20000519-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000149,time:0,execs:0,orig:20000519-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000150,time:0,execs:0,orig:20000523-1.txt'...
    len = 50, map size = 47261, exec speed = 1293600 us, hash = 9f46baedc6a8a87a
Results of dry-run 0[*] Attempting dry run with 'id:000151,time:0,execs:0,orig:20000528-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000151,time:0,execs:0,orig:20000528-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000152,time:0,execs:0,orig:20000605-2.txt'...
    len = 52, map size = 47273, exec speed = 1291000 us, hash = f74049b9ca200ee7
Results of dry-run 0[*] Attempting dry run with 'id:000153,time:0,execs:0,orig:20000605-3.txt'...
    len = 62, map size = 47427, exec speed = 1956924 us, hash = 42a8b167f4ed108b
Results of dry-run 0[*] Attempting dry run with 'id:000154,time:0,execs:0,orig:20000622-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000154,time:0,execs:0,orig:20000622-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000155,time:0,execs:0,orig:20000703-1.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47273, exec speed = 1369516 us, hash = cc1d2b0a1edcd619
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000156,time:0,execs:0,orig:20000706-2.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1288055 us, hash = 4c7359e52e2bc676
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000157,time:0,execs:0,orig:20000706-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000157,time:0,execs:0,orig:20000706-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000158,time:0,execs:0,orig:20000706-4.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000158,time:0,execs:0,orig:20000706-4.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000159,time:0,execs:0,orig:20000706-5.txt'...
    len = 50, map size = 47260, exec speed = 1290304 us, hash = 6db441a33b35018b
Results of dry-run 0[*] Attempting dry run with 'id:000160,time:0,execs:0,orig:20000715-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000160,time:0,execs:0,orig:20000715-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000161,time:0,execs:0,orig:20000717-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000161,time:0,execs:0,orig:20000717-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000162,time:0,execs:0,orig:20000717-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000162,time:0,execs:0,orig:20000717-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000163,time:0,execs:0,orig:20000717-3.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47262, exec speed = 1289395 us, hash = 537ea47a7e6e33aa
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000164,time:0,execs:0,orig:20000717-5.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000164,time:0,execs:0,orig:20000717-5.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000165,time:0,execs:0,orig:20000726-1.txt'...
    len = 50, map size = 47262, exec speed = 1279288 us, hash = 57d80cd2ee812f6f
Results of dry-run 0[*] Attempting dry run with 'id:000166,time:0,execs:0,orig:20000731-1.txt'...
    len = 52, map size = 47293, exec speed = 1290187 us, hash = c88fadff5972f270
Results of dry-run 0[*] Attempting dry run with 'id:000167,time:0,execs:0,orig:20000801-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47432, exec speed = 1968956 us, hash = 85a471357590b770
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000168,time:0,execs:0,orig:20001009-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47267, exec speed = 1273985 us, hash = 8941e6533b96402a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000169,time:0,execs:0,orig:20001009-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000169,time:0,execs:0,orig:20001009-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000170,time:0,execs:0,orig:20001011-1.txt'...
    len = 72, map size = 47431, exec speed = 1964603 us, hash = cfee6e602d9d165f
Results of dry-run 0[*] Attempting dry run with 'id:000171,time:0,execs:0,orig:20001017-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47432, exec speed = 1975605 us, hash = e93c59c848e246ae
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000172,time:0,execs:0,orig:20001017-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000172,time:0,execs:0,orig:20001017-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000173,time:0,execs:0,orig:20001024-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000173,time:0,execs:0,orig:20001024-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000174,time:0,execs:0,orig:20001026-1.txt'...
    len = 33, map size = 37884, exec speed = 284097 us, hash = 48bc3f7be21f6875
Results of dry-run 0[*] Attempting dry run with 'id:000175,time:0,execs:0,orig:20001027-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000175,time:0,execs:0,orig:20001027-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000176,time:0,execs:0,orig:20001108-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000176,time:0,execs:0,orig:20001108-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000177,time:0,execs:0,orig:20001130-2.txt'...
    len = 50, map size = 47259, exec speed = 1267693 us, hash = f35d587083852e35
Results of dry-run 0[*] Attempting dry run with 'id:000178,time:0,execs:0,orig:20001203-1.txt'...
    len = 52, map size = 47272, exec speed = 1281280 us, hash = 460f143958661170
Results of dry-run 0[*] Attempting dry run with 'id:000179,time:0,execs:0,orig:20001203-2.txt'...
    len = 50, map size = 47435, exec speed = 1969469 us, hash = 8cb8a1ef83331f6a
Results of dry-run 0[*] Attempting dry run with 'id:000180,time:0,execs:0,orig:20001228-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1291016 us, hash = 0a768ad5ff277346
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000181,time:0,execs:0,orig:20001229-1.txt'...
[!] WARNING: instability detected during calibration
    len = 72, map size = 47421, exec speed = 1957325 us, hash = 52d597e13240202f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000182,time:0,execs:0,orig:20010116-1.txt'...
    len = 50, map size = 47268, exec speed = 1296039 us, hash = c9fe953296484443
Results of dry-run 0[*] Attempting dry run with 'id:000183,time:0,execs:0,orig:20010118-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000183,time:0,execs:0,orig:20010118-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000184,time:0,execs:0,orig:20010119-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47273, exec speed = 1288653 us, hash = a83c7516fc0e63fa
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000185,time:0,execs:0,orig:20010123-1.txt'...
    len = 50, map size = 47262, exec speed = 1300252 us, hash = 58b747765a043a89
Results of dry-run 0[*] Attempting dry run with 'id:000186,time:0,execs:0,orig:20010129-1.txt'...
    len = 54, map size = 47267, exec speed = 1293802 us, hash = 875e8f196370e588
Results of dry-run 0[*] Attempting dry run with 'id:000187,time:0,execs:0,orig:20010221-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1283359 us, hash = a1de95a6fd8814c4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000188,time:0,execs:0,orig:20010403-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47273, exec speed = 1286180 us, hash = ab3ec42d8fd7938b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000189,time:0,execs:0,orig:20010409-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47395, exec speed = 1942030 us, hash = 803061abef32a0c6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000190,time:0,execs:0,orig:20010518-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000190,time:0,execs:0,orig:20010518-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000191,time:0,execs:0,orig:20010518-2.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47284, exec speed = 1290095 us, hash = 6f92a0ee1344bcd2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000192,time:0,execs:0,orig:20010520-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000192,time:0,execs:0,orig:20010520-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000193,time:0,execs:0,orig:20010605-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1272169 us, hash = d9d29ae3d04ab169
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000194,time:0,execs:0,orig:20010605-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000194,time:0,execs:0,orig:20010605-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000195,time:0,execs:0,orig:20010711-1.txt'...
    len = 50, map size = 47261, exec speed = 1284663 us, hash = ca8b815bb8870c71
Results of dry-run 0[*] Attempting dry run with 'id:000196,time:0,execs:0,orig:20010717-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1270770 us, hash = 2efa13942705b672
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000197,time:0,execs:0,orig:20010904-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47259, exec speed = 1271093 us, hash = 7fc67a030f004f4e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000198,time:0,execs:0,orig:20010915-1.txt'...
    len = 62, map size = 47423, exec speed = 1972263 us, hash = dc371b3ed8181211
Results of dry-run 0[*] Attempting dry run with 'id:000199,time:0,execs:0,orig:20010925-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47277, exec speed = 1296054 us, hash = 251dd2face0d7857
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000200,time:0,execs:0,orig:20011019-1.txt'...
    len = 50, map size = 47257, exec speed = 1276086 us, hash = ef74ff38b3cecd44
Results of dry-run 0[*] Attempting dry run with 'id:000201,time:0,execs:0,orig:20011024-1.txt'...
[!] WARNING: instability detected during calibration
    len = 84, map size = 47265, exec speed = 1292874 us, hash = c851b069d2c34f6d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000202,time:0,execs:0,orig:20011109-1.txt'...
    len = 50, map size = 47261, exec speed = 1284331 us, hash = 11edcbf00e08856d
Results of dry-run 0[*] Attempting dry run with 'id:000203,time:0,execs:0,orig:20011109-2.txt'...
[!] WARNING: instability detected during calibration
    len = 84, map size = 47421, exec speed = 1969271 us, hash = 47b97a567b5de302
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000204,time:0,execs:0,orig:20011114-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000204,time:0,execs:0,orig:20011114-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000205,time:0,execs:0,orig:20011121-1.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47419, exec speed = 1970467 us, hash = 0c609643016c2939
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000206,time:0,execs:0,orig:20011219-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1448046 us, hash = 3b2045612dcf77a4
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000207,time:0,execs:0,orig:20011223-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1278263 us, hash = 3b695c415883d51c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000208,time:0,execs:0,orig:2002-04-17-PrintfChar.txt'...
    len = 73, map size = 47423, exec speed = 1945823 us, hash = 5e8c994d09d8bd1a
Results of dry-run 0[*] Attempting dry run with 'id:000209,time:0,execs:0,orig:2002-05-02-ArgumentTest.txt'...
    len = 58, map size = 37884, exec speed = 283015 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000210,time:0,execs:0,orig:2002-05-02-CastTest.txt'...
[!] WARNING: instability detected during calibration
    len = 61, map size = 47449, exec speed = 2122461 us, hash = 8bd60e7c956b6154
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000211,time:0,execs:0,orig:2002-05-02-CastTest1.txt'...
    len = 60, map size = 47449, exec speed = 1950320 us, hash = 1a7e0876c72e53be
Results of dry-run 0[*] Attempting dry run with 'id:000212,time:0,execs:0,orig:2002-05-02-CastTest2.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47436, exec speed = 1947170 us, hash = dcd5e8c105d6512a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000213,time:0,execs:0,orig:2002-05-02-ManyArguments.txt'...
[!] WARNING: instability detected during calibration
    len = 82, map size = 47583, exec speed = 2041755 us, hash = bb42af0b014a75a1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000214,time:0,execs:0,orig:2002-05-03-NotTest.txt'...
    len = 64, map size = 47443, exec speed = 2001347 us, hash = e30d312903512a2a
Results of dry-run 0[*] Attempting dry run with 'id:000215,time:0,execs:0,orig:2002-05-19-DivTest.txt'...
    len = 60, map size = 47449, exec speed = 1993926 us, hash = fbd89f45d48f5b20
Results of dry-run 0[*] Attempting dry run with 'id:000216,time:0,execs:0,orig:2002-08-02-CastTest.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47447, exec speed = 1943564 us, hash = 2c25bf1257d8d9f9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000217,time:0,execs:0,orig:2002-08-02-CastTest2.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47457, exec speed = 1955605 us, hash = 5ace25da16715e9c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000218,time:0,execs:0,orig:2002-08-19-CodegenBug.txt'...
[!] WARNING: instability detected during calibration
    len = 61, map size = 47411, exec speed = 1951440 us, hash = 83049e54f415747f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000219,time:0,execs:0,orig:2002-10-09-ArrayResolution.txt'...
[!] WARNING: instability detected during calibration
    len = 66, map size = 47443, exec speed = 2027583 us, hash = 4d67bc631e7bc0fa
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000220,time:0,execs:0,orig:2002-10-12-StructureArgs.txt'...
    len = 78, map size = 47539, exec speed = 2024553 us, hash = b334d15c268545ca
Results of dry-run 0[*] Attempting dry run with 'id:000221,time:0,execs:0,orig:2002-10-12-StructureArgsSimple.txt'...
    len = 59, map size = 37884, exec speed = 281475 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000222,time:0,execs:0,orig:2002-10-13-BadLoad.txt'...
    len = 60, map size = 47422, exec speed = 1946175 us, hash = 2ddeb2762d007632
Results of dry-run 0[*] Attempting dry run with 'id:000223,time:0,execs:0,orig:2002-12-13-MishaTest.txt'...
[!] WARNING: instability detected during calibration
    len = 84, map size = 47436, exec speed = 1954567 us, hash = 93df8ceba99cb335
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000224,time:0,execs:0,orig:20020103-1.txt'...
    len = 46, map size = 37884, exec speed = 284983 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000225,time:0,execs:0,orig:20020107-1.txt'...
    len = 50, map size = 47261, exec speed = 1282772 us, hash = a01c2f13cb97b6c2
Results of dry-run 0[*] Attempting dry run with 'id:000226,time:0,execs:0,orig:20020127-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1275041 us, hash = 2eea241546d13b40
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000227,time:0,execs:0,orig:20020129-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47262, exec speed = 1284456 us, hash = 5a908b9e72abbff4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000228,time:0,execs:0,orig:20020213-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000228,time:0,execs:0,orig:20020213-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000229,time:0,execs:0,orig:20020215-1.txt'...
    len = 54, map size = 47277, exec speed = 1288921 us, hash = 6ebcd0d87f7760ea
Results of dry-run 0[*] Attempting dry run with 'id:000230,time:0,execs:0,orig:20020219-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000230,time:0,execs:0,orig:20020219-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000231,time:0,execs:0,orig:20020225-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000231,time:0,execs:0,orig:20020225-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000232,time:0,execs:0,orig:20020307-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1284422 us, hash = c31de9bc96ed5ef4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000233,time:0,execs:0,orig:20020314-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000233,time:0,execs:0,orig:20020314-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000234,time:0,execs:0,orig:20020320-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000234,time:0,execs:0,orig:20020320-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000235,time:0,execs:0,orig:20020328-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47273, exec speed = 1283128 us, hash = 5e478049ac4bc1cf
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000236,time:0,execs:0,orig:20020402-1.txt'...
    len = 46, map size = 37884, exec speed = 282544 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000237,time:0,execs:0,orig:20020402-3.txt'...
    len = 50, map size = 47267, exec speed = 1275684 us, hash = 23450bc4cc0d48ca
Results of dry-run 0[*] Attempting dry run with 'id:000238,time:0,execs:0,orig:20020413-1.txt'...
    len = 52, map size = 47286, exec speed = 1293451 us, hash = 509133593f70cd17
Results of dry-run 0[*] Attempting dry run with 'id:000239,time:0,execs:0,orig:20020423-1.txt'...
    len = 46, map size = 37884, exec speed = 284182 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000240,time:0,execs:0,orig:20020503-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000240,time:0,execs:0,orig:20020503-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000241,time:0,execs:0,orig:20020506-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000241,time:0,execs:0,orig:20020506-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000242,time:0,execs:0,orig:20020508-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000242,time:0,execs:0,orig:20020508-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000243,time:0,execs:0,orig:20020510-1.txt'...
    len = 46, map size = 37884, exec speed = 283057 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000244,time:0,execs:0,orig:20020611-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1281878 us, hash = af8b08e618c213f1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000245,time:0,execs:0,orig:20020614-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000245,time:0,execs:0,orig:20020614-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000246,time:0,execs:0,orig:20020619-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000246,time:0,execs:0,orig:20020619-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000247,time:0,execs:0,orig:20020716-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1379530 us, hash = d1159e5c75a8a62a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000248,time:0,execs:0,orig:20020805-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1287496 us, hash = 6009e1b4c86cd0a3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000249,time:0,execs:0,orig:20020810-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47430, exec speed = 1956373 us, hash = ec66fa46e2e971b0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000250,time:0,execs:0,orig:20020819-1.txt'...
    len = 50, map size = 47261, exec speed = 1279550 us, hash = 2754391260a74616
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000251,time:0,execs:0,orig:20020904-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000251,time:0,execs:0,orig:20020904-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000252,time:0,execs:0,orig:20020916-1.txt'...
    len = 50, map size = 47264, exec speed = 1278059 us, hash = 4a65717472078dca
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000253,time:0,execs:0,orig:20020920-1.txt'...
    len = 54, map size = 47434, exec speed = 1958414 us, hash = eb192dfb02bbe8eb
Results of dry-run 0[*] Attempting dry run with 'id:000254,time:0,execs:0,orig:20021010-1.txt'...
    len = 50, map size = 47262, exec speed = 1279005 us, hash = 893e2a4118a585d1
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000255,time:0,execs:0,orig:20021010-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000255,time:0,execs:0,orig:20021010-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000256,time:0,execs:0,orig:20021011-1.txt'...
    len = 62, map size = 47423, exec speed = 1979593 us, hash = f50e71b3e62ee7f8
Results of dry-run 0[*] Attempting dry run with 'id:000257,time:0,execs:0,orig:20021015-1.txt'...
    len = 50, map size = 47264, exec speed = 1272677 us, hash = 970e6e62b391efa6
Results of dry-run 0[*] Attempting dry run with 'id:000258,time:0,execs:0,orig:20021024-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1290235 us, hash = 6f48ad1256894ea4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000259,time:0,execs:0,orig:20021118-1.txt'...
    len = 45, map size = 37884, exec speed = 286388 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000260,time:0,execs:0,orig:20021118-2.txt'...
    len = 46, map size = 37884, exec speed = 286826 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000261,time:0,execs:0,orig:20021119-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000261,time:0,execs:0,orig:20021119-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000262,time:0,execs:0,orig:20021127-1.txt'...
    len = 50, map size = 47266, exec speed = 1290314 us, hash = 0823470abcc48bac
Results of dry-run 0[*] Attempting dry run with 'id:000263,time:0,execs:0,orig:20021204-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000263,time:0,execs:0,orig:20021204-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000264,time:0,execs:0,orig:20021219-1.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47259, exec speed = 1269742 us, hash = bb3b62e2a872c93f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000265,time:0,execs:0,orig:2003-05-02-DependentPHI.txt'...
    len = 63, map size = 47447, exec speed = 2007142 us, hash = 88f8374f9ef19643
Results of dry-run 0[*] Attempting dry run with 'id:000266,time:0,execs:0,orig:2003-05-12-MinIntProblem.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47260, exec speed = 1275879 us, hash = 498f400a57ec7620
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000267,time:0,execs:0,orig:2003-05-14-initialize-string.txt'...
[!] WARNING: instability detected during calibration
    len = 78, map size = 47417, exec speed = 2128650 us, hash = 77e271a054cb194f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000268,time:0,execs:0,orig:2003-05-21-BitfieldHandling.txt'...
    len = 67, map size = 47476, exec speed = 2043282 us, hash = ab5e5cd6d162ba7a
Results of dry-run 0[*] Attempting dry run with 'id:000269,time:0,execs:0,orig:2003-05-21-UnionBitfields.txt'...
[!] WARNING: instability detected during calibration
    len = 67, map size = 47478, exec speed = 2258866 us, hash = 1b2b1f9f20b19281
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000270,time:0,execs:0,orig:2003-05-21-UnionTest.txt'...
[!] WARNING: instability detected during calibration
    len = 66, map size = 47447, exec speed = 1959256 us, hash = d4eb247f8f2dfb7f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000271,time:0,execs:0,orig:2003-05-22-LocalTypeTest.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47443, exec speed = 1949517 us, hash = 1c964f360371eb78
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000272,time:0,execs:0,orig:2003-05-31-LongShifts.txt'...
    len = 61, map size = 47438, exec speed = 1990255 us, hash = 14054986e8e2e05f
Results of dry-run 0[*] Attempting dry run with 'id:000273,time:0,execs:0,orig:2003-07-08-BitOpsTest.txt'...
    len = 67, map size = 47443, exec speed = 1970606 us, hash = 8c88d382a6b78fdb
Results of dry-run 0[*] Attempting dry run with 'id:000274,time:0,execs:0,orig:2003-07-09-SignedArgs.txt'...
[!] WARNING: instability detected during calibration
    len = 63, map size = 47474, exec speed = 2055687 us, hash = 39803f56d3290d19
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000275,time:0,execs:0,orig:2003-07-10-SignConversions.txt'...
    len = 88, map size = 47443, exec speed = 2030270 us, hash = 4425730fddc8ac23
Results of dry-run 0[*] Attempting dry run with 'id:000276,time:0,execs:0,orig:2003-08-05-CastFPToUint.txt'...
[!] WARNING: instability detected during calibration
    len = 67, map size = 47432, exec speed = 1953119 us, hash = 67c27cadf97b3dbc
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000277,time:0,execs:0,orig:2003-08-20-FoldBug.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000277,time:0,execs:0,orig:2003-08-20-FoldBug.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000278,time:0,execs:0,orig:2003-09-18-BitFieldTest.txt'...
[!] WARNING: instability detected during calibration
    len = 63, map size = 47443, exec speed = 1949675 us, hash = e2cd9f2030b52a8d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000279,time:0,execs:0,orig:2003-10-12-GlobalVarInitializers.txt'...
    len = 74, map size = 47720, exec speed = 2057270 us, hash = 2294c769aa18b852
Results of dry-run 0[*] Attempting dry run with 'id:000280,time:0,execs:0,orig:2003-10-29-ScalarReplBug.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47438, exec speed = 1945067 us, hash = d6ed5078876c2a52
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000281,time:0,execs:0,orig:20030105-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000281,time:0,execs:0,orig:20030105-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000282,time:0,execs:0,orig:20030117-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000282,time:0,execs:0,orig:20030117-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000283,time:0,execs:0,orig:20030120-2.txt'...
    len = 52, map size = 47432, exec speed = 1967339 us, hash = 15de244296784ae5
Results of dry-run 0[*] Attempting dry run with 'id:000284,time:0,execs:0,orig:20030128-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000284,time:0,execs:0,orig:20030128-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000285,time:0,execs:0,orig:20030209-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000285,time:0,execs:0,orig:20030209-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000286,time:0,execs:0,orig:20030218-1.txt'...
    len = 50, map size = 47261, exec speed = 1293985 us, hash = b621cb0a5fc9af6d
Results of dry-run 0[*] Attempting dry run with 'id:000287,time:0,execs:0,orig:20030221-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000287,time:0,execs:0,orig:20030221-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000288,time:0,execs:0,orig:20030222-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1284606 us, hash = 03439a5eeb70fe81
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000289,time:0,execs:0,orig:20030224-2.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47266, exec speed = 1281087 us, hash = de88a9cce12ca3dc
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000290,time:0,execs:0,orig:20030307-1.txt'...
    len = 60, map size = 47260, exec speed = 1282017 us, hash = fde8c4137106c095
Results of dry-run 0[*] Attempting dry run with 'id:000291,time:0,execs:0,orig:20030401-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1268583 us, hash = 2a43c07acc9c5c7e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000292,time:0,execs:0,orig:20030403-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47265, exec speed = 1340197 us, hash = 48401cc4746a91fb
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000293,time:0,execs:0,orig:20030404-1.txt'...
    len = 50, map size = 47260, exec speed = 1270246 us, hash = 1b4ac1f9bbecc502
Results of dry-run 0[*] Attempting dry run with 'id:000294,time:0,execs:0,orig:20030501-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000294,time:0,execs:0,orig:20030501-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000295,time:0,execs:0,orig:20030613-1.txt'...
    len = 52, map size = 47272, exec speed = 1283167 us, hash = 55b8d2739b665cfa
Results of dry-run 0[*] Attempting dry run with 'id:000296,time:0,execs:0,orig:20030626-1.txt'...
[!] WARNING: instability detected during calibration
    len = 72, map size = 47421, exec speed = 1976728 us, hash = f87d33656294f4c1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000297,time:0,execs:0,orig:20030626-2.txt'...
    len = 50, map size = 47284, exec speed = 1277941 us, hash = 7fad7241824e1e2f
Results of dry-run 0[*] Attempting dry run with 'id:000298,time:0,execs:0,orig:20030717-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47278, exec speed = 1283721 us, hash = 2b45779c24a1f11a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000299,time:0,execs:0,orig:20030821-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000299,time:0,execs:0,orig:20030821-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000300,time:0,execs:0,orig:20030828-2.txt'...
    len = 50, map size = 47262, exec speed = 1292517 us, hash = ee5473574248d7db
Results of dry-run 0[*] Attempting dry run with 'id:000301,time:0,execs:0,orig:20030903-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47265, exec speed = 1277800 us, hash = 089bf7aa8c750d98
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000302,time:0,execs:0,orig:20030909-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47273, exec speed = 1288517 us, hash = a851ecc7acb5de15
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000303,time:0,execs:0,orig:20030913-1.txt'...
    len = 50, map size = 47260, exec speed = 1278937 us, hash = 40c29edee2a0791e
Results of dry-run 0[*] Attempting dry run with 'id:000304,time:0,execs:0,orig:20030914-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000304,time:0,execs:0,orig:20030914-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000305,time:0,execs:0,orig:20030914-2.txt'...
    len = 50, map size = 47261, exec speed = 1282192 us, hash = 367751e2838a896b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000306,time:0,execs:0,orig:20030916-1.txt'...
    len = 50, map size = 47260, exec speed = 1280326 us, hash = 3b695c415883d51c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000307,time:0,execs:0,orig:20030920-1.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47423, exec speed = 1954707 us, hash = 034005f4b9ab4e45
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000308,time:0,execs:0,orig:20031003-1.txt'...
    len = 52, map size = 47297, exec speed = 1281362 us, hash = 8c9b1478557b821c
Results of dry-run 0[*] Attempting dry run with 'id:000309,time:0,execs:0,orig:20031011-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000309,time:0,execs:0,orig:20031011-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000310,time:0,execs:0,orig:20031012-1.txt'...
    len = 62, map size = 47429, exec speed = 1978548 us, hash = a2875f7c5ff53e91
Results of dry-run 0[*] Attempting dry run with 'id:000311,time:0,execs:0,orig:20031204-1.txt'...
    len = 62, map size = 47426, exec speed = 1974951 us, hash = 05779842d006c426
Results of dry-run 0[*] Attempting dry run with 'id:000312,time:0,execs:0,orig:20031211-1.txt'...
    len = 50, map size = 47261, exec speed = 1291341 us, hash = ed3bba668f31c20c
Results of dry-run 0[*] Attempting dry run with 'id:000313,time:0,execs:0,orig:20031211-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000313,time:0,execs:0,orig:20031211-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000314,time:0,execs:0,orig:20031214-1.txt'...
    len = 50, map size = 47261, exec speed = 1275291 us, hash = fb9a22a0bce34bf6
Results of dry-run 0[*] Attempting dry run with 'id:000315,time:0,execs:0,orig:20031216-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000315,time:0,execs:0,orig:20031216-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000316,time:0,execs:0,orig:2004-02-02-NegativeZero.txt'...
    len = 65, map size = 47544, exec speed = 2062837 us, hash = 989ddf79d8e71945
Results of dry-run 0[*] Attempting dry run with 'id:000317,time:0,execs:0,orig:2004-02-03-AggregateCopy.txt'...
    len = 64, map size = 47438, exec speed = 1954435 us, hash = baf60646afd72cfd
Results of dry-run 0[*] Attempting dry run with 'id:000318,time:0,execs:0,orig:2004-03-15-IndirectGoto.txt'...
    len = 63, map size = 47418, exec speed = 1976429 us, hash = 7273c25f91be1942
Results of dry-run 0[*] Attempting dry run with 'id:000319,time:0,execs:0,orig:2004-08-12-InlinerAndAllocas.txt'...
    len = 68, map size = 47444, exec speed = 1963567 us, hash = d87020effce21a6b
Results of dry-run 0[*] Attempting dry run with 'id:000320,time:0,execs:0,orig:2004-11-28-GlobalBoolLayout.txt'...
[!] WARNING: instability detected during calibration
    len = 67, map size = 47445, exec speed = 1970728 us, hash = 8ae64f7ad2e98efd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000321,time:0,execs:0,orig:20040223-1.txt'...
    len = 62, map size = 47434, exec speed = 1977317 us, hash = 7b0b337c945b3f42
Results of dry-run 0[*] Attempting dry run with 'id:000322,time:0,execs:0,orig:20040302-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000322,time:0,execs:0,orig:20040302-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000323,time:0,execs:0,orig:20040311-1.txt'...
    len = 46, map size = 37884, exec speed = 285157 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000324,time:0,execs:0,orig:20040313-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000324,time:0,execs:0,orig:20040313-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000325,time:0,execs:0,orig:20040409-1w.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000325,time:0,execs:0,orig:20040409-1w.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000326,time:0,execs:0,orig:20040409-2w.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000326,time:0,execs:0,orig:20040409-2w.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000327,time:0,execs:0,orig:20040409-3.txt'...
    len = 46, map size = 37884, exec speed = 283737 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000328,time:0,execs:0,orig:20040411-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000328,time:0,execs:0,orig:20040411-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000329,time:0,execs:0,orig:20040423-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000329,time:0,execs:0,orig:20040423-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000330,time:0,execs:0,orig:20040520-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1273377 us, hash = 1b4ac1f9bbecc502
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000331,time:0,execs:0,orig:20040625-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000331,time:0,execs:0,orig:20040625-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000332,time:0,execs:0,orig:20040805-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000332,time:0,execs:0,orig:20040805-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000333,time:0,execs:0,orig:20041019-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000333,time:0,execs:0,orig:20041019-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000334,time:0,execs:0,orig:20041113-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000334,time:0,execs:0,orig:20041113-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000335,time:0,execs:0,orig:20041114-1.txt'...
    len = 50, map size = 47261, exec speed = 1271575 us, hash = 6f4647af0332f8f1
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000336,time:0,execs:0,orig:20041124-1.txt'...
    len = 33, map size = 37884, exec speed = 285250 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000337,time:0,execs:0,orig:20041126-1.txt'...
    len = 50, map size = 47258, exec speed = 1332637 us, hash = 76231767fc838c5b
Results of dry-run 0[*] Attempting dry run with 'id:000338,time:0,execs:0,orig:20041213-2.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47428, exec speed = 2030647 us, hash = 2fcc60e3f94c44cd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000339,time:0,execs:0,orig:20041218-2.txt'...
    len = 52, map size = 47426, exec speed = 1951239 us, hash = 34a6ca8224892932
Results of dry-run 0[*] Attempting dry run with 'id:000340,time:0,execs:0,orig:2005-05-06-LongLongSignedShift.txt'...
[!] WARNING: instability detected during calibration
    len = 70, map size = 47447, exec speed = 1944965 us, hash = a4e24372f96bc22f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000341,time:0,execs:0,orig:2005-05-11-Popcount-ffs-fls.txt'...
[!] WARNING: instability detected during calibration
    len = 67, map size = 47508, exec speed = 3823458 us, hash = d9b1f51cf6c9bf41
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000342,time:0,execs:0,orig:2005-05-12-Int64ToFP.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47760, exec speed = 3771703 us, hash = 85f66aa45b46e89f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000343,time:0,execs:0,orig:2005-05-13-SDivTwo.txt'...
    len = 58, map size = 47269, exec speed = 1266781 us, hash = f466bb1a666844cc
Results of dry-run 0[*] Attempting dry run with 'id:000344,time:0,execs:0,orig:2005-07-15-Bitfield-ABI.txt'...
    len = 63, map size = 47438, exec speed = 1938722 us, hash = 2e449654012b0e04
Results of dry-run 0[*] Attempting dry run with 'id:000345,time:0,execs:0,orig:2005-07-17-INT-To-FP.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000345,time:0,execs:0,orig:2005-07-17-INT-To-FP.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000346,time:0,execs:0,orig:2005-11-29-LongSwitch.txt'...
[!] WARNING: instability detected during calibration
    len = 61, map size = 47442, exec speed = 1945534 us, hash = 46e1fa77e04e2c91
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000347,time:0,execs:0,orig:20050104-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47270, exec speed = 1276660 us, hash = 3301462c82cc011d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000348,time:0,execs:0,orig:20050106-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47265, exec speed = 1276332 us, hash = 6fd2fbc8cc11dd5f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000349,time:0,execs:0,orig:20050107-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000349,time:0,execs:0,orig:20050107-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000350,time:0,execs:0,orig:20050119-1.txt'...
    len = 50, map size = 47261, exec speed = 1290912 us, hash = 8036b0a8b4da5b00
Results of dry-run 0[*] Attempting dry run with 'id:000351,time:0,execs:0,orig:20050119-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000351,time:0,execs:0,orig:20050119-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000352,time:0,execs:0,orig:20050124-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000352,time:0,execs:0,orig:20050124-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000353,time:0,execs:0,orig:20050125-1.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47427, exec speed = 1952460 us, hash = 06e356c37c0d0c6c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000354,time:0,execs:0,orig:20050131-1.txt'...
    len = 50, map size = 47261, exec speed = 1275581 us, hash = 2754391260a74616
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000355,time:0,execs:0,orig:20050203-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47261, exec speed = 1380750 us, hash = 60915a145d422494
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000356,time:0,execs:0,orig:20050218-1.txt'...
    len = 74, map size = 47268, exec speed = 1288103 us, hash = d0018890028e4550
Results of dry-run 0[*] Attempting dry run with 'id:000357,time:0,execs:0,orig:20050224-1.txt'...
    len = 54, map size = 47273, exec speed = 6368065 us, hash = 25266e0a7576ec65
Results of dry-run 0[*] Attempting dry run with 'id:000358,time:0,execs:0,orig:20050410-1.txt'...
    len = 50, map size = 47261, exec speed = 1284658 us, hash = da0328c4b1ded124
Results of dry-run 0[*] Attempting dry run with 'id:000359,time:0,execs:0,orig:20050502-1.txt'...
[!] WARNING: instability detected during calibration
    len = 72, map size = 47423, exec speed = 1968725 us, hash = 88d15ef6c29d0fb7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000360,time:0,execs:0,orig:20050604-1.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47428, exec speed = 1961483 us, hash = ba0ebe85a621a2d2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000361,time:0,execs:0,orig:20050607-1.txt'...
    len = 50, map size = 47258, exec speed = 1263546 us, hash = 4298d49064071be3
Results of dry-run 0[*] Attempting dry run with 'id:000362,time:0,execs:0,orig:20050613-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000362,time:0,execs:0,orig:20050613-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000363,time:0,execs:0,orig:20050713-1.txt'...
    len = 54, map size = 47432, exec speed = 1960709 us, hash = 7d54c26ce56e29ed
Results of dry-run 0[*] Attempting dry run with 'id:000364,time:0,execs:0,orig:20050826-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000364,time:0,execs:0,orig:20050826-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000365,time:0,execs:0,orig:20050929-1.txt'...
    len = 46, map size = 37884, exec speed = 285353 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000366,time:0,execs:0,orig:20051012-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1487246 us, hash = 3d246f460d6c52fd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000367,time:0,execs:0,orig:20051104-1.txt'...
    len = 50, map size = 47261, exec speed = 1268469 us, hash = 3bf36e6fbc20b311
Results of dry-run 0[*] Attempting dry run with 'id:000368,time:0,execs:0,orig:20051215-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47272, exec speed = 1352417 us, hash = ec12e56d930f2df9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000369,time:0,execs:0,orig:2006-01-23-UnionInit.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47478, exec speed = 2151976 us, hash = 7152b4ebabeea115
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000370,time:0,execs:0,orig:2006-01-29-SimpleIndirectCall.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47423, exec speed = 1953361 us, hash = e20050e45d1a2306
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000371,time:0,execs:0,orig:2006-02-04-DivRem.txt'...
    len = 57, map size = 47464, exec speed = 2301000 us, hash = 803b0997991a781d
Results of dry-run 0[*] Attempting dry run with 'id:000372,time:0,execs:0,orig:2006-12-01-float_varg.txt'...
[!] WARNING: instability detected during calibration
    len = 79, map size = 47552, exec speed = 2181228 us, hash = 6b5cb84cde65dc1a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000373,time:0,execs:0,orig:2006-12-07-Compare64BitConstant.txt'...
    len = 71, map size = 47426, exec speed = 2249721 us, hash = 80f6ce5c2b241576
Results of dry-run 0[*] Attempting dry run with 'id:000374,time:0,execs:0,orig:2006-12-11-LoadConstants.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47437, exec speed = 3956203 us, hash = 947ac3a8345719db
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000375,time:0,execs:0,orig:20060110-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47273, exec speed = 1279401 us, hash = 54f518d0640085e2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000376,time:0,execs:0,orig:20060110-2.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47267, exec speed = 1266809 us, hash = 40bb5f24de037408
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000377,time:0,execs:0,orig:20060127-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1346033 us, hash = 47a5356c7f9c76b4
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000378,time:0,execs:0,orig:20060412-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47265, exec speed = 1468858 us, hash = b5284653b8375450
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000379,time:0,execs:0,orig:20060905-1.txt'...
    len = 50, map size = 47412, exec speed = 2123036 us, hash = 6119437f8d1b2bf5
Results of dry-run 0[*] Attempting dry run with 'id:000380,time:0,execs:0,orig:20060910-1.txt'...
    len = 60, map size = 47268, exec speed = 1586402 us, hash = 827fb2587f92aff6
Results of dry-run 0[*] Attempting dry run with 'id:000381,time:0,execs:0,orig:20060930-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47276, exec speed = 1828271 us, hash = 7b7eb9ce57de3d10
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000382,time:0,execs:0,orig:20061031-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000382,time:0,execs:0,orig:20061031-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000383,time:0,execs:0,orig:20061220-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47271, exec speed = 1286265 us, hash = 8f901cd767826b34
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000384,time:0,execs:0,orig:2007-01-04-KNR-Args.txt'...
[!] WARNING: instability detected during calibration
    len = 89, map size = 47589, exec speed = 2134209 us, hash = e40ee3c3c9a009e7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000385,time:0,execs:0,orig:2007-03-02-VaCopy.txt'...
    len = 67, map size = 47421, exec speed = 1950911 us, hash = 3a4f02f3fe4698d4
Results of dry-run 0[*] Attempting dry run with 'id:000386,time:0,execs:0,orig:2007-04-10-BitfieldTest.txt'...
[!] WARNING: instability detected during calibration
    len = 73, map size = 47437, exec speed = 1949498 us, hash = 4e49aae0473ca655
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000387,time:0,execs:0,orig:2007-04-25-weak.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47265, exec speed = 1271301 us, hash = 8794b034f055b708
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000388,time:0,execs:0,orig:20070212-1.txt'...
    len = 58, map size = 47259, exec speed = 1288512 us, hash = bbf6738a98d046c2
Results of dry-run 0[*] Attempting dry run with 'id:000389,time:0,execs:0,orig:20070212-3.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47259, exec speed = 1501817 us, hash = 1082c876c244b17e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000390,time:0,execs:0,orig:20070424-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47279, exec speed = 1468039 us, hash = efed64d57a678c66
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000391,time:0,execs:0,orig:20070614-1.txt'...
    len = 56, map size = 47431, exec speed = 1961044 us, hash = 737c827dcdae4d5d
Results of dry-run 0[*] Attempting dry run with 'id:000392,time:0,execs:0,orig:20070623-1.txt'...
    len = 46, map size = 37884, exec speed = 283261 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000393,time:0,execs:0,orig:20070824-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1512598 us, hash = 1b4ac1f9bbecc502
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000394,time:0,execs:0,orig:20070919-1.txt'...
    len = 52, map size = 47427, exec speed = 2128706 us, hash = de051f1fe3f57304
Results of dry-run 0[*] Attempting dry run with 'id:000395,time:0,execs:0,orig:20071011-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1273578 us, hash = f527f3598d8813d2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000396,time:0,execs:0,orig:20071018-1.txt'...
    len = 50, map size = 47390, exec speed = 1950167 us, hash = 6ac5ab916ffcaed9
Results of dry-run 0[*] Attempting dry run with 'id:000397,time:0,execs:0,orig:20071030-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47451, exec speed = 1698818 us, hash = 21c705d0714bd3c4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000398,time:0,execs:0,orig:20071108-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47431, exec speed = 2229854 us, hash = a156469df4ec0b03
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000399,time:0,execs:0,orig:20071120-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47391, exec speed = 2036622 us, hash = b2aa37f7b91de031
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000400,time:0,execs:0,orig:20071202-1.txt'...
    len = 52, map size = 47282, exec speed = 1290858 us, hash = 608cff4713e30b38
Results of dry-run 0[*] Attempting dry run with 'id:000401,time:0,execs:0,orig:20071205-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000401,time:0,execs:0,orig:20071205-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000402,time:0,execs:0,orig:20071211-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000402,time:0,execs:0,orig:20071211-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000403,time:0,execs:0,orig:20071216-1.txt'...
    len = 50, map size = 47264, exec speed = 1278336 us, hash = 593ea73d62e31030
Results of dry-run 0[*] Attempting dry run with 'id:000404,time:0,execs:0,orig:20071220-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000404,time:0,execs:0,orig:20071220-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000405,time:0,execs:0,orig:2008-01-07-LongDouble.txt'...
    len = 67, map size = 47602, exec speed = 1983469 us, hash = a8f968b576d84bbb
Results of dry-run 0[*] Attempting dry run with 'id:000406,time:0,execs:0,orig:2008-04-18-LoopBug.txt'...
[!] WARNING: instability detected during calibration
    len = 58, map size = 47451, exec speed = 2116110 us, hash = 6bca3dfc0365d29b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000407,time:0,execs:0,orig:2008-04-20-LoopBug2.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47451, exec speed = 2202500 us, hash = 3e3ac2e918f30916
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000408,time:0,execs:0,orig:20080117-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1368398 us, hash = 7d4e1d211286f9ba
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000409,time:0,execs:0,orig:20080122-1.txt'...
    len = 50, map size = 47260, exec speed = 1424359 us, hash = 5e817f67828e2664
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000410,time:0,execs:0,orig:20080222-1.txt'...
    len = 52, map size = 47432, exec speed = 1960695 us, hash = a1a28f7596c101fa
Results of dry-run 0[*] Attempting dry run with 'id:000411,time:0,execs:0,orig:20080408-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000411,time:0,execs:0,orig:20080408-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000412,time:0,execs:0,orig:20080506-1.txt'...
    len = 46, map size = 37884, exec speed = 285993 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000413,time:0,execs:0,orig:20080506-2.txt'...
    len = 50, map size = 47258, exec speed = 1289430 us, hash = 6386d9d6c84cab5c
Results of dry-run 0[*] Attempting dry run with 'id:000414,time:0,execs:0,orig:20080522-1.txt'...
    len = 50, map size = 47258, exec speed = 1286717 us, hash = 69b89af3f9dcf5da
Results of dry-run 0[*] Attempting dry run with 'id:000415,time:0,execs:0,orig:20080529-1.txt'...
    len = 52, map size = 47386, exec speed = 1284371 us, hash = e541d9e4f6b04b57
Results of dry-run 0[*] Attempting dry run with 'id:000416,time:0,execs:0,orig:20080813-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1277126 us, hash = c9f5e88722f25203
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000417,time:0,execs:0,orig:20081103-1.txt'...
    len = 50, map size = 47267, exec speed = 1285670 us, hash = 9b5dd271bc4666a8
Results of dry-run 0[*] Attempting dry run with 'id:000418,time:0,execs:0,orig:20081112-1.txt'...
    len = 50, map size = 47264, exec speed = 1274844 us, hash = 9fdc0f99686b979e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000419,time:0,execs:0,orig:20081117-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000419,time:0,execs:0,orig:20081117-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000420,time:0,execs:0,orig:2009-04-16-BitfieldInitialization.txt'...
[!] WARNING: instability detected during calibration
    len = 87, map size = 47440, exec speed = 2020264 us, hash = c48f71ab17cd90d5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000421,time:0,execs:0,orig:2009-12-07-StructReturn.txt'...
    len = 63, map size = 47309, exec speed = 1283491 us, hash = 50a56961b6d3509b
Results of dry-run 0[*] Attempting dry run with 'id:000422,time:0,execs:0,orig:20090113-2.txt'...
    len = 50, map size = 47288, exec speed = 1665250 us, hash = e085a9e50afcec01
Results of dry-run 0[*] Attempting dry run with 'id:000423,time:0,execs:0,orig:20090207-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1306302 us, hash = e964318666fd189d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000424,time:0,execs:0,orig:20090527-1.txt'...
    len = 52, map size = 47271, exec speed = 1292382 us, hash = e802cd4006bf0dff
Results of dry-run 0[*] Attempting dry run with 'id:000425,time:0,execs:0,orig:20090623-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1283978 us, hash = 9adfa40b32e19b21
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000426,time:0,execs:0,orig:20090814-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000426,time:0,execs:0,orig:20090814-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000427,time:0,execs:0,orig:20091229-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000427,time:0,execs:0,orig:20091229-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000428,time:0,execs:0,orig:2010-05-24-BitfieldTest.txt'...
[!] WARNING: instability detected during calibration
    len = 63, map size = 47257, exec speed = 1610483 us, hash = 100400d4cacfcc60
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000429,time:0,execs:0,orig:20100209-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1471562 us, hash = 35d19dfd1b213f62
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000430,time:0,execs:0,orig:20100316-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47275, exec speed = 1455963 us, hash = 7262c05eb52a3c8a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000431,time:0,execs:0,orig:20100430-1.txt'...
    len = 54, map size = 47425, exec speed = 1946886 us, hash = cede4330636036e3
Results of dry-run 0[*] Attempting dry run with 'id:000432,time:0,execs:0,orig:20100708-1.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47438, exec speed = 2231866 us, hash = b4b7a48a4ec40036
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000433,time:0,execs:0,orig:20100805-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000433,time:0,execs:0,orig:20100805-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000434,time:0,execs:0,orig:20100827-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47258, exec speed = 1375697 us, hash = fc92cff8a502a2c6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000435,time:0,execs:0,orig:20101011-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000435,time:0,execs:0,orig:20101011-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000436,time:0,execs:0,orig:20101013-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000436,time:0,execs:0,orig:20101013-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000437,time:0,execs:0,orig:20101025-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47263, exec speed = 1292386 us, hash = 472376daae1e7522
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000438,time:0,execs:0,orig:20111212-1.txt'...
    len = 62, map size = 47422, exec speed = 1963593 us, hash = ca6c8075d2d829a3
Results of dry-run 0[*] Attempting dry run with 'id:000439,time:0,execs:0,orig:20111227-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000439,time:0,execs:0,orig:20111227-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000440,time:0,execs:0,orig:20120105-1.txt'...
    len = 50, map size = 47260, exec speed = 1273299 us, hash = 1b4ac1f9bbecc502
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000441,time:0,execs:0,orig:20120111-1.txt'...
    len = 50, map size = 47272, exec speed = 1280626 us, hash = ffb18865a89251ad
Results of dry-run 0[*] Attempting dry run with 'id:000442,time:0,execs:0,orig:20120207-1.txt'...
[!] WARNING: instability detected during calibration
    len = 62, map size = 47422, exec speed = 1972584 us, hash = b0dbb04dd91c361e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000443,time:0,execs:0,orig:20120808-1.txt'...
    len = 50, map size = 47286, exec speed = 1295458 us, hash = c7b19bdcc2714e8b
Results of dry-run 0[*] Attempting dry run with 'id:000444,time:0,execs:0,orig:20120817-1.txt'...
    len = 50, map size = 47268, exec speed = 1287433 us, hash = cdde3da75ac9d03b
Results of dry-run 0[*] Attempting dry run with 'id:000445,time:0,execs:0,orig:20120919-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47301, exec speed = 1461756 us, hash = 2046d0733d7b3a95
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000446,time:0,execs:0,orig:20140212-1.txt'...
    len = 50, map size = 47258, exec speed = 1287674 us, hash = 32ff407604c32d1e
Results of dry-run 0[*] Attempting dry run with 'id:000447,time:0,execs:0,orig:20140212-2.txt'...
    len = 50, map size = 47265, exec speed = 1278505 us, hash = d77483149a1be9c8
Results of dry-run 0[*] Attempting dry run with 'id:000448,time:0,execs:0,orig:20140326-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1269609 us, hash = 62836b53d2875fa2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000449,time:0,execs:0,orig:20140622-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000449,time:0,execs:0,orig:20140622-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000450,time:0,execs:0,orig:20141107-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47278, exec speed = 1341779 us, hash = 6525a226486d4112
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000451,time:0,execs:0,orig:20141125-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47291, exec speed = 1588477 us, hash = caeddd48bf8ad2fa
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000452,time:0,execs:0,orig:20150611-1.txt'...
    len = 50, map size = 47261, exec speed = 1267189 us, hash = 19bb1714fc6618ff
Results of dry-run 0[*] Attempting dry run with 'id:000453,time:0,execs:0,orig:20170111-1.txt'...
    len = 50, map size = 47258, exec speed = 1285103 us, hash = 0d5c366579497c89
Results of dry-run 0[*] Attempting dry run with 'id:000454,time:0,execs:0,orig:20170401-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000454,time:0,execs:0,orig:20170401-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000455,time:0,execs:0,orig:20170419-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47265, exec speed = 1277150 us, hash = 19234033ac41a6c5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000456,time:0,execs:0,orig:20180112-1.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47258, exec speed = 1519286 us, hash = b60abe9fa776e095
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000457,time:0,execs:0,orig:20180131-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000457,time:0,execs:0,orig:20180131-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000458,time:0,execs:0,orig:20180226-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47431, exec speed = 2784552 us, hash = e572b69f5bb2aa82
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000459,time:0,execs:0,orig:20181120-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47260, exec speed = 1611613 us, hash = 0dc414c4fa7a89ae
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000460,time:0,execs:0,orig:2020-01-06-coverage-001.txt'...
    len = 63, map size = 47442, exec speed = 1968898 us, hash = 9f8eedb8a08fe3a9
Results of dry-run 0[*] Attempting dry run with 'id:000461,time:0,execs:0,orig:2020-01-06-coverage-002.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000462,time:0,execs:0,orig:2020-01-06-coverage-003.txt'...
    len = 65, map size = 47448, exec speed = 2283346 us, hash = 25e59041728a366e
Results of dry-run 0[*] Attempting dry run with 'id:000463,time:0,execs:0,orig:2020-01-06-coverage-004.txt'...
[!] WARNING: instability detected during calibration
    len = 75, map size = 47449, exec speed = 2074743 us, hash = 78bcd20aa2410275
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000464,time:0,execs:0,orig:2020-01-06-coverage-005.txt'...
    len = 64, map size = 37884, exec speed = 282076 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000465,time:0,execs:0,orig:2020-01-06-coverage-006.txt'...
[!] WARNING: instability detected during calibration
    len = 67, map size = 47445, exec speed = 1965714 us, hash = b3dceeebb9c70a7a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000466,time:0,execs:0,orig:2020-01-06-coverage-007.txt'...
[!] WARNING: instability detected during calibration
    len = 67, map size = 47455, exec speed = 1970915 us, hash = 892d5da303eced9a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000467,time:0,execs:0,orig:2020-01-06-coverage-008.txt'...
    len = 71, map size = 47457, exec speed = 1984626 us, hash = 1065bc3c5fe5a36a
Results of dry-run 0[*] Attempting dry run with 'id:000468,time:0,execs:0,orig:2020-01-06-coverage-009.txt'...
    len = 75, map size = 47458, exec speed = 2002661 us, hash = ffdb19811aa7b256
Results of dry-run 0[*] Attempting dry run with 'id:000469,time:0,execs:0,orig:2020-01-06-coverage-010.txt'...
    len = 87, map size = 47447, exec speed = 2046634 us, hash = 03c6b0725da58d94
Results of dry-run 0[*] Attempting dry run with 'id:000470,time:0,execs:0,orig:900409-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000470,time:0,execs:0,orig:900409-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000471,time:0,execs:0,orig:920202-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1277000 us, hash = dd1b718871006eaf
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000472,time:0,execs:0,orig:920428-1.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47424, exec speed = 1960964 us, hash = 82a14332d1bcb3d5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000473,time:0,execs:0,orig:920429-1.txt'...
[!] WARNING: instability detected during calibration
    len = 70, map size = 47421, exec speed = 1950847 us, hash = 75436884d45315f5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000474,time:0,execs:0,orig:920501-6.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47423, exec speed = 1967325 us, hash = 95de85fe2b9e378d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000475,time:0,execs:0,orig:920501-7.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1278329 us, hash = 45f886bf7748b1ce
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000476,time:0,execs:0,orig:920604-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47273, exec speed = 1276860 us, hash = c9d2d0af11a9dd18
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000477,time:0,execs:0,orig:920612-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000477,time:0,execs:0,orig:920612-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000478,time:0,execs:0,orig:920625-1.txt'...
    len = 48, map size = 47346, exec speed = 1288921 us, hash = e066cd6769d64311
Results of dry-run 0[*] Attempting dry run with 'id:000479,time:0,execs:0,orig:920711-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000479,time:0,execs:0,orig:920711-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000480,time:0,execs:0,orig:920721-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000480,time:0,execs:0,orig:920721-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000481,time:0,execs:0,orig:920721-4.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1286509 us, hash = cc8115faccb36ed1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000482,time:0,execs:0,orig:920728-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000482,time:0,execs:0,orig:920728-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000483,time:0,execs:0,orig:920730-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000483,time:0,execs:0,orig:920730-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000484,time:0,execs:0,orig:920810-1.txt'...
    len = 48, map size = 47407, exec speed = 1966396 us, hash = 909d05acf5b8ff80
Results of dry-run 0[*] Attempting dry run with 'id:000485,time:0,execs:0,orig:920829-1.txt'...
    len = 48, map size = 47261, exec speed = 1288293 us, hash = 13e542367adb69d4
Results of dry-run 0[*] Attempting dry run with 'id:000486,time:0,execs:0,orig:920908-2.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47262, exec speed = 1354233 us, hash = 645e3b16be4e1a2f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000487,time:0,execs:0,orig:920929-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47260, exec speed = 1274017 us, hash = bc6dc7888e1c4a44
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000488,time:0,execs:0,orig:921013-1.txt'...
    len = 48, map size = 47265, exec speed = 1292174 us, hash = 8d348cafc52ea743
Results of dry-run 0[*] Attempting dry run with 'id:000489,time:0,execs:0,orig:921029-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000489,time:0,execs:0,orig:921029-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000490,time:0,execs:0,orig:921113-1.txt'...
    len = 50, map size = 47333, exec speed = 1298744 us, hash = 6b1906e015085671
Results of dry-run 0[*] Attempting dry run with 'id:000491,time:0,execs:0,orig:921117-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47270, exec speed = 1421166 us, hash = 71cbdca2ccfc516e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000492,time:0,execs:0,orig:921123-1.txt'...
    len = 48, map size = 47263, exec speed = 1288272 us, hash = d5af8166f7896f7e
Results of dry-run 0[*] Attempting dry run with 'id:000493,time:0,execs:0,orig:921123-2.txt'...
    len = 48, map size = 47261, exec speed = 1289152 us, hash = c54aa82b1a58ef18
Results of dry-run 0[*] Attempting dry run with 'id:000494,time:0,execs:0,orig:921124-1.txt'...
    len = 48, map size = 47260, exec speed = 1272013 us, hash = 1b12770fb9416a4f
Results of dry-run 0[*] Attempting dry run with 'id:000495,time:0,execs:0,orig:921204-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1287812 us, hash = e910f8a43e718c53
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000496,time:0,execs:0,orig:921208-1.txt'...
    len = 50, map size = 47299, exec speed = 1293370 us, hash = 1ea037c8e42d2cd2
Results of dry-run 0[*] Attempting dry run with 'id:000497,time:0,execs:0,orig:921218-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000497,time:0,execs:0,orig:921218-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000498,time:0,execs:0,orig:930126-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000498,time:0,execs:0,orig:930126-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000499,time:0,execs:0,orig:930406-1.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47422, exec speed = 1954328 us, hash = bd4d44bc0e2151bd
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000500,time:0,execs:0,orig:930429-1.txt'...
[!] WARNING: instability detected during calibration
    len = 70, map size = 47420, exec speed = 1957141 us, hash = 151956a5c51b4b3e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000501,time:0,execs:0,orig:930513-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47434, exec speed = 1468399 us, hash = b61ad819e8afa265
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000502,time:0,execs:0,orig:930526-1.txt'...
    len = 48, map size = 47264, exec speed = 1275157 us, hash = 2c0af03dd73a3e28
Results of dry-run 0[*] Attempting dry run with 'id:000503,time:0,execs:0,orig:930527-1.txt'...
    len = 44, map size = 37884, exec speed = 283832 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000504,time:0,execs:0,orig:930529-1.txt'...
    len = 44, map size = 37884, exec speed = 283351 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000505,time:0,execs:0,orig:930603-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000505,time:0,execs:0,orig:930603-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000506,time:0,execs:0,orig:930603-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000506,time:0,execs:0,orig:930603-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000507,time:0,execs:0,orig:930603-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000507,time:0,execs:0,orig:930603-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000508,time:0,execs:0,orig:930614-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47280, exec speed = 1378514 us, hash = 87211783ec6af662
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000509,time:0,execs:0,orig:930614-2.txt'...
    len = 44, map size = 37884, exec speed = 282649 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000510,time:0,execs:0,orig:930622-1.txt'...
    len = 44, map size = 37884, exec speed = 283722 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000511,time:0,execs:0,orig:930622-2.txt'...
    len = 44, map size = 37884, exec speed = 283092 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000512,time:0,execs:0,orig:930628-1.txt'...
    len = 44, map size = 37884, exec speed = 282889 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000513,time:0,execs:0,orig:930630-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000513,time:0,execs:0,orig:930630-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000514,time:0,execs:0,orig:930718-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1285032 us, hash = 2d4940b56e200749
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000515,time:0,execs:0,orig:930719-1.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000516,time:0,execs:0,orig:930725-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000516,time:0,execs:0,orig:930725-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000517,time:0,execs:0,orig:930921-1.txt'...
    len = 48, map size = 47261, exec speed = 1284943 us, hash = dbc5acf006627f7f
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000518,time:0,execs:0,orig:930929-1.txt'...
    len = 44, map size = 37884, exec speed = 283487 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000519,time:0,execs:0,orig:930930-1.txt'...
    len = 48, map size = 47262, exec speed = 1300714 us, hash = 2ae56e3df92bb099
Results of dry-run 0[*] Attempting dry run with 'id:000520,time:0,execs:0,orig:931004-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000520,time:0,execs:0,orig:931004-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000521,time:0,execs:0,orig:931004-11.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000521,time:0,execs:0,orig:931004-11.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000522,time:0,execs:0,orig:931004-3.txt'...
    len = 56, map size = 47428, exec speed = 1970704 us, hash = a76c886002c2b319
Results of dry-run 0[*] Attempting dry run with 'id:000523,time:0,execs:0,orig:931004-5.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000523,time:0,execs:0,orig:931004-5.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000524,time:0,execs:0,orig:931004-7.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000524,time:0,execs:0,orig:931004-7.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000525,time:0,execs:0,orig:931004-9.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000525,time:0,execs:0,orig:931004-9.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000526,time:0,execs:0,orig:931005-1.txt'...
    len = 48, map size = 47261, exec speed = 1287175 us, hash = f18f77141003a098
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000527,time:0,execs:0,orig:931031-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1281830 us, hash = c92d88a50305c748
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000528,time:0,execs:0,orig:931102-1.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000529,time:0,execs:0,orig:931102-2.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000530,time:0,execs:0,orig:931110-1.txt'...
[!] WARNING: instability detected during calibration
    len = 66, map size = 47432, exec speed = 1973728 us, hash = b488b57fd84aebb9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000531,time:0,execs:0,orig:931110-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000531,time:0,execs:0,orig:931110-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000532,time:0,execs:0,orig:940122-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1703324 us, hash = a18394a1f99e6656
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000533,time:0,execs:0,orig:941014-2.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47434, exec speed = 2253023 us, hash = f2f0368e8c125586
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000534,time:0,execs:0,orig:941015-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000534,time:0,execs:0,orig:941015-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000535,time:0,execs:0,orig:941021-1.txt'...
    len = 50, map size = 47298, exec speed = 1289085 us, hash = d2603973c93a3cc3
Results of dry-run 0[*] Attempting dry run with 'id:000536,time:0,execs:0,orig:941031-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000536,time:0,execs:0,orig:941031-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000537,time:0,execs:0,orig:950221-1.txt'...
    len = 50, map size = 47420, exec speed = 1979985 us, hash = 5a9b3547cd8521b6
Results of dry-run 0[*] Attempting dry run with 'id:000538,time:0,execs:0,orig:950426-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000538,time:0,execs:0,orig:950426-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000539,time:0,execs:0,orig:950503-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000539,time:0,execs:0,orig:950503-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000540,time:0,execs:0,orig:950511-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000540,time:0,execs:0,orig:950511-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000541,time:0,execs:0,orig:950605-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000541,time:0,execs:0,orig:950605-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000542,time:0,execs:0,orig:950607-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000542,time:0,execs:0,orig:950607-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000543,time:0,execs:0,orig:950612-1.txt'...
    len = 44, map size = 37884, exec speed = 286858 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000544,time:0,execs:0,orig:950621-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000544,time:0,execs:0,orig:950621-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000545,time:0,execs:0,orig:950704-1.txt'...
    len = 48, map size = 47264, exec speed = 1283207 us, hash = bf9510d0ea1b70be
Results of dry-run 0[*] Attempting dry run with 'id:000546,time:0,execs:0,orig:950706-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1280950 us, hash = c92d88a50305c748
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000547,time:0,execs:0,orig:950710-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47262, exec speed = 1479568 us, hash = 8c7aa91f9b2db496
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000548,time:0,execs:0,orig:950714-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47263, exec speed = 1282423 us, hash = 13f1cc44dd47a316
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000549,time:0,execs:0,orig:950906-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1280983 us, hash = ab05d16d7cfc308a
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000550,time:0,execs:0,orig:951003-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1280366 us, hash = 7d7646ee2205c3d7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000551,time:0,execs:0,orig:951115-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1283695 us, hash = 5c44b5fd0dbefb98
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000552,time:0,execs:0,orig:960117-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47426, exec speed = 2172937 us, hash = 3cbf626eb4384c5e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000553,time:0,execs:0,orig:960209-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47433, exec speed = 2492857 us, hash = f6db354984b66217
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000554,time:0,execs:0,orig:960215-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000554,time:0,execs:0,orig:960215-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000555,time:0,execs:0,orig:960218-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000555,time:0,execs:0,orig:960218-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000556,time:0,execs:0,orig:960219-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1280386 us, hash = b4277dc374726db0
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000557,time:0,execs:0,orig:960311-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47264, exec speed = 1547482 us, hash = 13a0358a2ca93072
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000558,time:0,execs:0,orig:960311-2.txt'...
    len = 48, map size = 47264, exec speed = 1276529 us, hash = ef7b051b2710ef87
Results of dry-run 0[*] Attempting dry run with 'id:000559,time:0,execs:0,orig:960311-3.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47428, exec speed = 2037191 us, hash = 09bf9ecb031ec433
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000560,time:0,execs:0,orig:960317-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47264, exec speed = 1520668 us, hash = b8e6ef1ba7c1d545
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000561,time:0,execs:0,orig:960321-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000561,time:0,execs:0,orig:960321-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000562,time:0,execs:0,orig:960327-1.txt'...
    len = 48, map size = 47257, exec speed = 1286716 us, hash = e7e651947204b5b3
Results of dry-run 0[*] Attempting dry run with 'id:000563,time:0,execs:0,orig:960402-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47260, exec speed = 1447581 us, hash = eafa32aec59a21f7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000564,time:0,execs:0,orig:960512-1.txt'...
    len = 50, map size = 47426, exec speed = 1951280 us, hash = e15c939d5030f4cd
Results of dry-run 0[*] Attempting dry run with 'id:000565,time:0,execs:0,orig:960513-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000565,time:0,execs:0,orig:960513-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000566,time:0,execs:0,orig:960521-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47409, exec speed = 2283665 us, hash = 7c8fb6a0ea4b8bf4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000567,time:0,execs:0,orig:960608-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000567,time:0,execs:0,orig:960608-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000568,time:0,execs:0,orig:960801-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47262, exec speed = 1277894 us, hash = 9df32f3b1b2c4151
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000569,time:0,execs:0,orig:960909-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47260, exec speed = 1415384 us, hash = bf40349080fdefb0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000570,time:0,execs:0,orig:961004-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1615286 us, hash = ece7a33f848c8520
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000571,time:0,execs:0,orig:961017-1.txt'...
    len = 48, map size = 47259, exec speed = 1271187 us, hash = a8ae8e9cc2474b9c
Results of dry-run 0[*] Attempting dry run with 'id:000572,time:0,execs:0,orig:961017-2.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47263, exec speed = 9915737 us, hash = 4831f36362f1df6a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000573,time:0,execs:0,orig:961026-1.txt'...
    len = 48, map size = 47261, exec speed = 1442887 us, hash = 00ee57eba99529f8
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000574,time:0,execs:0,orig:961112-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1460028 us, hash = 9ad54fe1e459b544
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000575,time:0,execs:0,orig:961122-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000575,time:0,execs:0,orig:961122-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000576,time:0,execs:0,orig:961122-2.txt'...
    len = 48, map size = 47261, exec speed = 1279103 us, hash = 9ad54fe1e459b544
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000577,time:0,execs:0,orig:961213-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000577,time:0,execs:0,orig:961213-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000578,time:0,execs:0,orig:961223-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47308, exec speed = 1293691 us, hash = 7bc035314902572a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000579,time:0,execs:0,orig:970214-2.txt'...
    len = 48, map size = 47260, exec speed = 1278751 us, hash = e818259d0ae0d2b9
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000580,time:0,execs:0,orig:970217-1.txt'...
    len = 48, map size = 47262, exec speed = 1278505 us, hash = 0abe12893c924918
Results of dry-run 0[*] Attempting dry run with 'id:000581,time:0,execs:0,orig:980424-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000581,time:0,execs:0,orig:980424-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000582,time:0,execs:0,orig:980505-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47262, exec speed = 1476777 us, hash = 2033b8843f341847
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000583,time:0,execs:0,orig:980505-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000583,time:0,execs:0,orig:980505-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000584,time:0,execs:0,orig:980506-1.txt'...
    len = 48, map size = 47259, exec speed = 1267883 us, hash = 969424c7764c3fff
Results of dry-run 0[*] Attempting dry run with 'id:000585,time:0,execs:0,orig:980506-3.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47425, exec speed = 1963133 us, hash = 3fed2426d06f94d7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000586,time:0,execs:0,orig:980526-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000586,time:0,execs:0,orig:980526-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000587,time:0,execs:0,orig:980602-2.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1283146 us, hash = 7214e17340128230
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000588,time:0,execs:0,orig:980604-1.txt'...
    len = 54, map size = 47310, exec speed = 1285980 us, hash = e193be4d3f6e640d
Results of dry-run 0[*] Attempting dry run with 'id:000589,time:0,execs:0,orig:980612-1.txt'...
    len = 72, map size = 47424, exec speed = 1963364 us, hash = efae73342b7b8ecf
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000590,time:0,execs:0,orig:980701-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47422, exec speed = 1967923 us, hash = 0871ec37959884bd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000591,time:0,execs:0,orig:980707-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000591,time:0,execs:0,orig:980707-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000592,time:0,execs:0,orig:980716-1.txt'...
[!] WARNING: instability detected during calibration
    len = 58, map size = 47254, exec speed = 1456838 us, hash = 0760633dfa256854
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000593,time:0,execs:0,orig:980929-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000593,time:0,execs:0,orig:980929-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000594,time:0,execs:0,orig:981001-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000594,time:0,execs:0,orig:981001-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000595,time:0,execs:0,orig:981130-1.txt'...
    len = 48, map size = 47261, exec speed = 1281232 us, hash = 14421f9524ccbf20
Results of dry-run 0[*] Attempting dry run with 'id:000596,time:0,execs:0,orig:981206-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47273, exec speed = 1276963 us, hash = f3a72c7e1d92e196
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000597,time:0,execs:0,orig:990106-1.txt'...
    len = 48, map size = 47261, exec speed = 1289027 us, hash = 6deb6f18d43dfffe
Results of dry-run 0[*] Attempting dry run with 'id:000598,time:0,execs:0,orig:990106-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000598,time:0,execs:0,orig:990106-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000599,time:0,execs:0,orig:990127-1.txt'...
    len = 44, map size = 37884, exec speed = 283707 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000600,time:0,execs:0,orig:990128-1.txt'...
    len = 72, map size = 47423, exec speed = 1953363 us, hash = 67b329fc3569b583
Results of dry-run 0[*] Attempting dry run with 'id:000601,time:0,execs:0,orig:990211-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47260, exec speed = 1265935 us, hash = 4a3a05b19ffcb1b5
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000602,time:0,execs:0,orig:990324-1.txt'...
    len = 48, map size = 47261, exec speed = 1284943 us, hash = dabc9e71c40118af
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000603,time:0,execs:0,orig:990513-1.txt'...
    len = 48, map size = 47261, exec speed = 1292818 us, hash = d3c787e9f1d74d42
Results of dry-run 0[*] Attempting dry run with 'id:000604,time:0,execs:0,orig:990525-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000604,time:0,execs:0,orig:990525-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000605,time:0,execs:0,orig:990525-2.txt'...
[!] WARNING: instability detected during calibration
    len = 54, map size = 47260, exec speed = 1280678 us, hash = 9bbca649fa8bd45e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000606,time:0,execs:0,orig:990527-1.txt'...
    len = 48, map size = 47261, exec speed = 1282591 us, hash = c448124b7ef72c05
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000607,time:0,execs:0,orig:990804-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1288638 us, hash = 9a59eee056526ac4
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000608,time:0,execs:0,orig:990811-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000608,time:0,execs:0,orig:990811-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000609,time:0,execs:0,orig:990827-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000609,time:0,execs:0,orig:990827-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000610,time:0,execs:0,orig:990829-1.txt'...
    len = 54, map size = 47348, exec speed = 1287744 us, hash = 7f7917e71a519591
Results of dry-run 0[*] Attempting dry run with 'id:000611,time:0,execs:0,orig:990923-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000611,time:0,execs:0,orig:990923-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000612,time:0,execs:0,orig:991016-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000612,time:0,execs:0,orig:991016-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000613,time:0,execs:0,orig:991019-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47266, exec speed = 1274215 us, hash = 6de654abab073409
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000614,time:0,execs:0,orig:991201-1.txt'...
    len = 52, map size = 47430, exec speed = 1969479 us, hash = 34b3e5164e454050
Results of dry-run 0[*] Attempting dry run with 'id:000615,time:0,execs:0,orig:991202-1.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000616,time:0,execs:0,orig:991216-4.txt'...
    len = 50, map size = 47272, exec speed = 1811474 us, hash = 9baf5be9ef1340f1
Results of dry-run 0[*] Attempting dry run with 'id:000617,time:0,execs:0,orig:991227-1.txt'...
    len = 48, map size = 47261, exec speed = 1288305 us, hash = 0d72afea85106306
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000618,time:0,execs:0,orig:991228-1.txt'...
    len = 44, map size = 37884, exec speed = 539960 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000619,time:0,execs:0,orig:AtomicOps.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000619,time:0,execs:0,orig:AtomicOps.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000620,time:0,execs:0,orig:DuffsDevice.txt'...
    len = 51, map size = 47458, exec speed = 1976227 us, hash = acb23175b87869fb
Results of dry-run 0[*] Attempting dry run with 'id:000621,time:0,execs:0,orig:FloatPrecision.txt'...
[!] WARNING: instability detected during calibration
    len = 56, map size = 47625, exec speed = 1974902 us, hash = 828c67bb5d9afff7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000622,time:0,execs:0,orig:NotTest.txt'...
    len = 53, map size = 47436, exec speed = 2002853 us, hash = cc0b6dd1a05907f0
Results of dry-run 0[*] Attempting dry run with 'id:000623,time:0,execs:0,orig:PR1386.txt'...
    len = 50, map size = 47446, exec speed = 1962913 us, hash = a7053234768f9c56
Results of dry-run 0[*] Attempting dry run with 'id:000624,time:0,execs:0,orig:PR491.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47271, exec speed = 1268937 us, hash = 07e8ce10d14e453f
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000625,time:0,execs:0,orig:PR640.txt'...
    len = 49, map size = 47426, exec speed = 1957008 us, hash = 4ca6639ddd9671cc
Results of dry-run 0[*] Attempting dry run with 'id:000626,time:0,execs:0,orig:StructModifyTest.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000626,time:0,execs:0,orig:StructModifyTest.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000627,time:0,execs:0,orig:TestLoop.txt'...
    len = 48, map size = 47441, exec speed = 2043271 us, hash = 598761e5c29d8db2
Results of dry-run 0[*] Attempting dry run with 'id:000628,time:0,execs:0,orig:add_numbers.txt'...
    len = 53, map size = 47444, exec speed = 1949104 us, hash = 19990173afb9eb98
Results of dry-run 0[*] Attempting dry run with 'id:000629,time:0,execs:0,orig:align-2.txt'...
    len = 43, map size = 37884, exec speed = 281725 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000630,time:0,execs:0,orig:align-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000630,time:0,execs:0,orig:align-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000631,time:0,execs:0,orig:anon-1.txt'...
[!] WARNING: instability detected during calibration
    len = 46, map size = 47266, exec speed = 1452122 us, hash = 6dde5746a8587ddf
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000632,time:0,execs:0,orig:bf-pack-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000632,time:0,execs:0,orig:bf-pack-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000633,time:0,execs:0,orig:bf-sign-2.txt'...
    len = 49, map size = 47261, exec speed = 1286334 us, hash = 3ee6a921cd54a3bc
Results of dry-run 0[*] Attempting dry run with 'id:000634,time:0,execs:0,orig:bigstack.txt'...
    len = 44, map size = 37884, exec speed = 285386 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000635,time:0,execs:0,orig:bitfld-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000635,time:0,execs:0,orig:bitfld-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000636,time:0,execs:0,orig:bitfld-2.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47260, exec speed = 1279132 us, hash = 9608f49c9688f05b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000637,time:0,execs:0,orig:block-byref-test.txt'...
    len = 56, map size = 47257, exec speed = 1256666 us, hash = 4d7171221101efdf
Results of dry-run 0[*] Attempting dry run with 'id:000638,time:0,execs:0,orig:built-in-setjmp.txt'...
    len = 79, map size = 47423, exec speed = 1997407 us, hash = 31da05691ceed2aa
Results of dry-run 0[*] Attempting dry run with 'id:000639,time:0,execs:0,orig:builtin-prefetch-1.txt'...
    len = 60, map size = 47431, exec speed = 1965628 us, hash = d3a832c5058d5f02
Results of dry-run 0[*] Attempting dry run with 'id:000640,time:0,execs:0,orig:builtin-prefetch-3.txt'...
[!] WARNING: instability detected during calibration
    len = 58, map size = 47274, exec speed = 1371661 us, hash = c04fae3e7bb9497d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000641,time:0,execs:0,orig:builtin-prefetch-4.txt'...
    len = 58, map size = 47284, exec speed = 1436960 us, hash = 8d356135b4f23dc4
Results of dry-run 0[*] Attempting dry run with 'id:000642,time:0,execs:0,orig:builtin-prefetch-5.txt'...
[!] WARNING: instability detected during calibration
    len = 58, map size = 47275, exec speed = 1391408 us, hash = 081030d21b387990
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000643,time:0,execs:0,orig:builtin-prefetch-6.txt'...
[!] WARNING: instability detected during calibration
    len = 82, map size = 47435, exec speed = 2090756 us, hash = 9d1d18c23e27624d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000644,time:0,execs:0,orig:byval-alignment.txt'...
    len = 61, map size = 47650, exec speed = 1984774 us, hash = 6d5aa4d46521f07f
Results of dry-run 0[*] Attempting dry run with 'id:000645,time:0,execs:0,orig:callargs.txt'...
[!] WARNING: instability detected during calibration
    len = 76, map size = 47594, exec speed = 2257256 us, hash = d2d968a6c48159fe
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000646,time:0,execs:0,orig:cmpsf-1.txt'...
    len = 53, map size = 47424, exec speed = 1957085 us, hash = 102d30ea84c0098e
Results of dry-run 0[*] Attempting dry run with 'id:000647,time:0,execs:0,orig:compare-3.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47266, exec speed = 1274128 us, hash = 3191aca12be75adb
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000648,time:0,execs:0,orig:compare.txt'...
    len = 47, map size = 47445, exec speed = 1975688 us, hash = 686e0ba392ff81b4
Results of dry-run 0[*] Attempting dry run with 'id:000649,time:0,execs:0,orig:complex-1.txt'...
    len = 45, map size = 37884, exec speed = 283210 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000650,time:0,execs:0,orig:complex-3.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47309, exec speed = 1565962 us, hash = 265812a9a7d18a49
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000651,time:0,execs:0,orig:compndlit-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47261, exec speed = 1370163 us, hash = 841e642a1feeffc5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000652,time:0,execs:0,orig:conditional-gnu-ext.txt'...
    len = 46, map size = 37884, exec speed = 282303 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000653,time:0,execs:0,orig:const-addr-expr-1.txt'...
    len = 59, map size = 47431, exec speed = 1956033 us, hash = b5f1d5e464a2b6b8
Results of dry-run 0[*] Attempting dry run with 'id:000654,time:0,execs:0,orig:cvt-1.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47318, exec speed = 1273704 us, hash = 4c9494f8c45afbbb
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000655,time:0,execs:0,orig:divcmp-1.txt'...
    len = 44, map size = 37884, exec speed = 285580 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000656,time:0,execs:0,orig:divcmp-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000656,time:0,execs:0,orig:divcmp-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000657,time:0,execs:0,orig:divcmp-3.txt'...
    len = 48, map size = 47260, exec speed = 1265162 us, hash = 0195622bb71555bc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000658,time:0,execs:0,orig:divcmp-4.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000658,time:0,execs:0,orig:divcmp-4.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000659,time:0,execs:0,orig:divcmp-5.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1369520 us, hash = f982b5b951b8c4ba
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000660,time:0,execs:0,orig:divconst-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000660,time:0,execs:0,orig:divconst-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000661,time:0,execs:0,orig:divide_numbers_program1.txt'...
    len = 69, map size = 47485, exec speed = 1960818 us, hash = 4e9efe6b26375225
Results of dry-run 0[*] Attempting dry run with 'id:000662,time:0,execs:0,orig:doloop-1.txt'...
    len = 48, map size = 47266, exec speed = 1302439 us, hash = c981d7547450ada3
Results of dry-run 0[*] Attempting dry run with 'id:000663,time:0,execs:0,orig:doloop-2.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47261, exec speed = 1356169 us, hash = 9082cd39eabcdf6e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000664,time:0,execs:0,orig:enum-3.txt'...
[!] WARNING: instability detected during calibration
    len = 46, map size = 47262, exec speed = 1290628 us, hash = 93a261aff283e807
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000665,time:0,execs:0,orig:factorial_program.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47449, exec speed = 2045878 us, hash = fb6497440e4eff64
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000666,time:0,execs:0,orig:ffs-2.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47426, exec speed = 1956685 us, hash = 4e51996a40ea2132
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000667,time:0,execs:0,orig:float16-smoke.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47415, exec speed = 1960136 us, hash = d4a44c32f5427328
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000668,time:0,execs:0,orig:floatunsisf-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000668,time:0,execs:0,orig:floatunsisf-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000669,time:0,execs:0,orig:fprintf-1.txt'...
    len = 49, map size = 47448, exec speed = 2055064 us, hash = 24824f2fe784cc34
Results of dry-run 0[*] Attempting dry run with 'id:000670,time:0,execs:0,orig:globalrefs.txt'...
    len = 46, map size = 37884, exec speed = 283287 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000671,time:0,execs:0,orig:gofast.txt'...
    len = 52, map size = 47430, exec speed = 2280333 us, hash = dcfe2dd893b9255b
Results of dry-run 0[*] Attempting dry run with 'id:000672,time:0,execs:0,orig:ifcvt-onecmpl-abs-1.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47265, exec speed = 1277626 us, hash = 42035f562a99c0c2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000673,time:0,execs:0,orig:inst-check.txt'...
    len = 50, map size = 47261, exec speed = 1277129 us, hash = c49b7fc6c17e91c2
Results of dry-run 0[*] Attempting dry run with 'id:000674,time:0,execs:0,orig:ipa-sra-2.txt'...
    len = 49, map size = 47401, exec speed = 2101784 us, hash = ee9934193c464d41
Results of dry-run 0[*] Attempting dry run with 'id:000675,time:0,execs:0,orig:largest_number_program.txt'...
[!] WARNING: instability detected during calibration
    len = 66, map size = 47446, exec speed = 2030312 us, hash = 33954ba009e67301
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000676,time:0,execs:0,orig:leap_year_program.txt'...
    len = 57, map size = 47451, exec speed = 1950853 us, hash = 8635abf9b38acd4b
Results of dry-run 0[*] Attempting dry run with 'id:000677,time:0,execs:0,orig:longlong.txt'...
    len = 48, map size = 47264, exec speed = 1290145 us, hash = d5f666b696d472a1
Results of dry-run 0[*] Attempting dry run with 'id:000678,time:0,execs:0,orig:loop-1.txt'...
    len = 46, map size = 47261, exec speed = 1290773 us, hash = 5db051f560ddc34f
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000679,time:0,execs:0,orig:loop-10.txt'...
    len = 47, map size = 47264, exec speed = 1282015 us, hash = b7a873815677ab65
Results of dry-run 0[*] Attempting dry run with 'id:000680,time:0,execs:0,orig:loop-12.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000680,time:0,execs:0,orig:loop-12.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000681,time:0,execs:0,orig:loop-13.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47430, exec speed = 2125903 us, hash = a90d1a04367054e3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000682,time:0,execs:0,orig:loop-15.txt'...
    len = 43, map size = 37884, exec speed = 283634 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000683,time:0,execs:0,orig:loop-2b.txt'...
    len = 47, map size = 47264, exec speed = 1282718 us, hash = 382db2a817432093
Results of dry-run 0[*] Attempting dry run with 'id:000684,time:0,execs:0,orig:loop-2c.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000684,time:0,execs:0,orig:loop-2c.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000685,time:0,execs:0,orig:loop-2e.txt'...
    len = 47, map size = 47273, exec speed = 1276841 us, hash = e555e722e5661351
Results of dry-run 0[*] Attempting dry run with 'id:000686,time:0,execs:0,orig:loop-3.txt'...
    len = 46, map size = 47268, exec speed = 1282139 us, hash = 8a1fc23af9827238
Results of dry-run 0[*] Attempting dry run with 'id:000687,time:0,execs:0,orig:loop-3b.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000687,time:0,execs:0,orig:loop-3b.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000688,time:0,execs:0,orig:loop-3c.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:000689,time:0,execs:0,orig:loop-4b.txt'...
    len = 47, map size = 47261, exec speed = 1280245 us, hash = fcf922fb8e7bf2a5
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000690,time:0,execs:0,orig:loop-5.txt'...
    len = 46, map size = 47262, exec speed = 1292642 us, hash = f4c8ee90c1b4127b
Results of dry-run 0[*] Attempting dry run with 'id:000691,time:0,execs:0,orig:loop-6.txt'...
[!] WARNING: instability detected during calibration
    len = 46, map size = 47263, exec speed = 1295168 us, hash = 9ce0dc05920fa83e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000692,time:0,execs:0,orig:loop-7.txt'...
    len = 46, map size = 47261, exec speed = 1286847 us, hash = d267fd7c3ed06c97
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000693,time:0,execs:0,orig:loop-8.txt'...
    len = 48, map size = 47286, exec speed = 1286034 us, hash = 9f37a86ecc3c643f
Results of dry-run 0[*] Attempting dry run with 'id:000694,time:0,execs:0,orig:loop-9.txt'...
    len = 46, map size = 47270, exec speed = 1442132 us, hash = 3c1f68922ee20afc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000695,time:0,execs:0,orig:loop-ivopts-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000695,time:0,execs:0,orig:loop-ivopts-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000696,time:0,execs:0,orig:mayalias-1.txt'...
    len = 50, map size = 47261, exec speed = 1766100 us, hash = 1f81781b6d2c83d9
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000697,time:0,execs:0,orig:mayalias-2.txt'...
    len = 50, map size = 47261, exec speed = 1275625 us, hash = 0ba66294a77f673d
Results of dry-run 0[*] Attempting dry run with 'id:000698,time:0,execs:0,orig:memcpy-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000698,time:0,execs:0,orig:memcpy-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000699,time:0,execs:0,orig:memset-1.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47270, exec speed = 5741131 us, hash = 42eba3d61f866ad8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000700,time:0,execs:0,orig:memset-3.txt'...
    len = 44, map size = 37884, exec speed = 283566 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000701,time:0,execs:0,orig:mod-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000701,time:0,execs:0,orig:mod-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000702,time:0,execs:0,orig:ms_struct-bitfield-init.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000702,time:0,execs:0,orig:ms_struct-bitfield-init.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000703,time:0,execs:0,orig:ms_struct_pack_layout-1.txt'...
    len = 63, map size = 47260, exec speed = 1265389 us, hash = bf4479e837fce763
Results of dry-run 0[*] Attempting dry run with 'id:000704,time:0,execs:0,orig:multdi-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000704,time:0,execs:0,orig:multdi-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000705,time:0,execs:0,orig:nest-stdar-1.txt'...
    len = 54, map size = 47379, exec speed = 1294573 us, hash = 30e1fdb89cd4cd5c
Results of dry-run 0[*] Attempting dry run with 'id:000706,time:0,execs:0,orig:nestfunc-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000706,time:0,execs:0,orig:nestfunc-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000707,time:0,execs:0,orig:nestfunc-6.txt'...
    len = 33, map size = 37884, exec speed = 282206 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000708,time:0,execs:0,orig:nestfunc-7.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47426, exec speed = 1949581 us, hash = bd26a1f73333ae81
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000709,time:0,execs:0,orig:p18298.txt'...
[!] WARNING: instability detected during calibration
    len = 58, map size = 47435, exec speed = 2138001 us, hash = 2bd7fc49a45332d8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000710,time:0,execs:0,orig:packed-2.txt'...
    len = 48, map size = 47260, exec speed = 1273181 us, hash = f1e30627457acbcf
Results of dry-run 0[*] Attempting dry run with 'id:000711,time:0,execs:0,orig:positive_negative_program.txt'...
[!] WARNING: instability detected during calibration
    len = 65, map size = 47414, exec speed = 1950225 us, hash = 50234a43a16a99ca
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000712,time:0,execs:0,orig:pr15262.txt'...
    len = 47, map size = 47261, exec speed = 1680013 us, hash = c51eedde59ac8f6f
Results of dry-run 0[*] Attempting dry run with 'id:000713,time:0,execs:0,orig:pr16790-1.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47260, exec speed = 1341380 us, hash = 4b8482e683d4693d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000714,time:0,execs:0,orig:pr17078-1.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47260, exec speed = 1274671 us, hash = 0e6befe29dbaf623
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000715,time:0,execs:0,orig:pr17133.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47264, exec speed = 1490592 us, hash = 2653a4cab6bb8250
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000716,time:0,execs:0,orig:pr19005.txt'...
    len = 47, map size = 47264, exec speed = 1286821 us, hash = 6747ecbd2e6c2e5e
Results of dry-run 0[*] Attempting dry run with 'id:000717,time:0,execs:0,orig:pr19449.txt'...
    len = 47, map size = 47264, exec speed = 1285965 us, hash = 25af9ba46ee196fe
Results of dry-run 0[*] Attempting dry run with 'id:000718,time:0,execs:0,orig:pr19515.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1269983 us, hash = 545a6cf42e3924c1
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000719,time:0,execs:0,orig:pr19606.txt'...
    len = 47, map size = 47261, exec speed = 1439746 us, hash = a05cba5dfab2c49b
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000720,time:0,execs:0,orig:pr19689.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1267931 us, hash = 4554ea7c1f5f5721
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000721,time:0,execs:0,orig:pr20100-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000721,time:0,execs:0,orig:pr20100-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000722,time:0,execs:0,orig:pr20187-1.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47291, exec speed = 1267983 us, hash = 1845f2f03e4d63f8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000723,time:0,execs:0,orig:pr20466-1.txt'...
    len = 49, map size = 47260, exec speed = 1291027 us, hash = a2a45d6bc3a446a6
Results of dry-run 0[*] Attempting dry run with 'id:000724,time:0,execs:0,orig:pr21173.txt'...
    len = 59, map size = 47430, exec speed = 1950333 us, hash = fa425392c8b64f9a
Results of dry-run 0[*] Attempting dry run with 'id:000725,time:0,execs:0,orig:pr21964-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47273, exec speed = 1285307 us, hash = 1f04e7dfb9e63d2d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000726,time:0,execs:0,orig:pr22061-1.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47261, exec speed = 1281308 us, hash = 5f6063e7ff161fb4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000727,time:0,execs:0,orig:pr22061-3.txt'...
    len = 49, map size = 47261, exec speed = 1280529 us, hash = 1a02d7e6484062a9
Results of dry-run 0[*] Attempting dry run with 'id:000728,time:0,execs:0,orig:pr22429.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000728,time:0,execs:0,orig:pr22429.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000729,time:0,execs:0,orig:pr22493-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000729,time:0,execs:0,orig:pr22493-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000730,time:0,execs:0,orig:pr22630.txt'...
    len = 47, map size = 47264, exec speed = 1275967 us, hash = 9b11d878a9cb8a8d
Results of dry-run 0[*] Attempting dry run with 'id:000731,time:0,execs:0,orig:pr23047.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000731,time:0,execs:0,orig:pr23047.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000732,time:0,execs:0,orig:pr23135.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47297, exec speed = 1273127 us, hash = d2e0a50df229fc9d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000733,time:0,execs:0,orig:pr23604.txt'...
    len = 49, map size = 47273, exec speed = 1277171 us, hash = aaf4e2cb72c334d4
Results of dry-run 0[*] Attempting dry run with 'id:000734,time:0,execs:0,orig:pr24135.txt'...
    len = 49, map size = 47271, exec speed = 1618295 us, hash = 233f3b6dd2f3e37c
Results of dry-run 0[*] Attempting dry run with 'id:000735,time:0,execs:0,orig:pr24141.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000735,time:0,execs:0,orig:pr24141.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000736,time:0,execs:0,orig:pr25125.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000736,time:0,execs:0,orig:pr25125.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000737,time:0,execs:0,orig:pr25737.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47258, exec speed = 1421052 us, hash = 4b382e29f1337701
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000738,time:0,execs:0,orig:pr27260.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000738,time:0,execs:0,orig:pr27260.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000739,time:0,execs:0,orig:pr27364.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000739,time:0,execs:0,orig:pr27364.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000740,time:0,execs:0,orig:pr27671-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000740,time:0,execs:0,orig:pr27671-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000741,time:0,execs:0,orig:pr28289.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1276643 us, hash = ffd45ad59f963b11
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000742,time:0,execs:0,orig:pr28403.txt'...
    len = 61, map size = 47433, exec speed = 1971217 us, hash = 607052b9350a041c
Results of dry-run 0[*] Attempting dry run with 'id:000743,time:0,execs:0,orig:pr28651.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000743,time:0,execs:0,orig:pr28651.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000744,time:0,execs:0,orig:pr29006.txt'...
    len = 47, map size = 47265, exec speed = 1278686 us, hash = 24b4bd21a6b96adc
Results of dry-run 0[*] Attempting dry run with 'id:000745,time:0,execs:0,orig:pr29156.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000745,time:0,execs:0,orig:pr29156.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000746,time:0,execs:0,orig:pr29695-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000746,time:0,execs:0,orig:pr29695-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000747,time:0,execs:0,orig:pr29797-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000747,time:0,execs:0,orig:pr29797-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000748,time:0,execs:0,orig:pr30185.txt'...
    len = 43, map size = 37884, exec speed = 286737 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000749,time:0,execs:0,orig:pr30778.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1287722 us, hash = eb127abb40fb9c16
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000750,time:0,execs:0,orig:pr31072.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47264, exec speed = 1276531 us, hash = d4eb57ac8aa8c19f
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000751,time:0,execs:0,orig:pr31136.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000751,time:0,execs:0,orig:pr31136.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000752,time:0,execs:0,orig:pr31169.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000752,time:0,execs:0,orig:pr31169.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000753,time:0,execs:0,orig:pr31605.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000753,time:0,execs:0,orig:pr31605.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000754,time:0,execs:0,orig:pr32244-1.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47269, exec speed = 1274954 us, hash = dbef58805463ced1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000755,time:0,execs:0,orig:pr32500.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47265, exec speed = 1277907 us, hash = fbabdeb3d5887b1e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000756,time:0,execs:0,orig:pr33142.txt'...
    len = 49, map size = 47272, exec speed = 1282793 us, hash = f12c7ea84fb1588d
Results of dry-run 0[*] Attempting dry run with 'id:000757,time:0,execs:0,orig:pr33382.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1267236 us, hash = 66f1d319d85f146d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000758,time:0,execs:0,orig:pr33669.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000758,time:0,execs:0,orig:pr33669.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000759,time:0,execs:0,orig:pr33779-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000759,time:0,execs:0,orig:pr33779-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000760,time:0,execs:0,orig:pr33779-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000760,time:0,execs:0,orig:pr33779-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000761,time:0,execs:0,orig:pr33992.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47430, exec speed = 1968211 us, hash = f0a21f340ec3d456
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000762,time:0,execs:0,orig:pr34070-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000762,time:0,execs:0,orig:pr34070-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000763,time:0,execs:0,orig:pr34070-2.txt'...
    len = 49, map size = 47276, exec speed = 1280184 us, hash = 945049e965df4c6b
Results of dry-run 0[*] Attempting dry run with 'id:000764,time:0,execs:0,orig:pr34099-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000764,time:0,execs:0,orig:pr34099-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000765,time:0,execs:0,orig:pr34099.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000765,time:0,execs:0,orig:pr34099.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000766,time:0,execs:0,orig:pr34154.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000766,time:0,execs:0,orig:pr34154.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000767,time:0,execs:0,orig:pr34176.txt'...
    len = 61, map size = 47426, exec speed = 1971067 us, hash = 52bcab65fcb5df76
Results of dry-run 0[*] Attempting dry run with 'id:000768,time:0,execs:0,orig:pr34768-1.txt'...
    len = 49, map size = 47268, exec speed = 1275394 us, hash = c040028381ceb0a4
Results of dry-run 0[*] Attempting dry run with 'id:000769,time:0,execs:0,orig:pr34971.txt'...
    len = 49, map size = 47433, exec speed = 1959975 us, hash = 2baad3ec771bf986
Results of dry-run 0[*] Attempting dry run with 'id:000770,time:0,execs:0,orig:pr34982.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000770,time:0,execs:0,orig:pr34982.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000771,time:0,execs:0,orig:pr35231.txt'...
    len = 49, map size = 47272, exec speed = 1274914 us, hash = 292aa985f2848435
Results of dry-run 0[*] Attempting dry run with 'id:000772,time:0,execs:0,orig:pr35390.txt'...
    len = 47, map size = 47265, exec speed = 1279273 us, hash = 45ec89a848b5531d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000773,time:0,execs:0,orig:pr35800.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000773,time:0,execs:0,orig:pr35800.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000774,time:0,execs:0,orig:pr36034-1.txt'...
    len = 55, map size = 47437, exec speed = 1958318 us, hash = e7b083a4710c74cc
Results of dry-run 0[*] Attempting dry run with 'id:000775,time:0,execs:0,orig:pr36034-2.txt'...
[!] WARNING: instability detected during calibration
    len = 61, map size = 47434, exec speed = 1958860 us, hash = eb8943db4c199dc7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000776,time:0,execs:0,orig:pr36038.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000776,time:0,execs:0,orig:pr36038.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000777,time:0,execs:0,orig:pr36321.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47426, exec speed = 1949594 us, hash = cfabf59da7c6d8f1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000778,time:0,execs:0,orig:pr36343.txt'...
    len = 47, map size = 47300, exec speed = 1285631 us, hash = 884ed03d77aeefe1
Results of dry-run 0[*] Attempting dry run with 'id:000779,time:0,execs:0,orig:pr36765.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47392, exec speed = 1939526 us, hash = 0125c0b4b6848320
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000780,time:0,execs:0,orig:pr37102.txt'...
    len = 47, map size = 47265, exec speed = 1275878 us, hash = c15acd2602783df3
Results of dry-run 0[*] Attempting dry run with 'id:000781,time:0,execs:0,orig:pr37125.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000781,time:0,execs:0,orig:pr37125.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000782,time:0,execs:0,orig:pr37780.txt'...
    len = 47, map size = 47264, exec speed = 1274940 us, hash = 4433932ace6d842c
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000783,time:0,execs:0,orig:pr37882.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47265, exec speed = 1276493 us, hash = 057b137063ffb211
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000784,time:0,execs:0,orig:pr37924.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47262, exec speed = 1267443 us, hash = c039c251c5b38ff6
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000785,time:0,execs:0,orig:pr37931.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000785,time:0,execs:0,orig:pr37931.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000786,time:0,execs:0,orig:pr38048-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000786,time:0,execs:0,orig:pr38048-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000787,time:0,execs:0,orig:pr38236.txt'...
    len = 47, map size = 47266, exec speed = 1277980 us, hash = 3b5ab951035af439
Results of dry-run 0[*] Attempting dry run with 'id:000788,time:0,execs:0,orig:pr38422.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000788,time:0,execs:0,orig:pr38422.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000789,time:0,execs:0,orig:pr38819.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47262, exec speed = 1275594 us, hash = 26da3b4a15df2fd2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000790,time:0,execs:0,orig:pr38969.txt'...
[!] WARNING: instability detected during calibration
    len = 61, map size = 47314, exec speed = 1283702 us, hash = d7b9f2c2dbf5f738
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000791,time:0,execs:0,orig:pr39120.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1285091 us, hash = f6c220e053595e56
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000792,time:0,execs:0,orig:pr39233.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47265, exec speed = 1276614 us, hash = 911993c436bb4744
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000793,time:0,execs:0,orig:pr39240.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000793,time:0,execs:0,orig:pr39240.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000794,time:0,execs:0,orig:pr39501.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000794,time:0,execs:0,orig:pr39501.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000795,time:0,execs:0,orig:pr40022.txt'...
    len = 47, map size = 47264, exec speed = 1272960 us, hash = 0e4c2d4fd434ec4d
Results of dry-run 0[*] Attempting dry run with 'id:000796,time:0,execs:0,orig:pr40404.txt'...
    len = 47, map size = 47260, exec speed = 1268389 us, hash = ef9c1e10b074a0b1
Results of dry-run 0[*] Attempting dry run with 'id:000797,time:0,execs:0,orig:pr40493.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47264, exec speed = 1314544 us, hash = 61375e291db0271e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000798,time:0,execs:0,orig:pr40579.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47264, exec speed = 1671731 us, hash = 0cbc4accfa33cbb5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000799,time:0,execs:0,orig:pr41317.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1454805 us, hash = 545a6cf42e3924c1
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000800,time:0,execs:0,orig:pr41395-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000800,time:0,execs:0,orig:pr41395-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000801,time:0,execs:0,orig:pr41463.txt'...
    len = 47, map size = 47390, exec speed = 2103517 us, hash = a90d58270823ca5a
Results of dry-run 0[*] Attempting dry run with 'id:000802,time:0,execs:0,orig:pr41917.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1272483 us, hash = 545a6cf42e3924c1
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000803,time:0,execs:0,orig:pr41935.txt'...
    len = 51, map size = 47274, exec speed = 1279869 us, hash = 7f7f60cb3669c81e
Results of dry-run 0[*] Attempting dry run with 'id:000804,time:0,execs:0,orig:pr42154.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000804,time:0,execs:0,orig:pr42154.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000805,time:0,execs:0,orig:pr42248.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47288, exec speed = 1473473 us, hash = 5142f54d391f35da
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000806,time:0,execs:0,orig:pr42269-2.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47265, exec speed = 1271515 us, hash = 904d46308e04dfcc
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000807,time:0,execs:0,orig:pr42512.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47277, exec speed = 1285512 us, hash = a4b9707edd1b59b3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000808,time:0,execs:0,orig:pr42544.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1941341 us, hash = 545a6cf42e3924c1
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000809,time:0,execs:0,orig:pr42570.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47265, exec speed = 1279870 us, hash = 7fd57dee0cf660f4
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000810,time:0,execs:0,orig:pr42721.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47433, exec speed = 1965233 us, hash = 866a7cc801771af4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000811,time:0,execs:0,orig:pr43008.txt'...
    len = 47, map size = 47265, exec speed = 1279962 us, hash = 326ea0666fb0b62d
Results of dry-run 0[*] Attempting dry run with 'id:000812,time:0,execs:0,orig:pr43236.txt'...
    len = 47, map size = 47274, exec speed = 1294603 us, hash = 2672a92a9e52b01a
Results of dry-run 0[*] Attempting dry run with 'id:000813,time:0,execs:0,orig:pr43269.txt'...
    len = 47, map size = 47264, exec speed = 1276755 us, hash = d3538dfc623a9da6
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000814,time:0,execs:0,orig:pr43385.txt'...
    len = 43, map size = 37884, exec speed = 286575 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000815,time:0,execs:0,orig:pr43438.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1270154 us, hash = 2ab95ba898bc118f
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000816,time:0,execs:0,orig:pr43560.txt'...
    len = 30, map size = 37884, exec speed = 284792 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000817,time:0,execs:0,orig:pr43629.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47265, exec speed = 1279988 us, hash = f7713f34bda7785d
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000818,time:0,execs:0,orig:pr43783.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000818,time:0,execs:0,orig:pr43783.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000819,time:0,execs:0,orig:pr43784.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47268, exec speed = 1846497 us, hash = e404fa25a87afff9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000820,time:0,execs:0,orig:pr43835.txt'...
    len = 51, map size = 47397, exec speed = 1959873 us, hash = f4b77d3a0bfc24e7
Results of dry-run 0[*] Attempting dry run with 'id:000821,time:0,execs:0,orig:pr44164.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47265, exec speed = 1368462 us, hash = f9cbd3670c865952
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000822,time:0,execs:0,orig:pr44202-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47435, exec speed = 2065095 us, hash = 677ae69a5b84db70
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000823,time:0,execs:0,orig:pr44555.txt'...
    len = 47, map size = 47265, exec speed = 1302577 us, hash = 07ce41ae5024f47a
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000824,time:0,execs:0,orig:pr44683.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000824,time:0,execs:0,orig:pr44683.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000825,time:0,execs:0,orig:pr44828.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47283, exec speed = 1280181 us, hash = a0c50d8ba2cdf1d4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000826,time:0,execs:0,orig:pr44852.txt'...
    len = 47, map size = 47282, exec speed = 1445570 us, hash = 6605a8a46cace5b1
Results of dry-run 0[*] Attempting dry run with 'id:000827,time:0,execs:0,orig:pr44858.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000827,time:0,execs:0,orig:pr44858.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000828,time:0,execs:0,orig:pr45262.txt'...
    len = 47, map size = 47264, exec speed = 1274663 us, hash = bed2ab2efd0b7a27
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000829,time:0,execs:0,orig:pr45695.txt'...
    len = 47, map size = 47265, exec speed = 1628431 us, hash = f034d69c88bd4398
Results of dry-run 0[*] Attempting dry run with 'id:000830,time:0,execs:0,orig:pr46019.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47434, exec speed = 2375220 us, hash = 196d240a39db4c87
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000831,time:0,execs:0,orig:pr46309.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1291036 us, hash = 3137c8382b56c59c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000832,time:0,execs:0,orig:pr46316.txt'...
    len = 49, map size = 47434, exec speed = 1961012 us, hash = b873e0c0ffe59eab
Results of dry-run 0[*] Attempting dry run with 'id:000833,time:0,execs:0,orig:pr46909-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000833,time:0,execs:0,orig:pr46909-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000834,time:0,execs:0,orig:pr47148.txt'...
    len = 51, map size = 47433, exec speed = 1957554 us, hash = 85496ef01a4f92d6
Results of dry-run 0[*] Attempting dry run with 'id:000835,time:0,execs:0,orig:pr47155.txt'...
    len = 47, map size = 47261, exec speed = 1720511 us, hash = 3e64e15db369f455
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000836,time:0,execs:0,orig:pr47299.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000836,time:0,execs:0,orig:pr47299.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000837,time:0,execs:0,orig:pr47337.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47277, exec speed = 1291962 us, hash = f84c3c3ab868aab1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000838,time:0,execs:0,orig:pr48571-1.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47432, exec speed = 1957956 us, hash = b7b7c60d496eb503
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000839,time:0,execs:0,orig:pr48717.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1372240 us, hash = 8af5aead04e410dc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000840,time:0,execs:0,orig:pr48809.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000840,time:0,execs:0,orig:pr48809.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000841,time:0,execs:0,orig:pr48814-2.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47264, exec speed = 1589894 us, hash = 41b0f3c25f462f79
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000842,time:0,execs:0,orig:pr48973-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000842,time:0,execs:0,orig:pr48973-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000843,time:0,execs:0,orig:pr48973-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000843,time:0,execs:0,orig:pr48973-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000844,time:0,execs:0,orig:pr49073.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1268507 us, hash = 545a6cf42e3924c1
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000845,time:0,execs:0,orig:pr49161.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000845,time:0,execs:0,orig:pr49161.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000846,time:0,execs:0,orig:pr49186.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000846,time:0,execs:0,orig:pr49186.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000847,time:0,execs:0,orig:pr49218.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47396, exec speed = 1364204 us, hash = c113d8f539880397
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000848,time:0,execs:0,orig:pr49281.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000848,time:0,execs:0,orig:pr49281.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000849,time:0,execs:0,orig:pr49419.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47267, exec speed = 1402428 us, hash = af8cc4afcf858f8f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000850,time:0,execs:0,orig:pr49712.txt'...
    len = 47, map size = 47260, exec speed = 1266978 us, hash = 1690574628bf58ff
Results of dry-run 0[*] Attempting dry run with 'id:000851,time:0,execs:0,orig:pr50865.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000851,time:0,execs:0,orig:pr50865.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000852,time:0,execs:0,orig:pr51023.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000852,time:0,execs:0,orig:pr51023.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000853,time:0,execs:0,orig:pr51323.txt'...
    len = 47, map size = 47267, exec speed = 1278820 us, hash = e03edc85275357d8
Results of dry-run 0[*] Attempting dry run with 'id:000854,time:0,execs:0,orig:pr51466.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000854,time:0,execs:0,orig:pr51466.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000855,time:0,execs:0,orig:pr51877.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47284, exec speed = 1384212 us, hash = 320e4198e0973a86
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000856,time:0,execs:0,orig:pr52209.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000856,time:0,execs:0,orig:pr52209.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000857,time:0,execs:0,orig:pr52286.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000857,time:0,execs:0,orig:pr52286.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000858,time:0,execs:0,orig:pr52760.txt'...
    len = 47, map size = 47274, exec speed = 1299109 us, hash = 37a509ef68de2e51
Results of dry-run 0[*] Attempting dry run with 'id:000859,time:0,execs:0,orig:pr53084.txt'...
    len = 69, map size = 47422, exec speed = 1957546 us, hash = 1c73815334b08a4f
Results of dry-run 0[*] Attempting dry run with 'id:000860,time:0,execs:0,orig:pr53160.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47267, exec speed = 1371803 us, hash = b28ece0985f57614
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000861,time:0,execs:0,orig:pr53465.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47265, exec speed = 1275882 us, hash = fe6c16573ebf12e2
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000862,time:0,execs:0,orig:pr53645-2.txt'...
    len = 49, map size = 47421, exec speed = 1321499 us, hash = 15dcea0a21b572d5
Results of dry-run 0[*] Attempting dry run with 'id:000863,time:0,execs:0,orig:pr53645.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47360, exec speed = 1508223 us, hash = ae06402c12414803
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000864,time:0,execs:0,orig:pr53688.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47422, exec speed = 1952751 us, hash = 98708b8a687ee377
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000865,time:0,execs:0,orig:pr54937.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000865,time:0,execs:0,orig:pr54937.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000866,time:0,execs:0,orig:pr54985.txt'...
    len = 51, map size = 47271, exec speed = 1292298 us, hash = be03a9dc7222bf31
Results of dry-run 0[*] Attempting dry run with 'id:000867,time:0,execs:0,orig:pr55137.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000867,time:0,execs:0,orig:pr55137.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000868,time:0,execs:0,orig:pr55750.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47426, exec speed = 1961135 us, hash = fe7dc58e0f3a985a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000869,time:0,execs:0,orig:pr56051.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47262, exec speed = 1670727 us, hash = a1fef9fe07aa54c1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000870,time:0,execs:0,orig:pr56799.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000870,time:0,execs:0,orig:pr56799.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000871,time:0,execs:0,orig:pr56837.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000871,time:0,execs:0,orig:pr56837.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000872,time:0,execs:0,orig:pr56899.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000872,time:0,execs:0,orig:pr56899.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000873,time:0,execs:0,orig:pr56962.txt'...
    len = 51, map size = 47430, exec speed = 1964143 us, hash = bd080890fe8ad167
Results of dry-run 0[*] Attempting dry run with 'id:000874,time:0,execs:0,orig:pr56982.txt'...
    len = 47, map size = 47266, exec speed = 1298184 us, hash = c4d4df3cbcdf2259
Results of dry-run 0[*] Attempting dry run with 'id:000875,time:0,execs:0,orig:pr57124.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000875,time:0,execs:0,orig:pr57124.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000876,time:0,execs:0,orig:pr57130.txt'...
    len = 47, map size = 47272, exec speed = 1430079 us, hash = 1e65149763354e68
Results of dry-run 0[*] Attempting dry run with 'id:000877,time:0,execs:0,orig:pr57131.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000877,time:0,execs:0,orig:pr57131.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000878,time:0,execs:0,orig:pr57144.txt'...
    len = 47, map size = 47261, exec speed = 1275038 us, hash = 5a5cfe86092f51a9
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000879,time:0,execs:0,orig:pr57281.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47428, exec speed = 1947992 us, hash = e97edac31b3c10b9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000880,time:0,execs:0,orig:pr57321.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1269383 us, hash = 2a5a74d88eb25cbf
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000881,time:0,execs:0,orig:pr57344-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000881,time:0,execs:0,orig:pr57344-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000882,time:0,execs:0,orig:pr57344-2.txt'...
    len = 49, map size = 47410, exec speed = 1969649 us, hash = 4cdf4381576d5ad2
Results of dry-run 0[*] Attempting dry run with 'id:000883,time:0,execs:0,orig:pr57344-4.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000883,time:0,execs:0,orig:pr57344-4.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000884,time:0,execs:0,orig:pr57568.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1278688 us, hash = 0d6ff27a41551715
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000885,time:0,execs:0,orig:pr57860.txt'...
    len = 47, map size = 47272, exec speed = 1279160 us, hash = df4d432632fd96cd
Results of dry-run 0[*] Attempting dry run with 'id:000886,time:0,execs:0,orig:pr57861.txt'...
    len = 47, map size = 47260, exec speed = 1281425 us, hash = 50f6d40693e0f730
Results of dry-run 0[*] Attempting dry run with 'id:000887,time:0,execs:0,orig:pr57875.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47265, exec speed = 1278191 us, hash = c9a104175a921f93
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000888,time:0,execs:0,orig:pr57876.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47267, exec speed = 1292289 us, hash = b18dfe2ec4171066
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000889,time:0,execs:0,orig:pr57877.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000889,time:0,execs:0,orig:pr57877.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000890,time:0,execs:0,orig:pr58277-2.txt'...
    len = 63, map size = 47427, exec speed = 1966674 us, hash = 37683c8097e921a7
Results of dry-run 0[*] Attempting dry run with 'id:000891,time:0,execs:0,orig:pr58364.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000891,time:0,execs:0,orig:pr58364.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000892,time:0,execs:0,orig:pr58385.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1270972 us, hash = 1b8a93b3fa4d791f
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000893,time:0,execs:0,orig:pr58387.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000893,time:0,execs:0,orig:pr58387.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000894,time:0,execs:0,orig:pr58419.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47263, exec speed = 1271612 us, hash = 424b155f14aae34e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000895,time:0,execs:0,orig:pr58431.txt'...
    len = 47, map size = 47271, exec speed = 1278180 us, hash = ba9e5dbeca900513
Results of dry-run 0[*] Attempting dry run with 'id:000896,time:0,execs:0,orig:pr58564.txt'...
    len = 47, map size = 47261, exec speed = 1280680 us, hash = 14962547d110bb62
Results of dry-run 0[*] Attempting dry run with 'id:000897,time:0,execs:0,orig:pr58570.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47265, exec speed = 1281040 us, hash = 030eb9d449d1b6b0
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000898,time:0,execs:0,orig:pr58640-2.txt'...
    len = 49, map size = 47277, exec speed = 1437547 us, hash = 25c5735b8ae792be
Results of dry-run 0[*] Attempting dry run with 'id:000899,time:0,execs:0,orig:pr58640.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47263, exec speed = 1368107 us, hash = 86e7002d3ff03da5
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000900,time:0,execs:0,orig:pr58662.txt'...
    len = 47, map size = 47265, exec speed = 1283010 us, hash = c6afac668c1b43c9
Results of dry-run 0[*] Attempting dry run with 'id:000901,time:0,execs:0,orig:pr58726.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47271, exec speed = 1285636 us, hash = 9803131e46802d7e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000902,time:0,execs:0,orig:pr58943.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000902,time:0,execs:0,orig:pr58943.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000903,time:0,execs:0,orig:pr59014.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47420, exec speed = 1961987 us, hash = 73cb823381412e81
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000904,time:0,execs:0,orig:pr59101.txt'...
    len = 47, map size = 47265, exec speed = 1282951 us, hash = 82c98ce67b6d6444
Results of dry-run 0[*] Attempting dry run with 'id:000905,time:0,execs:0,orig:pr59221.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47265, exec speed = 1287201 us, hash = 4b1659e79945fb7f
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000906,time:0,execs:0,orig:pr59229.txt'...
    len = 59, map size = 47428, exec speed = 1983438 us, hash = c52f10db860d4df8
Results of dry-run 0[*] Attempting dry run with 'id:000907,time:0,execs:0,orig:pr59358.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000907,time:0,execs:0,orig:pr59358.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000908,time:0,execs:0,orig:pr59387.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47268, exec speed = 1275441 us, hash = 79b1e5533d12954d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000909,time:0,execs:0,orig:pr59388.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1392944 us, hash = b0f5b4c141af18bd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000910,time:0,execs:0,orig:pr59413.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000910,time:0,execs:0,orig:pr59413.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000911,time:0,execs:0,orig:pr59747.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47272, exec speed = 1315112 us, hash = fb079f2cd38e5880
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000912,time:0,execs:0,orig:pr60062.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47273, exec speed = 1288913 us, hash = 61ad291de36364e5
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000913,time:0,execs:0,orig:pr60454.txt'...
    len = 47, map size = 47264, exec speed = 1564250 us, hash = 9bd9ee21cd455bac
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000914,time:0,execs:0,orig:pr60822.txt'...
    len = 47, map size = 47269, exec speed = 1317532 us, hash = dc8e38e619a7c216
Results of dry-run 0[*] Attempting dry run with 'id:000915,time:0,execs:0,orig:pr60960.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000915,time:0,execs:0,orig:pr60960.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000916,time:0,execs:0,orig:pr61375.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47300, exec speed = 1892866 us, hash = e7d64500115ea939
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000917,time:0,execs:0,orig:pr61517.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1716235 us, hash = 6ad19c35862ef05e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000918,time:0,execs:0,orig:pr61682.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47322, exec speed = 1368364 us, hash = de6a7ce00f44297e
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000919,time:0,execs:0,orig:pr61725.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1340975 us, hash = 545a6cf42e3924c1
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000920,time:0,execs:0,orig:pr63659.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47260, exec speed = 1270159 us, hash = 545a6cf42e3924c1
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000921,time:0,execs:0,orig:pr63843.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000921,time:0,execs:0,orig:pr63843.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000922,time:0,execs:0,orig:pr64242.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47436, exec speed = 2175356 us, hash = 0e96abd3a8a1ffb6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000923,time:0,execs:0,orig:pr64255.txt'...
    len = 47, map size = 47264, exec speed = 1274784 us, hash = ab5b76b5bee3aed7
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000924,time:0,execs:0,orig:pr64260.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1268632 us, hash = c8129286e5cdc799
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000925,time:0,execs:0,orig:pr64682.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47270, exec speed = 1295901 us, hash = bfbc8586235432dc
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000926,time:0,execs:0,orig:pr64957.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47270, exec speed = 1641269 us, hash = 8f32008e8c1f13f8
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000927,time:0,execs:0,orig:pr64979.txt'...
    len = 47, map size = 47285, exec speed = 1289550 us, hash = b80aa8645894a769
Results of dry-run 0[*] Attempting dry run with 'id:000928,time:0,execs:0,orig:pr65053-1.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47258, exec speed = 1448930 us, hash = 73e2b247edb5b483
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000929,time:0,execs:0,orig:pr65053-2.txt'...
    len = 49, map size = 47265, exec speed = 1277099 us, hash = 2a10069708f044bb
Results of dry-run 0[*] Attempting dry run with 'id:000930,time:0,execs:0,orig:pr65170.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000930,time:0,execs:0,orig:pr65170.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000931,time:0,execs:0,orig:pr65215-1.txt'...
    len = 49, map size = 47456, exec speed = 1974682 us, hash = 3439eba2b2cde2a2
Results of dry-run 0[*] Attempting dry run with 'id:000932,time:0,execs:0,orig:pr65215-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000932,time:0,execs:0,orig:pr65215-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000933,time:0,execs:0,orig:pr65215-4.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47268, exec speed = 1284779 us, hash = bcc9b01e414f666b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000934,time:0,execs:0,orig:pr65215-5.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47268, exec speed = 1466586 us, hash = fc6b7e0101785118
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000935,time:0,execs:0,orig:pr65216.txt'...
    len = 47, map size = 47270, exec speed = 1462673 us, hash = d59f947736941973
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000936,time:0,execs:0,orig:pr65418-1.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47262, exec speed = 1497068 us, hash = 2c27d198d1ac257a
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000937,time:0,execs:0,orig:pr66187.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000937,time:0,execs:0,orig:pr66187.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000938,time:0,execs:0,orig:pr66556.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47263, exec speed = 1344868 us, hash = 16288985e04255e4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000939,time:0,execs:0,orig:pr66757.txt'...
[!] WARNING: instability detected during calibration
    len = 71, map size = 47429, exec speed = 1954997 us, hash = b9b9e105da5310f1
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000940,time:0,execs:0,orig:pr66940.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000940,time:0,execs:0,orig:pr66940.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000941,time:0,execs:0,orig:pr67037.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47265, exec speed = 1282522 us, hash = 84e8944aff231d8b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000942,time:0,execs:0,orig:pr67226.txt'...
    len = 51, map size = 47272, exec speed = 1279785 us, hash = 4561fe5b8d3c4fcc
Results of dry-run 0[*] Attempting dry run with 'id:000943,time:0,execs:0,orig:pr67714.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47264, exec speed = 1573894 us, hash = bc01906da8737671
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000944,time:0,execs:0,orig:pr67781.txt'...
    len = 49, map size = 47272, exec speed = 1281363 us, hash = 39dd0fe162435a7d
Results of dry-run 0[*] Attempting dry run with 'id:000945,time:0,execs:0,orig:pr67929_1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000945,time:0,execs:0,orig:pr67929_1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000946,time:0,execs:0,orig:pr68143_1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000946,time:0,execs:0,orig:pr68143_1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000947,time:0,execs:0,orig:pr68185.txt'...
    len = 47, map size = 47274, exec speed = 1279795 us, hash = 564b87731a22fae7
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000948,time:0,execs:0,orig:pr68249.txt'...
    len = 47, map size = 47301, exec speed = 1282992 us, hash = 5af1a54260f2efa9
Results of dry-run 0[*] Attempting dry run with 'id:000949,time:0,execs:0,orig:pr68250.txt'...
    len = 47, map size = 47280, exec speed = 1286952 us, hash = bc66cf2118b22b0b
Results of dry-run 0[*] Attempting dry run with 'id:000950,time:0,execs:0,orig:pr68321.txt'...
[!] WARNING: instability detected during calibration
    len = 59, map size = 47430, exec speed = 1959476 us, hash = 639be23068d7ff75
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000951,time:0,execs:0,orig:pr68328.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47264, exec speed = 1281920 us, hash = b918e14193f44b67
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000952,time:0,execs:0,orig:pr68376-1.txt'...
    len = 49, map size = 47270, exec speed = 1282657 us, hash = 3d2a0a6b14528136
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000953,time:0,execs:0,orig:pr68381.txt'...
    len = 49, map size = 47278, exec speed = 1293761 us, hash = 82aa8780b508a976
Results of dry-run 0[*] Attempting dry run with 'id:000954,time:0,execs:0,orig:pr68506.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47267, exec speed = 1285667 us, hash = 471aeff5052880fc
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000955,time:0,execs:0,orig:pr68532.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47307, exec speed = 1286590 us, hash = c433bc96a2fe5f0b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000956,time:0,execs:0,orig:pr68624.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000956,time:0,execs:0,orig:pr68624.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000957,time:0,execs:0,orig:pr68648.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000957,time:0,execs:0,orig:pr68648.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000958,time:0,execs:0,orig:pr68841.txt'...
    len = 43, map size = 37884, exec speed = 284924 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000959,time:0,execs:0,orig:pr68911.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47261, exec speed = 1384383 us, hash = a66d5cbedd66e4ae
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000960,time:0,execs:0,orig:pr69097-1.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47278, exec speed = 1360264 us, hash = b93b79e9449083ef
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000961,time:0,execs:0,orig:pr69097-2.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47272, exec speed = 1289857 us, hash = 077f8c0a21e25e3b
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000962,time:0,execs:0,orig:pr69320-1.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47262, exec speed = 1592632 us, hash = 6f5faa8be184bf93
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000963,time:0,execs:0,orig:pr69320-2.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47259, exec speed = 1281937 us, hash = 58c2d6e9293ad051
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000964,time:0,execs:0,orig:pr69320-3.txt'...
    len = 49, map size = 47261, exec speed = 1290911 us, hash = b26d4f5574253a4a
Results of dry-run 0[*] Attempting dry run with 'id:000965,time:0,execs:0,orig:pr69320-4.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47268, exec speed = 1286345 us, hash = dbceb3c761207fe0
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000966,time:0,execs:0,orig:pr69403.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47273, exec speed = 1283742 us, hash = c9d7a285ad5f18f3
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000967,time:0,execs:0,orig:pr69691.txt'...
    len = 47, map size = 47263, exec speed = 1323661 us, hash = 53404eba205cb8e8
Results of dry-run 0[*] Attempting dry run with 'id:000968,time:0,execs:0,orig:pr70005.txt'...
    len = 47, map size = 47266, exec speed = 1283695 us, hash = c0b482cb4a97adbe
Results of dry-run 0[*] Attempting dry run with 'id:000969,time:0,execs:0,orig:pr70127.txt'...
    len = 47, map size = 47282, exec speed = 1281945 us, hash = 704c0f4d5b5189ea
Results of dry-run 0[*] Attempting dry run with 'id:000970,time:0,execs:0,orig:pr70222-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000970,time:0,execs:0,orig:pr70222-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000971,time:0,execs:0,orig:pr70429.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000971,time:0,execs:0,orig:pr70429.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000972,time:0,execs:0,orig:pr70460.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000972,time:0,execs:0,orig:pr70460.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000973,time:0,execs:0,orig:pr71335.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47279, exec speed = 1277479 us, hash = 3015193bbfbe4d3d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000974,time:0,execs:0,orig:pr71494.txt'...
    len = 47, map size = 47257, exec speed = 1276387 us, hash = 556ca5faa064b8c0
Results of dry-run 0[*] Attempting dry run with 'id:000975,time:0,execs:0,orig:pr71550.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47262, exec speed = 1279937 us, hash = 405dca4a70ba27cb
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000976,time:0,execs:0,orig:pr71554.txt'...
    len = 47, map size = 47264, exec speed = 1279992 us, hash = a5bec80ecd566fb7
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000977,time:0,execs:0,orig:pr71700.txt'...
    len = 47, map size = 47265, exec speed = 1276669 us, hash = c60df0518e487a91
Results of dry-run 0[*] Attempting dry run with 'id:000978,time:0,execs:0,orig:pr7284-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000978,time:0,execs:0,orig:pr7284-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000979,time:0,execs:0,orig:pr77766.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47271, exec speed = 1270744 us, hash = d437ae794afc17d5
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000980,time:0,execs:0,orig:pr77767.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000980,time:0,execs:0,orig:pr77767.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000981,time:0,execs:0,orig:pr78378.txt'...
    len = 47, map size = 47264, exec speed = 1276624 us, hash = 014a483e98584afe
Results of dry-run 0[*] Attempting dry run with 'id:000982,time:0,execs:0,orig:pr78436.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47273, exec speed = 1277734 us, hash = d307c85fdf4305cd
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000983,time:0,execs:0,orig:pr78477.txt'...
    len = 47, map size = 47276, exec speed = 1275912 us, hash = acf9db327e60bc83
Results of dry-run 0[*] Attempting dry run with 'id:000984,time:0,execs:0,orig:pr78586.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000984,time:0,execs:0,orig:pr78586.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000985,time:0,execs:0,orig:pr78617.txt'...
    len = 49, map size = 47280, exec speed = 1275849 us, hash = e3270c1d93fc8571
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000986,time:0,execs:0,orig:pr78622.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000986,time:0,execs:0,orig:pr78622.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000987,time:0,execs:0,orig:pr78856.txt'...
    len = 59, map size = 47434, exec speed = 1958531 us, hash = d331d8155ea7ab0b
Results of dry-run 0[*] Attempting dry run with 'id:000988,time:0,execs:0,orig:pr79121.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47272, exec speed = 1275486 us, hash = ad1f89a5c5cfc0bd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000989,time:0,execs:0,orig:pr79286.txt'...
    len = 47, map size = 47442, exec speed = 1963322 us, hash = 7874083921ab65c7
Results of dry-run 0[*] Attempting dry run with 'id:000990,time:0,execs:0,orig:pr79327.txt'...
    len = 47, map size = 47290, exec speed = 1336457 us, hash = bcb68520703ae792
Results of dry-run 0[*] Attempting dry run with 'id:000991,time:0,execs:0,orig:pr79354.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47290, exec speed = 1284925 us, hash = b9b2f5d5509aa6b4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000992,time:0,execs:0,orig:pr79388.txt'...
    len = 47, map size = 47265, exec speed = 1277390 us, hash = e5c0a2a15afeaeab
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:000993,time:0,execs:0,orig:pr79450.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000993,time:0,execs:0,orig:pr79450.txt' results in a crash, skipping
[*] Attempting dry run with 'id:000994,time:0,execs:0,orig:pr79737-1.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47265, exec speed = 1291380 us, hash = fa29f55cb9dd118d
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000995,time:0,execs:0,orig:pr79737-2.txt'...
    len = 59, map size = 47270, exec speed = 1283154 us, hash = 3cdd41c5bfe558e7
Results of dry-run 0[*] Attempting dry run with 'id:000996,time:0,execs:0,orig:pr80153.txt'...
[!] WARNING: instability detected during calibration
    len = 71, map size = 47431, exec speed = 1957560 us, hash = d9581459d372f676
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000997,time:0,execs:0,orig:pr81281.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47264, exec speed = 1278470 us, hash = 44efe873c473ad79
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000998,time:0,execs:0,orig:pr81503.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47267, exec speed = 1273210 us, hash = 017c40d6d6eafd88
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:000999,time:0,execs:0,orig:pr81555.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:000999,time:0,execs:0,orig:pr81555.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001000,time:0,execs:0,orig:pr81556.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001000,time:0,execs:0,orig:pr81556.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001001,time:0,execs:0,orig:pr81588.txt'...
[!] WARNING: instability detected during calibration
    len = 51, map size = 47432, exec speed = 1971712 us, hash = db5f2b1007be8cc6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001002,time:0,execs:0,orig:pr81913.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47418, exec speed = 2204504 us, hash = 1eddac8c2edb47a5
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001003,time:0,execs:0,orig:pr82954.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001003,time:0,execs:0,orig:pr82954.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001004,time:0,execs:0,orig:pr83269.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47269, exec speed = 1276049 us, hash = aa13f2c718a8ceb4
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001005,time:0,execs:0,orig:pr83298.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001005,time:0,execs:0,orig:pr83298.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001006,time:0,execs:0,orig:pr83477.txt'...
    len = 47, map size = 47265, exec speed = 1279252 us, hash = 76c637465581415e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001007,time:0,execs:0,orig:pr84169.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001007,time:0,execs:0,orig:pr84169.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001008,time:0,execs:0,orig:pr85156.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001008,time:0,execs:0,orig:pr85156.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001009,time:0,execs:0,orig:pr85169.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001009,time:0,execs:0,orig:pr85169.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001010,time:0,execs:0,orig:pr85529-1.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47264, exec speed = 1278016 us, hash = bffc3db143a020b8
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001011,time:0,execs:0,orig:pr85582-1.txt'...
    len = 49, map size = 47268, exec speed = 1273428 us, hash = 93f449220863b98b
Results of dry-run 0[*] Attempting dry run with 'id:001012,time:0,execs:0,orig:pr85582-3.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001012,time:0,execs:0,orig:pr85582-3.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001013,time:0,execs:0,orig:pr85756.txt'...
    len = 47, map size = 47271, exec speed = 1272148 us, hash = 856edebbfeb8fe6a
Results of dry-run 0[*] Attempting dry run with 'id:001014,time:0,execs:0,orig:pr86231.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001014,time:0,execs:0,orig:pr86231.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001015,time:0,execs:0,orig:pr86492.txt'...
    len = 47, map size = 47265, exec speed = 1279247 us, hash = ec48d7f94499450b
Results of dry-run 0[*] Attempting dry run with 'id:001016,time:0,execs:0,orig:pr86528.txt'...
    len = 59, map size = 47433, exec speed = 1993094 us, hash = df411c90f84987d4
Results of dry-run 0[*] Attempting dry run with 'id:001017,time:0,execs:0,orig:pr86714.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47263, exec speed = 1301520 us, hash = 1238dcb898698f2c
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001018,time:0,execs:0,orig:pr86844.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001018,time:0,execs:0,orig:pr86844.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001019,time:0,execs:0,orig:pr87053.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001019,time:0,execs:0,orig:pr87053.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001020,time:0,execs:0,orig:pr87290.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47269, exec speed = 1846289 us, hash = a8e873bb5b62302f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001021,time:0,execs:0,orig:pr87623.txt'...
    len = 47, map size = 47265, exec speed = 1285632 us, hash = b3ddbca792f14e41
Results of dry-run 0[*] Attempting dry run with 'id:001022,time:0,execs:0,orig:pr88693.txt'...
    len = 69, map size = 47426, exec speed = 1972057 us, hash = 7c90e554668cbd36
Results of dry-run 0[*] Attempting dry run with 'id:001023,time:0,execs:0,orig:pr89826.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47264, exec speed = 1283037 us, hash = a1535380f55b87ea
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001024,time:0,execs:0,orig:pr90025.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47270, exec speed = 1291053 us, hash = 69b8c550c3e764a3
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001025,time:0,execs:0,orig:pr90949.txt'...
    len = 49, map size = 47433, exec speed = 1960647 us, hash = 071294b96ff11aa6
Results of dry-run 0[*] Attempting dry run with 'id:001026,time:0,execs:0,orig:pr91137.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47272, exec speed = 17021146 us, hash = dcb30cd499b6e5e9
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001027,time:0,execs:0,orig:printf-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001027,time:0,execs:0,orig:printf-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001028,time:0,execs:0,orig:product_numbers.txt'...
[!] WARNING: instability detected during calibration
    len = 61, map size = 47551, exec speed = 2275568 us, hash = 4b37b8377acba42f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001029,time:0,execs:0,orig:product_numbers_program.txt'...
[!] WARNING: instability detected during calibration
    len = 69, map size = 47567, exec speed = 1960464 us, hash = 51802c99b3a17df7
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001030,time:0,execs:0,orig:pta-field-2.txt'...
    len = 53, map size = 47271, exec speed = 1287244 us, hash = c571e69ddd90803b
Results of dry-run 0[*] Attempting dry run with 'id:001031,time:0,execs:0,orig:pure-1.txt'...
[!] WARNING: instability detected during calibration
    len = 46, map size = 47261, exec speed = 1752535 us, hash = b27a7d2ab92a72ff
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001032,time:0,execs:0,orig:restrict-1.txt'...
[!] WARNING: instability detected during calibration
    len = 50, map size = 47264, exec speed = 1849665 us, hash = 5d55d856ba0800ef
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001033,time:0,execs:0,orig:scal-to-vec3.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47258, exec speed = 1436503 us, hash = 07ac45b2edc47eb4
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001034,time:0,execs:0,orig:scope-1.txt'...
[!] WARNING: instability detected during calibration
    len = 47, map size = 47259, exec speed = 1395143 us, hash = 9b2da7a980e756aa
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001035,time:0,execs:0,orig:shiftdi.txt'...
    len = 47, map size = 47264, exec speed = 1268870 us, hash = 32c2c4d4dd8cbbd3
Results of dry-run 0[*] Attempting dry run with 'id:001036,time:0,execs:0,orig:shiftopt-1.txt'...
    len = 52, map size = 47427, exec speed = 1952708 us, hash = 6446f4c67111c90e
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001037,time:0,execs:0,orig:simd-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001037,time:0,execs:0,orig:simd-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001038,time:0,execs:0,orig:simd-2.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001038,time:0,execs:0,orig:simd-2.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001039,time:0,execs:0,orig:simd-5.txt'...
    len = 46, map size = 47423, exec speed = 1963182 us, hash = 160297e35d39d02a
Results of dry-run 0[*] Attempting dry run with 'id:001040,time:0,execs:0,orig:simd-6.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001040,time:0,execs:0,orig:simd-6.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001041,time:0,execs:0,orig:square_program1.txt'...
    len = 55, map size = 47447, exec speed = 1956765 us, hash = c487417493c74ce6
Results of dry-run 0[*] Attempting dry run with 'id:001042,time:0,execs:0,orig:ssad-run.txt'...
    len = 48, map size = 47342, exec speed = 1304686 us, hash = 192c0feeeb73f0c6
Results of dry-run 0[*] Attempting dry run with 'id:001043,time:0,execs:0,orig:stdarg-3.txt'...
    len = 44, map size = 37884, exec speed = 282909 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001044,time:0,execs:0,orig:stdarg-4.txt'...
    len = 58, map size = 47429, exec speed = 1965009 us, hash = 7bcaa91fa90e8809
Results of dry-run 0[*] Attempting dry run with 'id:001045,time:0,execs:0,orig:strcpy-2.txt'...
[!] WARNING: instability detected during calibration
    len = 70, map size = 47424, exec speed = 1967043 us, hash = 58b636a634ef3811
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001046,time:0,execs:0,orig:strct-pack-2.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47260, exec speed = 1276231 us, hash = 5690c9bdd2c11ecd
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001047,time:0,execs:0,orig:strct-pack-3.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47267, exec speed = 1351136 us, hash = f90f6a742a3defbf
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001048,time:0,execs:0,orig:strct-varg-1.txt'...
    len = 35, map size = 37884, exec speed = 284296 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001049,time:0,execs:0,orig:string-opt-17.txt'...
    len = 53, map size = 47263, exec speed = 1503421 us, hash = a5777067ece3f5b4
Results of dry-run 0[*] Attempting dry run with 'id:001050,time:0,execs:0,orig:string-opt-18.txt'...
    len = 53, map size = 47265, exec speed = 1514134 us, hash = ea2d8e543b183426
Results of dry-run 0[*] Attempting dry run with 'id:001051,time:0,execs:0,orig:struct-aliasing-1.txt'...
[!] WARNING: instability detected during calibration
    len = 57, map size = 47268, exec speed = 1560929 us, hash = 10eea47e00f139ab
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001052,time:0,execs:0,orig:struct-cpy-1.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47268, exec speed = 1528817 us, hash = ba67ee63c31bdb41
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001053,time:0,execs:0,orig:struct-ini-3.txt'...
[!] WARNING: instability detected during calibration
    len = 64, map size = 47261, exec speed = 1693906 us, hash = 4430fc4f7f3ad297
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001054,time:0,execs:0,orig:struct-ret-2.txt'...
[!] WARNING: instability detected during calibration
    len = 52, map size = 47260, exec speed = 2036832 us, hash = c099767b1a1d1be5
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001055,time:0,execs:0,orig:subtract_numbers_program1.txt'...
[!] WARNING: instability detected during calibration
    len = 67, map size = 47444, exec speed = 2108785 us, hash = ca804b34956977b2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001056,time:0,execs:0,orig:sum_numbers_program.txt'...
    len = 61, map size = 47443, exec speed = 1943584 us, hash = 67d7f31797548b1f
Results of dry-run 0[*] Attempting dry run with 'id:001057,time:0,execs:0,orig:sumarray.txt'...
[!] WARNING: instability detected during calibration
    len = 48, map size = 47457, exec speed = 1960702 us, hash = 70de55ebff2dc44f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001058,time:0,execs:0,orig:sumarray2d.txt'...
    len = 52, map size = 47450, exec speed = 1973888 us, hash = aaad52c2a1ea4a86
Results of dry-run 0[*] Attempting dry run with 'id:001059,time:0,execs:0,orig:sumarraymalloc.txt'...
    len = 54, map size = 47446, exec speed = 2088569 us, hash = 77275d7577888227
Results of dry-run 0[*] Attempting dry run with 'id:001060,time:0,execs:0,orig:switch-1.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001060,time:0,execs:0,orig:switch-1.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001061,time:0,execs:0,orig:t.txt'...
[!] WARNING: instability detected during calibration
    len = 43, map size = 47443, exec speed = 1948959 us, hash = f4969a9556e1a9bc
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001062,time:0,execs:0,orig:test_indvars.txt'...
    len = 48, map size = 37884, exec speed = 283001 us, hash = 48bc3f7be21f6875
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[*] Attempting dry run with 'id:001063,time:0,execs:0,orig:testcase-Expr-1.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47442, exec speed = 1952495 us, hash = d8579760da752b78
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001064,time:0,execs:0,orig:testcase-ExprConstant-1.txt'...
[!] WARNING: instability detected during calibration
    len = 63, map size = 47432, exec speed = 1939074 us, hash = b5fc5fcb05fae7ea
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001065,time:0,execs:0,orig:testcase-InstCombine-1.txt'...
    len = 62, map size = 47266, exec speed = 1274611 us, hash = 2bf1bfa6949e8de3
Results of dry-run 0[*] Attempting dry run with 'id:001066,time:0,execs:0,orig:unroll-1.txt'...
[!] WARNING: instability detected during calibration
    len = 60, map size = 47424, exec speed = 2264933 us, hash = 2d8022c43fee83dd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001067,time:0,execs:0,orig:usmul.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001067,time:0,execs:0,orig:usmul.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001068,time:0,execs:0,orig:va-arg-11.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47260, exec speed = 1731137 us, hash = 93bc6f4e0613dd45
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001069,time:0,execs:0,orig:va-arg-12.txt'...
[!] WARNING: instability detected during calibration
    len = 91, map size = 47433, exec speed = 2359643 us, hash = f51640c66287fabd
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001070,time:0,execs:0,orig:va-arg-14.txt'...
[!] WARNING: instability detected during calibration
    len = 49, map size = 47262, exec speed = 1419202 us, hash = 5e6843b59aa8fc53
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001071,time:0,execs:0,orig:va-arg-15.txt'...
[!] WARNING: instability detected during calibration
    len = 113, map size = 47429, exec speed = 2427704 us, hash = c7a1929f83088d1f
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001072,time:0,execs:0,orig:va-arg-17.txt'...
    len = 83, map size = 47293, exec speed = 1326546 us, hash = 2318c38876485af8
Results of dry-run 0[*] Attempting dry run with 'id:001073,time:0,execs:0,orig:va-arg-20.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001073,time:0,execs:0,orig:va-arg-20.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001074,time:0,execs:0,orig:va-arg-21.txt'...
    len = 59, map size = 47418, exec speed = 1984486 us, hash = 02c6aae4fe35b4c6
Results of dry-run 0[*] Attempting dry run with 'id:001075,time:0,execs:0,orig:va-arg-23.txt'...
[!] WARNING: instability detected during calibration
    len = 66, map size = 47267, exec speed = 1563851 us, hash = 23ccc3ea31e5b445
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001076,time:0,execs:0,orig:va-arg-24.txt'...
    len = 49, map size = 47257, exec speed = 1293319 us, hash = eba09274f38edc4d
Results of dry-run 0[*] Attempting dry run with 'id:001077,time:0,execs:0,orig:vla-dealloc-1.txt'...
Results of dry-run 1[!] WARNING: Test case results in a timeout (skipping)
[*] Attempting dry run with 'id:001078,time:0,execs:0,orig:vowel_program.txt'...
[!] WARNING: instability detected during calibration
    len = 53, map size = 47409, exec speed = 1941791 us, hash = c17fc6b18edc4770
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001079,time:0,execs:0,orig:vrp-5.txt'...
Results of dry-run 2
[-] Oops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (48.8 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sd $[49999 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use https://jwilk.net/software/recidivm to
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, set '-m 0'.

    - In QEMU persistent mode the selected address(es) for the loop are not
      properly cleaning up variables and memory. Try adding
      AFL_QEMU_PERSISTENT_GPR=1 or select better addresses in the binary.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke the Awesome Fuzzing Discord for troubleshooting tips.
[!] WARNING: Test case 'id:001079,time:0,execs:0,orig:vrp-5.txt' results in a crash, skipping
[*] Attempting dry run with 'id:001080,time:0,execs:0,orig:vrp-6.txt'...
[!] WARNING: instability detected during calibration
    len = 45, map size = 47273, exec speed = 1282375 us, hash = f98a9e406183a5e2
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001081,time:0,execs:0,orig:vrp-7.txt'...
    len = 46, map size = 47263, exec speed = 1280103 us, hash = f9b0ba71228c749f
Results of dry-run 0[*] Attempting dry run with 'id:001082,time:0,execs:0,orig:widechar-2.txt'...
    len = 52, map size = 47259, exec speed = 1274965 us, hash = 966cbfebf967f4d8
Results of dry-run 0[*] Attempting dry run with 'id:001083,time:0,execs:0,orig:widechar-3.txt'...
[!] WARNING: instability detected during calibration
    len = 72, map size = 47422, exec speed = 1969880 us, hash = dc06d47ab06f6d03
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001084,time:0,execs:0,orig:zero-struct-1.txt'...
[!] WARNING: instability detected during calibration
    len = 55, map size = 47434, exec speed = 1953324 us, hash = e90de5c125bb86f6
Results of dry-run 0[!] WARNING: Instrumentation output varies across runs.
[*] Attempting dry run with 'id:001085,time:0,execs:0,orig:zero-struct-2.txt'...
    len = 53, map size = 47264, exec speed = 1280454 us, hash = c1d37fff5978c429
Results of dry-run 5[!] WARNING: No new instrumentation output, test case may be useless.
[!] WARNING: Skipped 7 test cases (0.64%) due to timeouts or crashes.
[+] All test cases processed.
[!] WARNING: The target binary is pretty slow! See /usr/local/share/doc/afl/fuzzing_in_depth.md#i-improve-the-speed
[!] WARNING: Some test cases look useless. Consider using a smaller set.
[!] WARNING: You probably have far too many input files! Consider trimming down.
[+] Here are some useful stats:

    Test case count : 80 favored, 430 variable, 342 ignored, 1086 total
       Bitmap range : 37884 to 47763 bits (average: 46846.14 bits)
        Exec timing : 284k to 17.0M us (average: 1.58M us)

[*] -t option specified. We'll use an exec timeout of 99000 ms.
[+] All set and ready to roll!


 american fuzzy lop ++4.08c {default} (...nge-2023/build/X86/gem5.opt) [fast]
┌─ process timing ────────────────────────────────────┬─ overall results ────┐
│        run time : 0 days, 6 hrs, 48 min, 25 sec     │  cycles done : 0     │
│   last new find : 0 days, 0 hrs, 2 min, 9 sec       │ corpus count : 1182  │
│last saved crash : 0 days, 0 hrs, 0 min, 17 sec      │saved crashes : 19    │
│ last saved hang : none seen yet                     │  saved hangs : 0     │
├─ cycle progress ─────────────────────┬─ map coverage┴──────────────────────┤
│  now processing : 644.0 (54.5%)      │    map density : 72.71% / 74.48%    │
│  runs timed out : 0 (0.00%)          │ count coverage : 2.01 bits/tuple    │
├─ stage progress ─────────────────────┼─ findings in depth ─────────────────┤
│  now trying : cm-gem5.so             │ favored items : 83 (7.02%)          │
│ stage execs : 100/640 (15.62%)       │  new edges on : 109 (9.22%)         │
│ total execs : 20.5k                  │ total crashes : 3403 (19 saved)     │
│  exec speed : 0.51/sec (zzzz...)     │  total tmouts : 0 (0 saved)         │
├─ fuzzing strategy yields ────────────┴─────────────┬─ item geometry ───────┤
│   bit flips : disabled (custom-mutator-only mode)  │    levels : 2         │
│  byte flips : disabled (custom-mutator-only mode)  │   pending : 831       │
│ arithmetics : disabled (custom-mutator-only mode)  │  pend fav : 78        │
│  known ints : disabled (custom-mutator-only mode)  │ own finds : 96        │
│  dictionary : n/a                                  │  imported : 0         │
│havoc/splice : 0/0, 0/0                             │ stability : 100.00%   │
│py/custom/rq : unused, 109/11.2k, unused, unused    ├───────────────────────┘
│    trim/eff : 5.13%/130, disabled                  │          [cpu000: 25%]
└─ strategy: explore ────────── state: in progress ──┘client_loop: send disconnect: Broken pipe
karine@nmscmo008175 ~ % 

